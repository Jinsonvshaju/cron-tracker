{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {\n    popup,\n    setPopup\n  };\n  const [timer, setTimer] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const [movementEvents, setMovementEvents] = useState([]);\n  const [movements, setMovements] = useState([]);\n  const [baseEvents, setBaseEvents] = useState([]);\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    getMovementDetails();\n\n    if (firstRender) {\n      handleReload();\n    }\n\n    countTimer(); //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer() {\n    if (firstRender) {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 10000);\n    }\n  }\n\n  const handleEventClick = _ref => {\n    let {\n      event\n    } = _ref;\n    const key = getEventKey(event.start);\n\n    if (event.title.includes(\"Event\")) {\n      var messages = [];\n      Object.values(timeMap.get(key)).forEach(element => {\n        const message = element.name + \" \" + element.clientName + \" (\" + element.env + \") \" + element.exchange + \" \" + element.cron + \" (\" + element.cronInfo + \" \" + element.timeZone + \") \";\n        messages.push(message);\n      });\n      setDisplayMap({\n        key: key,\n        values: messages\n      });\n    } else if (event.title.includes(\"Movement\")) {\n      const element = getMovement(event.title);\n      const messages = [element.id + \" \" + element.status];\n      setDisplayMap({\n        key: `${element.counterParty + \" Movement\"}`,\n        values: messages\n      });\n    }\n\n    setPopup(true);\n  };\n\n  function getMovement(title) {\n    return movements.filter(element => element.title === title)[0];\n  }\n\n  function populateMovementEvents(data) {\n    var movementEvents = [];\n    var alteredMovements = [];\n    data.forEach(element => {\n      movementEvents.push({\n        title: \"Movement \" + movementEvents.length,\n        start: getEventKey(element.createdTs),\n        end: getEndTime(getEventKey(element.createdTs)),\n        color: \"red\"\n      });\n      alteredMovements.push({ ...element,\n        title: \"Movement \" + alteredMovements.length\n      });\n    });\n\n    if (baseEvents.length > 0) {\n      setMovementEvents(movementEvents);\n      setEvents(baseEvents.concat(movementEvents));\n      setMovements(alteredMovements);\n    }\n  }\n\n  const setNewEvents = cronDetails => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach(element => {\n      var {\n        name,\n        clientName,\n        timeZone,\n        cron,\n        cronInfo,\n        env,\n        exchange,\n        reportCycle,\n        createdTs,\n        triggerTimes\n      } = element;\n      triggerTimes.forEach(element => {\n        if (startTimeMap.has(getEventKey(element))) {\n          const newList = [{\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs\n          }];\n          const existingList = startTimeMap.get(getEventKey(element));\n          startTimeMap.set(getEventKey(element), existingList.concat(newList));\n        } else {\n          const list = [{\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs\n          }];\n          startTimeMap.set(getEventKey(element), list);\n        }\n      });\n    });\n    startTimeMap.forEach((value, key) => {\n      if (!isNaN(new Date(key).getTime())) {\n        newEvents.push({\n          title: \"Event \" + newEvents.length,\n          start: key,\n          end: getEndTime(key)\n        });\n      }\n    });\n    setBaseEvents(newEvents);\n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReload = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        var startTimeMap = new Map();\n        var newEvents = [];\n        res.data.message.forEach(element => {\n          var {\n            name,\n            clientName,\n            timeZone,\n            cron,\n            cronInfo,\n            env,\n            exchange,\n            reportCycle,\n            createdTs,\n            triggerTimes\n          } = element;\n          triggerTimes.forEach(element => {\n            if (startTimeMap.has(getEventKey(element))) {\n              const newList = [{\n                name: name,\n                clientName: clientName,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                env: env,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              const existingList = startTimeMap.get(getEventKey(element));\n              startTimeMap.set(getEventKey(element), existingList.concat(newList));\n            } else {\n              const list = [{\n                name: name,\n                clientName: clientName,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                env: env,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              startTimeMap.set(getEventKey(element), list);\n            }\n          });\n        });\n        startTimeMap.forEach((value, key) => {\n          if (!isNaN(new Date(key).getTime())) {\n            newEvents.push({\n              title: \"Event \" + newEvents.length,\n              start: key,\n              end: getEndTime(key)\n            });\n          }\n        });\n        setBaseEvents(newEvents);\n        setEvents(newEvents);\n        setTimeMap(startTimeMap);\n        setCronDetails(res.data.message);\n        setFirstRender(false);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const getMovementDetails = () => {\n    return new Promise(resolve => {\n      api.getMovementRecords().then(res => {\n        populateMovementEvents(res.data.message);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(POPup, {\n        elementsMap: displayMap,\n        stateValue: stateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridWeek\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        headerToolbar: {\n          left: \"prev,next\",\n          center: \"title\",\n          right: \"today\"\n        },\n        buttonText: {\n          today: \"Current Week\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:10:00\",\n        events: events,\n        slotLabelInterval: \"00:30:00\",\n        nowIndicator: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"Ho7sVnDaWZOWEWRo8dEHuP3MpOE=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","useEffect","API","moment","POPup","api","Home","props","cronDetails","setCronDetails","timeMap","setTimeMap","Map","events","setEvents","displayMap","setDisplayMap","popup","setPopup","stateValue","timer","setTimer","firstRender","setFirstRender","movementEvents","setMovementEvents","movements","setMovements","baseEvents","setBaseEvents","getEventKey","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","getMovementDetails","handleReload","countTimer","setTimeout","handleEventClick","event","key","start","title","includes","messages","Object","values","get","forEach","element","message","name","clientName","env","exchange","cron","cronInfo","timeZone","push","getMovement","id","status","counterParty","filter","populateMovementEvents","data","alteredMovements","length","createdTs","end","color","concat","setNewEvents","startTimeMap","newEvents","reportCycle","triggerTimes","has","newList","existingList","set","list","value","isNaN","getTime","Promise","resolve","getTriggerTimes","then","res","catch","err","console","log","getMovementRecords","left","center","right","today"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\n\nlet api = new API();\n\nfunction Home(props) {\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = { popup, setPopup };\n  const [timer, setTimer] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const [movementEvents, setMovementEvents] = useState([]);\n  const [movements, setMovements] = useState([]);\n  const [baseEvents, setBaseEvents] = useState([]);\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    getMovementDetails();\n    if (firstRender) {\n      handleReload();\n    }\n    countTimer();\n    //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer() {\n    if (firstRender) {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 10000);\n    }\n  }\n\n  const handleEventClick = ({ event }) => {\n    const key = getEventKey(event.start);\n    if (event.title.includes(\"Event\")) {\n      var messages = [];\n      Object.values(timeMap.get(key)).forEach((element) => {\n        const message =\n          element.name +\n          \" \" +\n          element.clientName +\n          \" (\" +\n          element.env +\n          \") \" +\n          element.exchange +\n          \" \" +\n          element.cron +\n          \" (\" +\n          element.cronInfo +\n          \" \" +\n          element.timeZone +\n          \") \";\n        messages.push(message);\n      });\n      setDisplayMap({ key: key, values: messages });\n    } else if (event.title.includes(\"Movement\")) {\n      const element = getMovement(event.title);\n      const messages = [element.id + \" \" + element.status];\n      setDisplayMap({\n        key: `${element.counterParty + \" Movement\"}`,\n        values: messages,\n      });\n    }\n    setPopup(true);\n  };\n\n  function getMovement(title) {\n    return movements.filter((element) => element.title === title)[0];\n  }\n\n  function populateMovementEvents(data) {\n    var movementEvents = [];\n    var alteredMovements = [];\n    data.forEach((element) => {\n      movementEvents.push({\n        title: \"Movement \" + movementEvents.length,\n        start: getEventKey(element.createdTs),\n        end: getEndTime(getEventKey(element.createdTs)),\n        color: \"red\",\n      });\n      alteredMovements.push({\n        ...element,\n        title: \"Movement \" + alteredMovements.length,\n      });\n    });\n    if (baseEvents.length > 0) {\n      setMovementEvents(movementEvents);\n      setEvents(baseEvents.concat(movementEvents));\n      setMovements(alteredMovements);\n    }\n  }\n\n  const setNewEvents = (cronDetails) => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach((element) => {\n      var {\n        name,\n        clientName,\n        timeZone,\n        cron,\n        cronInfo,\n        env,\n        exchange,\n        reportCycle,\n        createdTs,\n        triggerTimes,\n      } = element;\n      triggerTimes.forEach((element) => {\n        if (startTimeMap.has(getEventKey(element))) {\n          const newList = [\n            {\n              name: name,\n              clientName: clientName,\n              timeZone: timeZone,\n              cron: cron,\n              cronInfo: cronInfo,\n              env: env,\n              exchange: exchange,\n              reportCycle: reportCycle,\n              createdTs: createdTs,\n            },\n          ];\n          const existingList = startTimeMap.get(getEventKey(element));\n          startTimeMap.set(getEventKey(element), existingList.concat(newList));\n        } else {\n          const list = [\n            {\n              name: name,\n              clientName: clientName,\n              timeZone: timeZone,\n              cron: cron,\n              cronInfo: cronInfo,\n              env: env,\n              exchange: exchange,\n              reportCycle: reportCycle,\n              createdTs: createdTs,\n            },\n          ];\n          startTimeMap.set(getEventKey(element), list);\n        }\n      });\n    });\n    startTimeMap.forEach((value, key) => {\n      if (!isNaN(new Date(key).getTime())) {\n        newEvents.push({\n          title: \"Event \" + newEvents.length,\n          start: key,\n          end: getEndTime(key),\n        });\n      }\n    });\n    setBaseEvents(newEvents);\n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReload = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          var startTimeMap = new Map();\n          var newEvents = [];\n          res.data.message.forEach((element) => {\n            var {\n              name,\n              clientName,\n              timeZone,\n              cron,\n              cronInfo,\n              env,\n              exchange,\n              reportCycle,\n              createdTs,\n              triggerTimes,\n            } = element;\n            triggerTimes.forEach((element) => {\n              if (startTimeMap.has(getEventKey(element))) {\n                const newList = [\n                  {\n                    name: name,\n                    clientName: clientName,\n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,\n                    env: env,\n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                const existingList = startTimeMap.get(getEventKey(element));\n                startTimeMap.set(\n                  getEventKey(element),\n                  existingList.concat(newList)\n                );\n              } else {\n                const list = [\n                  {\n                    name: name,\n                    clientName: clientName,\n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,\n                    env: env,\n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                startTimeMap.set(getEventKey(element), list);\n              }\n            });\n          });\n          startTimeMap.forEach((value, key) => {\n            if (!isNaN(new Date(key).getTime())) {\n              newEvents.push({\n                title: \"Event \" + newEvents.length,\n                start: key,\n                end: getEndTime(key),\n              });\n            }\n          });\n          setBaseEvents(newEvents);\n          setEvents(newEvents);\n          setTimeMap(startTimeMap);\n          setCronDetails(res.data.message);\n          setFirstRender(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const getMovementDetails = () => {\n    return new Promise((resolve) => {\n      api\n        .getMovementRecords()\n        .then((res) => {\n          populateMovementEvents(res.data.message);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <POPup elementsMap={displayMap} stateValue={stateValue}></POPup>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridWeek\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          headerToolbar={{\n            left: \"prev,next\",\n            center: \"title\",\n            right: \"today\",\n          }}\n          buttonText={{ today: \"Current Week\" }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:10:00\"\n          events={events}\n          slotLabelInterval=\"00:30:00\"\n          nowIndicator={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}