{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport { Position } from \"../../common/position\";\n/** `Position` with `\"auto\"` values, used by `Popover` and `Tooltip`. */\n\nexport var PopoverPosition = __assign(__assign({}, Position), {\n  AUTO: \"auto\",\n  AUTO_END: \"auto-end\",\n  AUTO_START: \"auto-start\"\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAASA,QAAT,QAAyB,uBAAzB;AAOA;;AACA,OAAO,IAAMC,eAAe,yBACrBD,QADqB,GACb;AACXE,MAAI,EAAE,MADK;AAEXC,UAAQ,EAAE,UAFC;AAGXC,YAAU,EAAE;AAHD,CADa,CAArB","names":["Position","PopoverPosition","AUTO","AUTO_END","AUTO_START"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/popover/popoverSharedProps.ts"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Boundary as PopperBoundary, Modifiers as PopperModifiers, Placement } from \"popper.js\";\nimport * as React from \"react\";\n\nimport { Position } from \"../../common/position\";\nimport { Props } from \"../../common/props\";\nimport { OverlayableProps } from \"../overlay/overlay\";\n\n// re-export symbols for library consumers\nexport { PopperBoundary, PopperModifiers };\n\n/** `Position` with `\"auto\"` values, used by `Popover` and `Tooltip`. */\nexport const PopoverPosition = {\n    ...Position,\n    AUTO: \"auto\" as \"auto\",\n    AUTO_END: \"auto-end\" as \"auto-end\",\n    AUTO_START: \"auto-start\" as \"auto-start\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type PopoverPosition = typeof PopoverPosition[keyof typeof PopoverPosition];\n\n/** Props shared between `Popover` and `Tooltip`. */\nexport interface IPopoverSharedProps extends OverlayableProps, Props {\n    children?: React.ReactNode;\n\n    /**\n     * Determines the boundary element used by Popper for its `flip` and\n     * `preventOverflow` modifiers. Three shorthand keywords are supported;\n     * Popper will find the correct DOM element itself.\n     *\n     * @default \"scrollParent\"\n     */\n    boundary?: PopperBoundary;\n\n    /**\n     * When enabled, clicks inside a `Classes.POPOVER_DISMISS` element\n     * will only close the current popover and not outer popovers.\n     * When disabled, the current popover and any ancestor popovers will be closed.\n     *\n     * @see http://blueprintjs.com/docs/#core/components/popover.closing-on-click\n     * @default false\n     */\n    captureDismiss?: boolean;\n\n    /**\n     * Initial opened state when uncontrolled.\n     *\n     * @default false\n     */\n    defaultIsOpen?: boolean;\n\n    /**\n     * Prevents the popover from appearing when `true`.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * The amount of time in milliseconds the popover should remain open after\n     * the user hovers off the trigger. The timer is canceled if the user mouses\n     * over the target before it expires.\n     *\n     * @default 300\n     */\n    hoverCloseDelay?: number;\n\n    /**\n     * The amount of time in milliseconds the popover should wait before opening\n     * after the user hovers over the trigger. The timer is canceled if the user\n     * mouses away from the target before it expires.\n     *\n     * @default 150\n     */\n    hoverOpenDelay?: number;\n\n    /**\n     * Whether a popover that uses a `Portal` should automatically inherit the\n     * dark theme from its parent.\n     *\n     * @default true\n     */\n    inheritDarkTheme?: boolean;\n\n    /**\n     * Whether the popover is visible. Passing this prop puts the popover in\n     * controlled mode, where the only way to change visibility is by updating\n     * this property. If `disabled={true}`, this prop will be ignored, and the\n     * popover will remain closed.\n     *\n     * @default undefined\n     */\n    isOpen?: boolean;\n\n    /**\n     * Whether to apply minimal styling to this popover or tooltip. Minimal popovers\n     * do not have an arrow pointing to their target and use a subtler animation.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n\n    /**\n     * Popper modifier options, passed directly to internal Popper instance. See\n     * https://popper.js.org/docs/modifiers/ for complete\n     * details.\n     */\n    modifiers?: PopperModifiers;\n\n    /**\n     * Callback invoked in controlled mode when the popover open state *would*\n     * change due to user interaction.\n     */\n    onInteraction?: (nextOpenState: boolean, e?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Whether the popover should open when its target is focused. If `true`,\n     * target will render with `tabindex=\"0\"` to make it focusable via keyboard\n     * navigation.\n     *\n     * Note that this functionality is only enabled for hover interaction\n     * popovers/tooltips.\n     *\n     * @default true\n     */\n    openOnTargetFocus?: boolean;\n\n    /**\n     * The placement (relative to the target) at which the popover should appear.\n     * Mutually exclusive with `position` prop.\n     *\n     * The default value of `\"auto\"` will choose the best placement when opened\n     * and will allow the popover to reposition itself to remain onscreen as the\n     * user scrolls around.\n     *\n     * @see https://popper.js.org/docs/v1/#Popper.placements\n     * @default \"auto\"\n     */\n    placement?: Placement;\n\n    /**\n     * A space-delimited string of class names applied to the popover element.\n     */\n    popoverClassName?: string;\n\n    /**\n     * The position (relative to the target) at which the popover should appear.\n     * Mutually exclusive with `placement` prop.\n     *\n     * The default value of `\"auto\"` will choose the best position when opened\n     * and will allow the popover to reposition itself to remain onscreen as the\n     * user scrolls around.\n     *\n     * @default \"auto\"\n     */\n    position?: PopoverPosition;\n\n    /**\n     * Space-delimited string of class names applied to the target element.\n     */\n    targetClassName?: string;\n\n    /**\n     * HTML props to spread to target element. Use `targetTagName` to change\n     * the type of element rendered. Note that `ref` is not supported.\n     */\n    targetProps?: React.HTMLAttributes<HTMLElement>;\n\n    /**\n     * HTML tag name for the target element. This must be an HTML element to\n     * ensure that it supports the necessary DOM event handlers.\n     *\n     * By default, a `<span>` tag is used so popovers appear as inline-block\n     * elements and can be nested in text. Use `<div>` tag for a block element.\n     *\n     * @default \"span\"\n     */\n    targetTagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * Whether the popover should be rendered inside a `Portal` attached to\n     * `portalContainer` prop.\n     *\n     * Rendering content inside a `Portal` allows the popover content to escape\n     * the physical bounds of its parent while still being positioned correctly\n     * relative to its target. Using a `Portal` is necessary if any ancestor of\n     * the target hides overflow or uses very complex positioning.\n     *\n     * Not using a `Portal` can result in smoother performance when scrolling\n     * and allows the popover content to inherit CSS styles from surrounding\n     * elements, but it remains subject to the overflow bounds of its ancestors.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n\n    /**\n     * HTML tag name for the wrapper element, which also receives the\n     * `className` prop.\n     *\n     * @default \"span\"\n     */\n    wrapperTagName?: keyof JSX.IntrinsicElements;\n}\n"]},"metadata":{},"sourceType":"module"}