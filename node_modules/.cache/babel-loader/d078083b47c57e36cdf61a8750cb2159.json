{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport Select from 'antd/lib/select';\nimport { DEFAULT_LOCALE_EN } from '../locale';\nimport { classNames } from '../utils';\nexport default function Period(props) {\n  const {\n    value,\n    setValue,\n    locale,\n    className,\n    disabled,\n    readOnly,\n    shortcuts\n  } = props;\n  let options = [{\n    value: 'year',\n    label: locale.yearOption || DEFAULT_LOCALE_EN.yearOption\n  }, {\n    value: 'month',\n    label: locale.monthOption || DEFAULT_LOCALE_EN.monthOption\n  }, {\n    value: 'week',\n    label: locale.weekOption || DEFAULT_LOCALE_EN.weekOption\n  }, {\n    value: 'day',\n    label: locale.dayOption || DEFAULT_LOCALE_EN.dayOption\n  }, {\n    value: 'hour',\n    label: locale.hourOption || DEFAULT_LOCALE_EN.hourOption\n  }, {\n    value: 'minute',\n    label: locale.minuteOption || DEFAULT_LOCALE_EN.minuteOption\n  }];\n\n  if (shortcuts && (shortcuts === true || shortcuts.includes('@reboot'))) {\n    options = [...options, {\n      value: 'reboot',\n      label: locale.rebootOption || DEFAULT_LOCALE_EN.rebootOption\n    }];\n  }\n\n  const handleChange = useCallback(newValue => {\n    if (!readOnly) {\n      setValue(newValue);\n    }\n  }, [setValue, readOnly]);\n  const internalClassName = useMemo(() => classNames({\n    'react-js-cron-field': true,\n    'react-js-cron-period': true,\n    [`${className}-field`]: !!className,\n    [`${className}-period`]: !!className\n  }), [className]);\n  const selectClassName = useMemo(() => classNames({\n    'react-js-cron-select': true,\n    'react-js-cron-select-no-prefix': locale.prefixPeriod === '',\n    [`${className}-select`]: !!className\n  }), [className, locale.prefixPeriod]);\n  const dropdownClassName = useMemo(() => classNames({\n    'react-js-cron-select-dropdown': true,\n    'react-js-cron-select-dropdown-period': true,\n    [`${className}-select-dropdown`]: !!className,\n    [`${className}-select-dropdown-period`]: !!className\n  }), [className]);\n  return React.createElement(\"div\", {\n    className: internalClassName\n  }, locale.prefixPeriod !== '' && React.createElement(\"span\", null, locale.prefixPeriod || DEFAULT_LOCALE_EN.prefixPeriod), React.createElement(Select, {\n    key: JSON.stringify(locale),\n    defaultValue: value,\n    value: value,\n    onChange: handleChange,\n    options: options,\n    className: selectClassName,\n    dropdownClassName: dropdownClassName,\n    disabled: disabled,\n    showArrow: !readOnly,\n    open: readOnly ? false : undefined\n  }));\n}","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/react-js-cron/dist/esm/fields/Period.js"],"names":["React","useCallback","useMemo","Select","DEFAULT_LOCALE_EN","classNames","Period","props","value","setValue","locale","className","disabled","readOnly","shortcuts","options","label","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","includes","rebootOption","handleChange","newValue","internalClassName","selectClassName","prefixPeriod","dropdownClassName","createElement","key","JSON","stringify","defaultValue","onChange","showArrow","open","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Select from 'antd/lib/select';\nimport { DEFAULT_LOCALE_EN } from '../locale';\nimport { classNames } from '../utils';\nexport default function Period(props) {\n  const {\n    value,\n    setValue,\n    locale,\n    className,\n    disabled,\n    readOnly,\n    shortcuts\n  } = props;\n  let options = [{\n    value: 'year',\n    label: locale.yearOption || DEFAULT_LOCALE_EN.yearOption\n  }, {\n    value: 'month',\n    label: locale.monthOption || DEFAULT_LOCALE_EN.monthOption\n  }, {\n    value: 'week',\n    label: locale.weekOption || DEFAULT_LOCALE_EN.weekOption\n  }, {\n    value: 'day',\n    label: locale.dayOption || DEFAULT_LOCALE_EN.dayOption\n  }, {\n    value: 'hour',\n    label: locale.hourOption || DEFAULT_LOCALE_EN.hourOption\n  }, {\n    value: 'minute',\n    label: locale.minuteOption || DEFAULT_LOCALE_EN.minuteOption\n  }];\n\n  if (shortcuts && (shortcuts === true || shortcuts.includes('@reboot'))) {\n    options = [...options, {\n      value: 'reboot',\n      label: locale.rebootOption || DEFAULT_LOCALE_EN.rebootOption\n    }];\n  }\n\n  const handleChange = useCallback(newValue => {\n    if (!readOnly) {\n      setValue(newValue);\n    }\n  }, [setValue, readOnly]);\n  const internalClassName = useMemo(() => classNames({\n    'react-js-cron-field': true,\n    'react-js-cron-period': true,\n    [`${className}-field`]: !!className,\n    [`${className}-period`]: !!className\n  }), [className]);\n  const selectClassName = useMemo(() => classNames({\n    'react-js-cron-select': true,\n    'react-js-cron-select-no-prefix': locale.prefixPeriod === '',\n    [`${className}-select`]: !!className\n  }), [className, locale.prefixPeriod]);\n  const dropdownClassName = useMemo(() => classNames({\n    'react-js-cron-select-dropdown': true,\n    'react-js-cron-select-dropdown-period': true,\n    [`${className}-select-dropdown`]: !!className,\n    [`${className}-select-dropdown-period`]: !!className\n  }), [className]);\n  return React.createElement(\"div\", {\n    className: internalClassName\n  }, locale.prefixPeriod !== '' && React.createElement(\"span\", null, locale.prefixPeriod || DEFAULT_LOCALE_EN.prefixPeriod), React.createElement(Select, {\n    key: JSON.stringify(locale),\n    defaultValue: value,\n    value: value,\n    onChange: handleChange,\n    options: options,\n    className: selectClassName,\n    dropdownClassName: dropdownClassName,\n    disabled: disabled,\n    showArrow: !readOnly,\n    open: readOnly ? false : undefined\n  }));\n}"]},"metadata":{},"sourceType":"module"}