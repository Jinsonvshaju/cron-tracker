{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes as CoreClasses, DISPLAYNAME_PREFIX, Keys, Popover, PopoverInteractionKind, Position, TagInput, refHandler, setRef } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  __extends(MultiSelect, _super);\n\n  function MultiSelect() {\n    var _this = this;\n\n    var _a;\n\n    _this = _super.apply(this, arguments) || this;\n    _this.state = {\n      isOpen: _this.props.popoverProps && _this.props.popoverProps.isOpen || false\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: refHandler(_this, \"input\", (_a = _this.props.tagInputProps) === null || _a === void 0 ? void 0 : _a.inputRef),\n      queryList: function (ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a;\n\n      var _b = _this.props,\n          fill = _b.fill,\n          _c = _b.tagInputProps,\n          tagInputProps = _c === void 0 ? {} : _c,\n          _d = _b.popoverProps,\n          popoverProps = _d === void 0 ? {} : _d,\n          _e = _b.selectedItems,\n          selectedItems = _e === void 0 ? [] : _e,\n          placeholder = _b.placeholder;\n      var handlePaste = listProps.handlePaste,\n          handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n\n      if (fill) {\n        popoverProps.fill = true;\n        tagInputProps.fill = true;\n      } // add our own inputProps.className so that we can reference it in event handlers\n\n\n      var inputProps = __assign(__assign({}, tagInputProps.inputProps), {\n        className: classNames((_a = tagInputProps.inputProps) === null || _a === void 0 ? void 0 : _a.className, Classes.MULTISELECT_TAG_INPUT_INPUT)\n      });\n\n      var handleTagInputAdd = function (values, method) {\n        if (method === \"paste\") {\n          handlePaste(values);\n        }\n      };\n\n      return (\n        /* eslint-disable-next-line deprecation/deprecation */\n        React.createElement(Popover, __assign({\n          autoFocus: false,\n          canEscapeKeyClose: true,\n          enforceFocus: false,\n          isOpen: _this.state.isOpen,\n          position: Position.BOTTOM_LEFT\n        }, popoverProps, {\n          className: classNames(listProps.className, popoverProps.className),\n          interactionKind: PopoverInteractionKind.CLICK,\n          onInteraction: _this.handlePopoverInteraction,\n          popoverClassName: classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName),\n          onOpened: _this.handlePopoverOpened\n        }), React.createElement(\"div\", {\n          onKeyDown: _this.getTagInputKeyDownHandler(handleKeyDown),\n          onKeyUp: _this.getTagInputKeyUpHandler(handleKeyUp)\n        }, React.createElement(TagInput, __assign({\n          placeholder: placeholder\n        }, tagInputProps, {\n          className: classNames(Classes.MULTISELECT, tagInputProps.className),\n          inputRef: _this.refHandlers.input,\n          inputProps: inputProps,\n          inputValue: listProps.query,\n\n          /* eslint-disable-next-line react/jsx-no-bind */\n          onAdd: handleTagInputAdd,\n          onInputChange: listProps.handleQueryChange,\n          onRemove: _this.handleTagRemove,\n          values: selectedItems.map(_this.props.tagRenderer)\n        }))), React.createElement(\"div\", {\n          onKeyDown: handleKeyDown,\n          onKeyUp: handleKeyUp\n        }, listProps.itemList))\n      );\n    };\n\n    _this.handleItemSelect = function (item, evt) {\n      var _a, _b;\n\n      if (_this.input != null) {\n        _this.input.focus();\n      }\n\n      (_b = (_a = _this.props).onItemSelect) === null || _b === void 0 ? void 0 : _b.call(_a, item, evt);\n    };\n\n    _this.handleQueryChange = function (query, evt) {\n      var _a, _b;\n\n      _this.setState({\n        isOpen: query.length > 0 || !_this.props.openOnKeyDown\n      });\n\n      (_b = (_a = _this.props).onQueryChange) === null || _b === void 0 ? void 0 : _b.call(_a, query, evt);\n    }; // Popover interaction kind is CLICK, so this only handles click events.\n    // Note that we defer to the next animation frame in order to get the latest document.activeElement\n\n\n    _this.handlePopoverInteraction = function (nextOpenState, evt) {\n      return _this.requestAnimationFrame(function () {\n        var _a, _b;\n\n        var isInputFocused = _this.input === document.activeElement;\n\n        if (_this.input != null && !isInputFocused) {\n          // input is no longer focused, we should close the popover\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!_this.props.openOnKeyDown) {\n          // we should open immediately on click focus events\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        (_b = (_a = _this.props.popoverProps) === null || _a === void 0 ? void 0 : _a.onInteraction) === null || _b === void 0 ? void 0 : _b.call(_a, nextOpenState, evt);\n      });\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      var _a, _b;\n\n      if (_this.queryList != null) {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      (_b = (_a = _this.props.popoverProps) === null || _a === void 0 ? void 0 : _a.onOpened) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n\n    _this.handleTagRemove = function (tag, index) {\n      var _a;\n\n      var _b = _this.props,\n          _c = _b.selectedItems,\n          selectedItems = _c === void 0 ? [] : _c,\n          onRemove = _b.onRemove,\n          tagInputProps = _b.tagInputProps;\n      onRemove === null || onRemove === void 0 ? void 0 : onRemove(selectedItems[index], index);\n      (_a = tagInputProps === null || tagInputProps === void 0 ? void 0 : tagInputProps.onRemove) === null || _a === void 0 ? void 0 : _a.call(tagInputProps, tag, index);\n    };\n\n    _this.getTagInputKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (e) {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        // eslint-disable-next-line deprecation/deprecation\n        var which = e.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          // By default the escape key will not trigger a blur on the\n          // input element. It must be done explicitly.\n          if (_this.input != null) {\n            _this.input.blur();\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        var isTargetingTagRemoveButton = e.target.closest(\".\".concat(CoreClasses.TAG_REMOVE)) != null;\n\n        if (_this.state.isOpen && !isTargetingTagRemoveButton) {\n          handleQueryListKeyDown === null || handleQueryListKeyDown === void 0 ? void 0 : handleQueryListKeyDown(e);\n        }\n      };\n    };\n\n    _this.getTagInputKeyUpHandler = function (handleQueryListKeyUp) {\n      return function (e) {\n        var isTargetingInput = e.target.classList.contains(Classes.MULTISELECT_TAG_INPUT_INPUT); // only handle events when the focus is on the actual <input> inside the TagInput, as that's\n        // what QueryList is designed to do\n\n        if (_this.state.isOpen && isTargetingInput) {\n          handleQueryListKeyUp === null || handleQueryListKeyUp === void 0 ? void 0 : handleQueryListKeyUp(e);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  MultiSelect.ofType = function () {\n    return MultiSelect;\n  };\n\n  MultiSelect.prototype.componentDidUpdate = function (prevProps) {\n    var _a, _b, _c, _d, _e;\n\n    if (((_a = prevProps.tagInputProps) === null || _a === void 0 ? void 0 : _a.inputRef) !== ((_b = this.props.tagInputProps) === null || _b === void 0 ? void 0 : _b.inputRef)) {\n      setRef((_c = prevProps.tagInputProps) === null || _c === void 0 ? void 0 : _c.inputRef, null);\n      this.refHandlers.input = refHandler(this, \"input\", (_d = this.props.tagInputProps) === null || _d === void 0 ? void 0 : _d.inputRef);\n      setRef((_e = this.props.tagInputProps) === null || _e === void 0 ? void 0 : _e.inputRef, this.input);\n    }\n  };\n\n  MultiSelect.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        openOnKeyDown = _a.openOnKeyDown,\n        popoverProps = _a.popoverProps,\n        tagInputProps = _a.tagInputProps,\n        restProps = __rest(_a, [\"openOnKeyDown\", \"popoverProps\", \"tagInputProps\"]);\n\n    return React.createElement(this.TypedQueryList, __assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      onQueryChange: this.handleQueryChange,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  MultiSelect.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MultiSelect\");\n  MultiSelect.defaultProps = {\n    fill: false,\n    placeholder: \"Search...\"\n  };\n  return MultiSelect;\n}(AbstractPureComponent2);\n\nexport { MultiSelect };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","CoreClasses","DISPLAYNAME_PREFIX","Keys","Popover","PopoverInteractionKind","Position","TagInput","refHandler","setRef","QueryList","__extends","_this","isOpen","props","popoverProps","ofType","input","tagInputProps","_a","inputRef","queryList","ref","listProps","fill","_c","_d","_e","selectedItems","placeholder","handleKeyDown","handleKeyUp","inputProps","className","MULTISELECT_TAG_INPUT_INPUT","handleTagInputAdd","values","method","handlePaste","__assign","autoFocus","canEscapeKeyClose","enforceFocus","state","position","BOTTOM_LEFT","interactionKind","CLICK","onInteraction","handlePopoverInteraction","popoverClassName","MULTISELECT_POPOVER","onOpened","handlePopoverOpened","onKeyDown","getTagInputKeyDownHandler","onKeyUp","getTagInputKeyUpHandler","MULTISELECT","refHandlers","inputValue","query","onAdd","onInputChange","handleQueryChange","onRemove","handleTagRemove","map","tagRenderer","itemList","item","evt","focus","onItemSelect","_b","setState","length","openOnKeyDown","onQueryChange","nextOpenState","requestAnimationFrame","isInputFocused","document","activeElement","node","scrollActiveItemIntoView","tag","index","handleQueryListKeyDown","e","which","ESCAPE","TAB","blur","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","isTargetingTagRemoveButton","target","closest","TAG_REMOVE","handleQueryListKeyUp","isTargetingInput","classList","contains","MultiSelect","prevProps","restProps","TypedQueryList","handleItemSelect","renderer","renderQueryList"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/select/src/components/select/multiSelect.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes as CoreClasses,\n    DISPLAYNAME_PREFIX,\n    IPopoverProps,\n    TagInputProps,\n    Keys,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n    TagInput,\n    TagInputAddMethod,\n    refHandler,\n    setRef,\n} from \"@blueprintjs/core\";\n\nimport { Classes, IListItemsProps } from \"../../common\";\nimport { IQueryListRendererProps, QueryList } from \"../query-list/queryList\";\n\n// N.B. selectedItems should really be a required prop, but is left optional for backwards compatibility\n\n// eslint-disable-next-line deprecation/deprecation\nexport type MultiSelectProps<T> = IMultiSelectProps<T>;\n/** @deprecated use MultiSelectProps */\nexport interface IMultiSelectProps<T> extends IListItemsProps<T> {\n    /**\n     * Whether the component should take up the full width of its container.\n     * This overrides `popoverProps.fill` and `tagInputProps.fill`.\n     */\n    fill?: boolean;\n\n    /**\n     * Callback invoked when an item is removed from the selection by\n     * removing its tag in the TagInput. This is generally more useful than\n     * `tagInputProps.onRemove`  because it receives the removed value instead of\n     * the value's rendered `ReactNode` tag.\n     *\n     * It is not recommended to supply _both_ this prop and `tagInputProps.onRemove`.\n     */\n    onRemove?: (value: T, index: number) => void;\n\n    /**\n     * If true, the component waits until a keydown event in the TagInput\n     * before opening its popover.\n     *\n     * If false, the popover opens immediately after a mouse click focuses\n     * the component's TagInput.\n     *\n     * N.B. the behavior of this prop differs slightly from the same one\n     * in the Suggest component; see https://github.com/palantir/blueprint/issues/4152.\n     *\n     * @default false\n     */\n    openOnKeyDown?: boolean;\n\n    /**\n     * Input placeholder text. Shorthand for `tagInputProps.placeholder`.\n     *\n     * @default \"Search...\"\n     */\n    placeholder?: string;\n\n    /** Props to spread to `Popover`. Note that `content` cannot be changed. */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    popoverProps?: Partial<IPopoverProps> & object;\n\n    /** Controlled selected values. */\n    selectedItems?: T[];\n\n    /** Props to spread to `TagInput`. Use `query` and `onQueryChange` to control the input. */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    tagInputProps?: Partial<TagInputProps> & object;\n\n    /** Custom renderer to transform an item into tag content. */\n    tagRenderer: (item: T) => React.ReactNode;\n}\n\nexport interface IMultiSelectState {\n    isOpen: boolean;\n}\n\nexport class MultiSelect<T> extends AbstractPureComponent2<MultiSelectProps<T>, IMultiSelectState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.MultiSelect`;\n\n    public static defaultProps = {\n        fill: false,\n        placeholder: \"Search...\",\n    };\n\n    public static ofType<U>() {\n        return MultiSelect as new (props: MultiSelectProps<U>) => MultiSelect<U>;\n    }\n\n    public state: IMultiSelectState = {\n        isOpen: (this.props.popoverProps && this.props.popoverProps.isOpen) || false,\n    };\n\n    private TypedQueryList = QueryList.ofType<T>();\n\n    public input: HTMLInputElement | null = null;\n\n    public queryList: QueryList<T> | null = null;\n\n    private refHandlers: {\n        input: React.RefCallback<HTMLInputElement>;\n        queryList: React.RefCallback<QueryList<T>>;\n    } = {\n        input: refHandler(this, \"input\", this.props.tagInputProps?.inputRef),\n        queryList: (ref: QueryList<T> | null) => (this.queryList = ref),\n    };\n\n    public componentDidUpdate(prevProps: MultiSelectProps<T>) {\n        if (prevProps.tagInputProps?.inputRef !== this.props.tagInputProps?.inputRef) {\n            setRef(prevProps.tagInputProps?.inputRef, null);\n            this.refHandlers.input = refHandler(this, \"input\", this.props.tagInputProps?.inputRef);\n            setRef(this.props.tagInputProps?.inputRef, this.input);\n        }\n    }\n\n    public render() {\n        // omit props specific to this component, spread the rest.\n        const { openOnKeyDown, popoverProps, tagInputProps, ...restProps } = this.props;\n\n        return (\n            <this.TypedQueryList\n                {...restProps}\n                onItemSelect={this.handleItemSelect}\n                onQueryChange={this.handleQueryChange}\n                ref={this.refHandlers.queryList}\n                renderer={this.renderQueryList}\n            />\n        );\n    }\n\n    private renderQueryList = (listProps: IQueryListRendererProps<T>) => {\n        const { fill, tagInputProps = {}, popoverProps = {}, selectedItems = [], placeholder } = this.props;\n        const { handlePaste, handleKeyDown, handleKeyUp } = listProps;\n\n        if (fill) {\n            popoverProps.fill = true;\n            tagInputProps.fill = true;\n        }\n\n        // add our own inputProps.className so that we can reference it in event handlers\n        const inputProps = {\n            ...tagInputProps.inputProps,\n            className: classNames(tagInputProps.inputProps?.className, Classes.MULTISELECT_TAG_INPUT_INPUT),\n        };\n\n        const handleTagInputAdd = (values: any[], method: TagInputAddMethod) => {\n            if (method === \"paste\") {\n                handlePaste(values);\n            }\n        };\n\n        return (\n            /* eslint-disable-next-line deprecation/deprecation */\n            <Popover\n                autoFocus={false}\n                canEscapeKeyClose={true}\n                enforceFocus={false}\n                isOpen={this.state.isOpen}\n                position={Position.BOTTOM_LEFT}\n                {...popoverProps}\n                className={classNames(listProps.className, popoverProps.className)}\n                interactionKind={PopoverInteractionKind.CLICK}\n                onInteraction={this.handlePopoverInteraction}\n                popoverClassName={classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName)}\n                onOpened={this.handlePopoverOpened}\n            >\n                <div\n                    onKeyDown={this.getTagInputKeyDownHandler(handleKeyDown)}\n                    onKeyUp={this.getTagInputKeyUpHandler(handleKeyUp)}\n                >\n                    <TagInput\n                        placeholder={placeholder}\n                        {...tagInputProps}\n                        className={classNames(Classes.MULTISELECT, tagInputProps.className)}\n                        inputRef={this.refHandlers.input}\n                        inputProps={inputProps}\n                        inputValue={listProps.query}\n                        /* eslint-disable-next-line react/jsx-no-bind */\n                        onAdd={handleTagInputAdd}\n                        onInputChange={listProps.handleQueryChange}\n                        onRemove={this.handleTagRemove}\n                        values={selectedItems.map(this.props.tagRenderer)}\n                    />\n                </div>\n                <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n                    {listProps.itemList}\n                </div>\n                {/* eslint-disable-next-line deprecation/deprecation */}\n            </Popover>\n        );\n    };\n\n    private handleItemSelect = (item: T, evt?: React.SyntheticEvent<HTMLElement>) => {\n        if (this.input != null) {\n            this.input.focus();\n        }\n        this.props.onItemSelect?.(item, evt);\n    };\n\n    private handleQueryChange = (query: string, evt?: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ isOpen: query.length > 0 || !this.props.openOnKeyDown });\n        this.props.onQueryChange?.(query, evt);\n    };\n\n    // Popover interaction kind is CLICK, so this only handles click events.\n    // Note that we defer to the next animation frame in order to get the latest document.activeElement\n    private handlePopoverInteraction = (nextOpenState: boolean, evt?: React.SyntheticEvent<HTMLElement>) =>\n        this.requestAnimationFrame(() => {\n            const isInputFocused = this.input === document.activeElement;\n\n            if (this.input != null && !isInputFocused) {\n                // input is no longer focused, we should close the popover\n                this.setState({ isOpen: false });\n            } else if (!this.props.openOnKeyDown) {\n                // we should open immediately on click focus events\n                this.setState({ isOpen: true });\n            }\n\n            this.props.popoverProps?.onInteraction?.(nextOpenState, evt);\n        });\n\n    private handlePopoverOpened = (node: HTMLElement) => {\n        if (this.queryList != null) {\n            // scroll active item into view after popover transition completes and all dimensions are stable.\n            this.queryList.scrollActiveItemIntoView();\n        }\n        this.props.popoverProps?.onOpened?.(node);\n    };\n\n    private handleTagRemove = (tag: React.ReactNode, index: number) => {\n        const { selectedItems = [], onRemove, tagInputProps } = this.props;\n        onRemove?.(selectedItems[index], index);\n        tagInputProps?.onRemove?.(tag, index);\n    };\n\n    private getTagInputKeyDownHandler = (handleQueryListKeyDown: React.KeyboardEventHandler<HTMLElement>) => {\n        return (e: React.KeyboardEvent<HTMLElement>) => {\n            // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n            // eslint-disable-next-line deprecation/deprecation\n            const { which } = e;\n\n            if (which === Keys.ESCAPE || which === Keys.TAB) {\n                // By default the escape key will not trigger a blur on the\n                // input element. It must be done explicitly.\n                if (this.input != null) {\n                    this.input.blur();\n                }\n                this.setState({ isOpen: false });\n            } else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n                this.setState({ isOpen: true });\n            }\n\n            const isTargetingTagRemoveButton = (e.target as HTMLElement).closest(`.${CoreClasses.TAG_REMOVE}`) != null;\n\n            if (this.state.isOpen && !isTargetingTagRemoveButton) {\n                handleQueryListKeyDown?.(e);\n            }\n        };\n    };\n\n    private getTagInputKeyUpHandler = (handleQueryListKeyUp: React.KeyboardEventHandler<HTMLElement>) => {\n        return (e: React.KeyboardEvent<HTMLElement>) => {\n            const isTargetingInput = (e.target as HTMLElement).classList.contains(Classes.MULTISELECT_TAG_INPUT_INPUT);\n\n            // only handle events when the focus is on the actual <input> inside the TagInput, as that's\n            // what QueryList is designed to do\n            if (this.state.isOpen && isTargetingInput) {\n                handleQueryListKeyUp?.(e);\n            }\n        };\n    };\n}\n"]},"metadata":{},"sourceType":"module"}