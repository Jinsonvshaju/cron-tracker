{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\"; // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport var PanelView2 = function (props) {\n  var handleClose = React.useCallback(function () {\n    return props.onClose(props.panel);\n  }, [props.onClose, props.panel]);\n  var maybeBackButton = props.previousPanel === undefined ? null : React.createElement(Button, {\n    \"aria-label\": \"Back\",\n    className: Classes.PANEL_STACK_HEADER_BACK,\n    icon: \"chevron-left\",\n    minimal: true,\n    onClick: handleClose,\n    small: true,\n    text: props.previousPanel.title,\n    title: props.previousPanel.htmlTitle\n  }); // `props.panel.renderPanel` is simply a function that returns a JSX.Element. It may be an FC which\n  // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n  // those hooks with their own lifecycle through a very simple wrapper component.\n\n  var PanelWrapper = React.useMemo(function () {\n    return function () {\n      // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n      // instantiated with a type unrelated to our generic constraint `T` here. We know\n      // we're sending the right values here though, and it makes the consumer API for this\n      // component type safe, so it's ok to do this...\n      return props.panel.renderPanel(__assign({\n        closePanel: handleClose,\n        openPanel: props.onOpen\n      }, props.panel.props));\n    };\n  }, [props.panel, props.onOpen]);\n  return React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_VIEW\n  }, props.showHeader && React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_HEADER\n  }, React.createElement(\"span\", null, maybeBackButton), React.createElement(Text, {\n    className: Classes.HEADING,\n    ellipsize: true,\n    title: props.panel.htmlTitle\n  }, props.panel.title), React.createElement(\"span\", null)), React.createElement(PanelWrapper, null));\n};\nPanelView2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelView2\");","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,EAAkBC,kBAAlB,QAA4C,cAA5C;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,IAAT,QAAqB,cAArB,C,CAiCA;;AACA,OAAO,IAAMC,UAAU,GAAwB,UAA0BC,KAA1B,EAAmD;AAC9F,MAAMC,WAAW,GAAGP,KAAK,CAACQ,WAAN,CAAkB;AAAM,gBAAK,CAACC,OAAN,CAAcH,KAAK,CAACI,KAApB;AAA0B,GAAlD,EAAoD,CAACJ,KAAK,CAACG,OAAP,EAAgBH,KAAK,CAACI,KAAtB,CAApD,CAApB;AAEA,MAAMC,eAAe,GACjBL,KAAK,CAACM,aAAN,KAAwBC,SAAxB,GAAoC,IAApC,GACIb,oBAACG,MAAD,EAAO;AAAA,kBACQ,MADR;AAEHW,aAAS,EAAEb,OAAO,CAACc,uBAFhB;AAGHC,QAAI,EAAC,cAHF;AAIHC,WAAO,EAAE,IAJN;AAKHC,WAAO,EAAEX,WALN;AAMHY,SAAK,EAAE,IANJ;AAOHC,QAAI,EAAEd,KAAK,CAACM,aAAN,CAAoBS,KAPvB;AAQHA,SAAK,EAAEf,KAAK,CAACM,aAAN,CAAoBU;AARxB,GAAP,CAFR,CAH8F,CAiB9F;AACA;AACA;;AACA,MAAMC,YAAY,GAAavB,KAAK,CAACwB,OAAN,CAC3B;AAAM;AACF;AACA;AACA;AACA;AACA,kBAAK,CAACd,KAAN,CAAYe,WAAZ,CAAwBC;AACpBC,kBAAU,EAAEpB,WADQ;AAEpBqB,iBAAS,EAAEtB,KAAK,CAACuB;AAFG,SAGjBvB,KAAK,CAACI,KAAN,CAAYJ,KAHK,CAAxB;AAImB,KATjB;AASiB,GAVI,EAW3B,CAACA,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACuB,MAApB,CAX2B,CAA/B;AAcA,SACI7B;AAAKc,aAAS,EAAEb,OAAO,CAAC6B;AAAxB,KACKxB,KAAK,CAACyB,UAAN,IACG/B;AAAKc,aAAS,EAAEb,OAAO,CAAC+B;AAAxB,KAEIhC,kCAAOW,eAAP,CAFJ,EAGIX,oBAACI,IAAD,EAAK;AAACU,aAAS,EAAEb,OAAO,CAACgC,OAApB;AAA6BC,aAAS,EAAE,IAAxC;AAA8Cb,SAAK,EAAEf,KAAK,CAACI,KAAN,CAAYY;AAAjE,GAAL,EACKhB,KAAK,CAACI,KAAN,CAAYW,KADjB,CAHJ,EAMIrB,iCANJ,CAFR,EAWIA,oBAACuB,YAAD,EAAa,IAAb,CAXJ,CADJ;AAeH,CAjDM;AAkDPlB,UAAU,CAAC8B,WAAX,GAAyB,UAAGjC,kBAAH,EAAqB,aAArB,CAAzB","names":["React","Classes","DISPLAYNAME_PREFIX","Button","Text","PanelView2","props","handleClose","useCallback","onClose","panel","maybeBackButton","previousPanel","undefined","className","PANEL_STACK_HEADER_BACK","icon","minimal","onClick","small","text","title","htmlTitle","PanelWrapper","useMemo","renderPanel","__assign","closePanel","openPanel","onOpen","PANEL_STACK2_VIEW","showHeader","PANEL_STACK2_HEADER","HEADING","ellipsize","displayName"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/panel-stack2/panelView2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\nimport { Panel, PanelProps } from \"./panelTypes\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelView2Props<T extends Panel<object>> {\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen: (addedPanel: T) => void;\n\n    /** The panel to be displayed. */\n    panel: T;\n\n    /** The previous panel in the stack, for rendering the \"back\" button. */\n    previousPanel?: T;\n\n    /** Whether to show the header with the \"back\" button. */\n    showHeader: boolean;\n}\n\ninterface PanelView2Component {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelView2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelView2: PanelView2Component = <T extends Panel<object>>(props: PanelView2Props<T>) => {\n    const handleClose = React.useCallback(() => props.onClose(props.panel), [props.onClose, props.panel]);\n\n    const maybeBackButton =\n        props.previousPanel === undefined ? null : (\n            <Button\n                aria-label=\"Back\"\n                className={Classes.PANEL_STACK_HEADER_BACK}\n                icon=\"chevron-left\"\n                minimal={true}\n                onClick={handleClose}\n                small={true}\n                text={props.previousPanel.title}\n                title={props.previousPanel.htmlTitle}\n            />\n        );\n\n    // `props.panel.renderPanel` is simply a function that returns a JSX.Element. It may be an FC which\n    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n    // those hooks with their own lifecycle through a very simple wrapper component.\n    const PanelWrapper: React.FC = React.useMemo(\n        () => () =>\n            // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n            // instantiated with a type unrelated to our generic constraint `T` here. We know\n            // we're sending the right values here though, and it makes the consumer API for this\n            // component type safe, so it's ok to do this...\n            props.panel.renderPanel({\n                closePanel: handleClose,\n                openPanel: props.onOpen,\n                ...props.panel.props,\n            } as PanelProps<T>),\n        [props.panel, props.onOpen],\n    );\n\n    return (\n        <div className={Classes.PANEL_STACK2_VIEW}>\n            {props.showHeader && (\n                <div className={Classes.PANEL_STACK2_HEADER}>\n                    {/* two <span> tags here ensure title is centered as long as possible, with `flex: 1` styling */}\n                    <span>{maybeBackButton}</span>\n                    <Text className={Classes.HEADING} ellipsize={true} title={props.panel.htmlTitle}>\n                        {props.panel.title}\n                    </Text>\n                    <span />\n                </div>\n            )}\n            <PanelWrapper />\n        </div>\n    );\n};\nPanelView2.displayName = `${DISPLAYNAME_PREFIX}.PanelView2`;\n"]},"metadata":{},"sourceType":"module"}