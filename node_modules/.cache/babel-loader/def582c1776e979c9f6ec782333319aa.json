{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Utils } from \"@blueprintjs/core\";\n/**\n * Utility function for executing the {@link IListItemsProps#itemsEqual} prop to test\n * for equality between two items.\n *\n * @return `true` if the two items are equivalent according to `itemsEqualProp`.\n */\n\nexport function executeItemsEqual(itemsEqualProp, itemA, itemB) {\n  // Use strict equality if:\n  // A) Default equality check is necessary because itemsEqualProp is undefined.\n  // OR\n  // B) Either item is null/undefined. Note that null represents \"no item\", while\n  //    undefined represents an uncontrolled prop. This strict equality check ensures\n  //    nothing will ever be considered equivalent to an uncontrolled prop.\n  if (itemsEqualProp === undefined || itemA == null || itemB == null) {\n    return itemA === itemB;\n  }\n\n  if (Utils.isFunction(itemsEqualProp)) {\n    // itemsEqualProp is an equality comparator function, so use it\n    return itemsEqualProp(itemA, itemB);\n  } else {\n    // itemsEqualProp is a property name, so strictly compare the values of the property.\n    return itemA[itemsEqualProp] === itemB[itemsEqualProp];\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAgBA,KAAhB,QAA6B,mBAA7B;AAmNA;;;;;;;AAMA,OAAM,SAAUC,iBAAV,CACFC,cADE,EAEFC,KAFE,EAGFC,KAHE,EAGyB;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAIF,cAAc,KAAKG,SAAnB,IAAgCF,KAAK,IAAI,IAAzC,IAAiDC,KAAK,IAAI,IAA9D,EAAoE;AAChE,WAAOD,KAAK,KAAKC,KAAjB;AACH;;AAED,MAAIJ,KAAK,CAACM,UAAN,CAAiBJ,cAAjB,CAAJ,EAAsC;AAClC;AACA,WAAOA,cAAc,CAACC,KAAD,EAAQC,KAAR,CAArB;AACH,GAHD,MAGO;AACH;AACA,WAAOD,KAAK,CAACD,cAAD,CAAL,KAA0BE,KAAK,CAACF,cAAD,CAAtC;AACH;AACJ","names":["Utils","executeItemsEqual","itemsEqualProp","itemA","itemB","undefined","isFunction"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/select/src/common/listItemsProps.ts"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Props, Utils } from \"@blueprintjs/core\";\n\nimport { ItemListRenderer } from \"./itemListRenderer\";\nimport { ItemRenderer } from \"./itemRenderer\";\nimport { ICreateNewItem } from \"./listItemsUtils\";\nimport { ItemListPredicate, ItemPredicate } from \"./predicate\";\n\n/**\n * Equality test comparator to determine if two {@link IListItemsProps} items are equivalent.\n *\n * @return `true` if the two items are equivalent.\n */\nexport type ItemsEqualComparator<T> = (itemA: T, itemB: T) => boolean;\n\n/**\n * Union of all possible types for {@link IListItemsProps#itemsEqual}.\n */\nexport type ItemsEqualProp<T> = ItemsEqualComparator<T> | keyof T;\n\n/** Reusable generic props for a component that operates on a filterable, selectable list of `items`. */\nexport interface IListItemsProps<T> extends Props {\n    /**\n     * The currently focused item for keyboard interactions, or `null` to\n     * indicate that no item is active. If omitted or `undefined`, this prop will be\n     * uncontrolled (managed by the component's state). Use `onActiveItemChange`\n     * to listen for updates.\n     */\n    activeItem?: T | ICreateNewItem | null;\n\n    /** Array of items in the list. */\n    items: T[];\n\n    /**\n     * Specifies how to test if two items are equal. By default, simple strict\n     * equality (`===`) is used to compare two items.\n     *\n     * If your items have a unique identifier field, simply provide the name of\n     * a property on the item that can be compared with strict equality to\n     * determine equivalence: `itemsEqual=\"id\"` will check `a.id === b.id`.\n     *\n     * If more complex comparison logic is required, provide an equality\n     * comparator function that returns `true` if the two items are equal. The\n     * arguments to this function will never be `null` or `undefined`, as those\n     * values are handled before calling the function.\n     */\n    itemsEqual?: ItemsEqualProp<T>;\n\n    /**\n     * Determine if the given item is disabled. Provide a callback function, or\n     * simply provide the name of a boolean property on the item that exposes\n     * its disabled state.\n     */\n    itemDisabled?: keyof T | ((item: T, index: number) => boolean);\n\n    /**\n     * Customize querying of entire `items` array. Return new list of items.\n     * This method can reorder, add, or remove items at will.\n     * (Supports filter algorithms that operate on the entire set, rather than individual items.)\n     *\n     * If `itemPredicate` is also defined, this prop takes priority and the other will be ignored.\n     */\n    itemListPredicate?: ItemListPredicate<T>;\n\n    /**\n     * Customize querying of individual items.\n     *\n     * __Filtering a list of items.__ This function is invoked to filter the\n     * list of items as a query is typed. Return `true` to keep the item, or\n     * `false` to hide. This method is invoked once for each item, so it should\n     * be performant. For more complex queries, use `itemListPredicate` to\n     * operate once on the entire array. For the purposes of filtering the list,\n     * this prop is ignored if `itemListPredicate` is also defined.\n     *\n     * __Matching a pasted value to an item.__ This function is also invoked to\n     * match a pasted value to an existing item if possible. In this case, the\n     * function will receive `exactMatch=true`, and the function should return\n     * true only if the item _exactly_ matches the query. For the purposes of\n     * matching pasted values, this prop will be invoked even if\n     * `itemListPredicate` is defined.\n     */\n    itemPredicate?: ItemPredicate<T>;\n\n    /**\n     * Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\n     * this item is active (selected by keyboard arrows) and an `onClick` event handler that\n     * should be attached to the returned element.\n     */\n    itemRenderer: ItemRenderer<T>;\n\n    /**\n     * Custom renderer for the contents of the dropdown.\n     *\n     * The default implementation invokes `itemRenderer` for each item that passes the predicate\n     * and wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\n     * and if there are no items that match the predicate then `noResults` is returned.\n     */\n    itemListRenderer?: ItemListRenderer<T>;\n\n    /**\n     * React content to render when query is empty.\n     * If omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\n     * If explicit `null`, nothing will be rendered when query is empty.\n     *\n     * This prop is ignored if a custom `itemListRenderer` is supplied.\n     */\n    initialContent?: React.ReactNode | null;\n\n    /**\n     * React content to render when filtering items returns zero results.\n     * If omitted, nothing will be rendered in this case.\n     *\n     * This prop is ignored if a custom `itemListRenderer` is supplied.\n     */\n    noResults?: React.ReactNode;\n\n    /**\n     * Invoked when user interaction should change the active item: arrow keys\n     * move it up/down in the list, selecting an item makes it active, and\n     * changing the query may reset it to the first item in the list if it no\n     * longer matches the filter.\n     *\n     * If the \"Create Item\" option is displayed and currently active, then\n     * `isCreateNewItem` will be `true` and `activeItem` will be `null`. In this\n     * case, you should provide a valid `ICreateNewItem` object to the\n     * `activeItem` _prop_ in order for the \"Create Item\" option to appear as\n     * active.\n     *\n     * __Note:__ You can instantiate a `ICreateNewItem` object using the\n     * `getCreateNewItem()` utility exported from this package.\n     */\n    onActiveItemChange?: (activeItem: T | null, isCreateNewItem: boolean) => void;\n\n    /**\n     * Callback invoked when an item from the list is selected,\n     * typically by clicking or pressing `enter` key.\n     */\n    onItemSelect: (item: T, event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Callback invoked when multiple items are selected at once via pasting.\n     */\n    onItemsPaste?: (items: T[]) => void;\n\n    /**\n     * Callback invoked when the query string changes.\n     */\n    onQueryChange?: (query: string, event?: React.ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * If provided, allows new items to be created using the current query\n     * string. This is invoked when user interaction causes a new item to be\n     * created, either by pressing the `Enter` key or by clicking on the \"Create\n     * Item\" option. It transforms a query string into an item type.\n     */\n    createNewItemFromQuery?: (query: string) => T;\n\n    /**\n     * Custom renderer to transform the current query string into a selectable\n     * \"Create Item\" option. If this function is provided, a \"Create Item\"\n     * option will be rendered at the end of the list of items. If this function\n     * is not provided, a \"Create Item\" option will not be displayed.\n     */\n    createNewItemRenderer?: (\n        query: string,\n        active: boolean,\n        handleClick: React.MouseEventHandler<HTMLElement>,\n    ) => JSX.Element | undefined;\n\n    /**\n     * Determines the position of the `createNewItem` within the list: first or\n     * last. Only relevant when `createNewItemRenderer` is defined.\n     *\n     * @default 'last'\n     */\n    createNewItemPosition?: \"first\" | \"last\";\n\n    /**\n     * Whether the active item should be reset to the first matching item _every\n     * time the query changes_ (via prop or by user input).\n     *\n     * @default true\n     */\n    resetOnQuery?: boolean;\n\n    /**\n     * Whether the active item should be reset to the first matching item _when\n     * an item is selected_. The query will also be reset to the empty string.\n     *\n     * @default false\n     */\n    resetOnSelect?: boolean;\n\n    /**\n     * When `activeItem` is controlled, whether the active item should _always_\n     * be scrolled into view when the prop changes. If `false`, only changes\n     * that result from built-in interactions (clicking, querying, or using\n     * arrow keys) will scroll the active item into view. Ignored if the\n     * `activeItem` prop is omitted (uncontrolled behavior).\n     *\n     * @default true\n     */\n    scrollToActiveItem?: boolean;\n\n    /**\n     * Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\n     * This value is controlled: its state must be managed externally by attaching an `onChange`\n     * handler to the relevant element in your `renderer` implementation.\n     */\n    query?: string;\n}\n\n/**\n * Utility function for executing the {@link IListItemsProps#itemsEqual} prop to test\n * for equality between two items.\n *\n * @return `true` if the two items are equivalent according to `itemsEqualProp`.\n */\nexport function executeItemsEqual<T>(\n    itemsEqualProp: ItemsEqualProp<T> | undefined,\n    itemA: T | null | undefined,\n    itemB: T | null | undefined,\n): boolean {\n    // Use strict equality if:\n    // A) Default equality check is necessary because itemsEqualProp is undefined.\n    // OR\n    // B) Either item is null/undefined. Note that null represents \"no item\", while\n    //    undefined represents an uncontrolled prop. This strict equality check ensures\n    //    nothing will ever be considered equivalent to an uncontrolled prop.\n    if (itemsEqualProp === undefined || itemA == null || itemB == null) {\n        return itemA === itemB;\n    }\n\n    if (Utils.isFunction(itemsEqualProp)) {\n        // itemsEqualProp is an equality comparator function, so use it\n        return itemsEqualProp(itemA, itemB);\n    } else {\n        // itemsEqualProp is a property name, so strictly compare the values of the property.\n        return itemA[itemsEqualProp] === itemB[itemsEqualProp];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}