{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, InputGroup, Overlay } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Omnibar =\n/** @class */\nfunction (_super) {\n  __extends(Omnibar, _super);\n\n  function Omnibar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.TypedQueryList = QueryList.ofType();\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          _b = _a.inputProps,\n          inputProps = _b === void 0 ? {} : _b,\n          isOpen = _a.isOpen,\n          _c = _a.overlayProps,\n          overlayProps = _c === void 0 ? {} : _c;\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      var handlers = isOpen ? {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      } : {};\n      return React.createElement(Overlay, __assign({\n        hasBackdrop: true\n      }, overlayProps, {\n        isOpen: isOpen,\n        className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className),\n        onClose: _this.handleOverlayClose\n      }), React.createElement(\"div\", __assign({\n        className: classNames(Classes.OMNIBAR, listProps.className)\n      }, handlers), React.createElement(InputGroup, __assign({\n        autoFocus: true,\n        large: true,\n        leftIcon: \"search\",\n        placeholder: \"Search...\"\n      }, inputProps, {\n        onChange: listProps.handleQueryChange,\n        value: listProps.query\n      })), listProps.itemList));\n    };\n\n    _this.handleOverlayClose = function (event) {\n      var _a, _b, _c, _d;\n\n      (_b = (_a = _this.props.overlayProps) === null || _a === void 0 ? void 0 : _a.onClose) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n      (_d = (_c = _this.props).onClose) === null || _d === void 0 ? void 0 : _d.call(_c, event);\n    };\n\n    return _this;\n  }\n\n  Omnibar.ofType = function () {\n    return Omnibar;\n  };\n\n  Omnibar.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        isOpen = _a.isOpen,\n        inputProps = _a.inputProps,\n        overlayProps = _a.overlayProps,\n        restProps = __rest(_a, [\"isOpen\", \"inputProps\", \"overlayProps\"]);\n\n    var initialContent = \"initialContent\" in this.props ? this.props.initialContent : null;\n    return React.createElement(this.TypedQueryList, __assign({}, restProps, {\n      initialContent: initialContent,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Omnibar.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Omnibar\");\n  return Omnibar;\n}(React.PureComponent);\n\nexport { Omnibar };","map":{"version":3,"mappings":"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","names":["classNames","React","DISPLAYNAME_PREFIX","InputGroup","Overlay","Classes","QueryList","__extends","_this","ofType","listProps","props","_b","inputProps","isOpen","_c","overlayProps","handleKeyUp","handlers","onKeyDown","handleKeyDown","onKeyUp","__assign","hasBackdrop","className","OMNIBAR_OVERLAY","onClose","handleOverlayClose","OMNIBAR","autoFocus","large","leftIcon","placeholder","onChange","handleQueryChange","value","query","itemList","event","_a","_d","Omnibar","restProps","initialContent","TypedQueryList","renderer","renderQueryList","PureComponent"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/select/src/components/omnibar/omnibar.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { DISPLAYNAME_PREFIX, InputGroupProps2, InputGroup, OverlayProps, Overlay } from \"@blueprintjs/core\";\n\nimport { Classes, IListItemsProps } from \"../../common\";\nimport { IQueryListRendererProps, QueryList } from \"../query-list/queryList\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OmnibarProps<T> = IOmnibarProps<T>;\n/** @deprecated use OmnibarProps */\nexport interface IOmnibarProps<T> extends IListItemsProps<T> {\n    /**\n     * Props to spread to the query `InputGroup`. Use `query` and\n     * `onQueryChange` instead of `inputProps.value` and `inputProps.onChange`\n     * to control this input.\n     */\n    inputProps?: InputGroupProps2;\n\n    /**\n     * Toggles the visibility of the omnibar.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * A callback that is invoked when user interaction causes the omnibar to\n     * close, such as clicking on the overlay or pressing the `esc` key (if\n     * enabled). Receives the event from the user's interaction, if there was an\n     * event (generally either a mouse or key event).\n     *\n     * Note that due to controlled usage, this component will not actually close\n     * itself until the `isOpen` prop becomes `false`.\n     * .\n     */\n    onClose?: (event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /** Props to spread to `Overlay`. */\n    overlayProps?: Partial<OverlayProps>;\n}\n\nexport class Omnibar<T> extends React.PureComponent<OmnibarProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Omnibar`;\n\n    public static ofType<U>() {\n        return Omnibar as new (props: OmnibarProps<U>) => Omnibar<U>;\n    }\n\n    private TypedQueryList = QueryList.ofType<T>();\n\n    public render() {\n        // omit props specific to this component, spread the rest.\n        const { isOpen, inputProps, overlayProps, ...restProps } = this.props;\n        const initialContent = \"initialContent\" in this.props ? this.props.initialContent : null;\n\n        return <this.TypedQueryList {...restProps} initialContent={initialContent} renderer={this.renderQueryList} />;\n    }\n\n    private renderQueryList = (listProps: IQueryListRendererProps<T>) => {\n        const { inputProps = {}, isOpen, overlayProps = {} } = this.props;\n        const { handleKeyDown, handleKeyUp } = listProps;\n        const handlers = isOpen ? { onKeyDown: handleKeyDown, onKeyUp: handleKeyUp } : {};\n\n        return (\n            <Overlay\n                hasBackdrop={true}\n                {...overlayProps}\n                isOpen={isOpen}\n                className={classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className)}\n                onClose={this.handleOverlayClose}\n            >\n                <div className={classNames(Classes.OMNIBAR, listProps.className)} {...handlers}>\n                    <InputGroup\n                        autoFocus={true}\n                        large={true}\n                        leftIcon=\"search\"\n                        placeholder=\"Search...\"\n                        {...inputProps}\n                        onChange={listProps.handleQueryChange}\n                        value={listProps.query}\n                    />\n                    {listProps.itemList}\n                </div>\n            </Overlay>\n        );\n    };\n\n    private handleOverlayClose = (event: React.SyntheticEvent<HTMLElement>) => {\n        this.props.overlayProps?.onClose?.(event);\n        this.props.onClose?.(event);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}