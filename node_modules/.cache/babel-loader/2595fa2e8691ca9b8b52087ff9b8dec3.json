{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nexport var DISPLAYNAME_PREFIX = \"Blueprint4\";\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\n\nvar INVALID_PROPS = [\"active\", \"alignText\", \"asyncControl\", \"containerRef\", \"current\", \"elementRef\", \"fill\", \"icon\", \"inputRef\", \"intent\", \"inline\", \"large\", \"loading\", \"leftElement\", \"leftIcon\", \"minimal\", \"onRemove\", \"outlined\", \"panel\", \"panelClassName\", \"popoverProps\", \"rightElement\", \"rightIcon\", \"round\", \"small\", \"text\"];\n/**\n * Typically applied to HTMLElements to filter out disallowed props. When applied to a Component,\n * can filter props from being passed down to the children. Can also filter by a combined list of\n * supplied prop keys and the denylist (only appropriate for HTMLElements).\n *\n * @param props The original props object to filter down.\n * @param {string[]} invalidProps If supplied, overwrites the default denylist.\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and denylist together.\n */\n\nexport function removeNonHTMLProps(props, invalidProps, shouldMerge) {\n  if (invalidProps === void 0) {\n    invalidProps = INVALID_PROPS;\n  }\n\n  if (shouldMerge === void 0) {\n    shouldMerge = false;\n  }\n\n  if (shouldMerge) {\n    invalidProps = invalidProps.concat(INVALID_PROPS);\n  }\n\n  return invalidProps.reduce(function (prev, curr) {\n    // Props with hyphens (e.g. data-*) are always considered html props\n    if (curr.indexOf(\"-\") !== -1) {\n      return prev;\n    }\n\n    if (prev.hasOwnProperty(curr)) {\n      delete prev[curr];\n    }\n\n    return prev;\n  }, __assign({}, props));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMA,kBAAkB,GAAG,YAA3B;AAkIP;;AACA,IAAMC,aAAa,GAAG,CAClB,QADkB,EAElB,WAFkB,EAGlB,cAHkB,EAIlB,cAJkB,EAKlB,SALkB,EAMlB,YANkB,EAOlB,MAPkB,EAQlB,MARkB,EASlB,UATkB,EAUlB,QAVkB,EAWlB,QAXkB,EAYlB,OAZkB,EAalB,SAbkB,EAclB,aAdkB,EAelB,UAfkB,EAgBlB,SAhBkB,EAiBlB,UAjBkB,EAkBlB,UAlBkB,EAmBlB,OAnBkB,EAoBlB,gBApBkB,EAqBlB,cArBkB,EAsBlB,cAtBkB,EAuBlB,WAvBkB,EAwBlB,OAxBkB,EAyBlB,OAzBkB,EA0BlB,MA1BkB,CAAtB;AA6BA;;;;;;;;;;AASA,OAAM,SAAUC,kBAAV,CACFC,KADE,EAEFC,YAFE,EAGFC,WAHE,EAGiB;AADnB;AAAAD;AAA4B;;AAC5B;AAAAC;AAAmB;;AAEnB,MAAIA,WAAJ,EAAiB;AACbD,gBAAY,GAAGA,YAAY,CAACE,MAAb,CAAoBL,aAApB,CAAf;AACH;;AAED,SAAOG,YAAY,CAACG,MAAb,CACH,UAACC,IAAD,EAAOC,IAAP,EAAW;AACP;AACA,QAAIA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC1B,aAAOF,IAAP;AACH;;AAED,QAAIA,IAAI,CAACG,cAAL,CAAoBF,IAApB,CAAJ,EAA+B;AAC3B,aAAQD,IAAY,CAACC,IAAD,CAApB;AACH;;AACD,WAAOD,IAAP;AACH,GAXE,EAWFI,aACIT,KADJ,CAXE,CAAP;AAcH","names":["DISPLAYNAME_PREFIX","INVALID_PROPS","removeNonHTMLProps","props","invalidProps","shouldMerge","concat","reduce","prev","curr","indexOf","hasOwnProperty","__assign"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/common/props.ts"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport type { IconName } from \"@blueprintjs/icons\";\n\nimport { Intent } from \"./intent\";\nimport { IRef } from \"./refs\";\n\nexport const DISPLAYNAME_PREFIX = \"Blueprint4\";\n\n/**\n * Alias for all valid HTML props for `<div>` element.\n * Does not include React's `ref` or `key`.\n */\nexport type HTMLDivProps = React.HTMLAttributes<HTMLDivElement>;\n\n/**\n * Alias for all valid HTML props for `<input>` element.\n * Does not include React's `ref` or `key`.\n */\nexport type HTMLInputProps = React.InputHTMLAttributes<HTMLInputElement>;\n\n/**\n * Alias for a `JSX.Element` or a value that renders nothing.\n *\n * In React, `boolean`, `null`, and `undefined` do not produce any output.\n */\nexport type MaybeElement = JSX.Element | false | null | undefined;\n\n/**\n * A shared base interface for all Blueprint component props.\n *\n * @deprecated use Props\n */\nexport interface IProps {\n    /** A space-delimited list of class names to pass along to a child element. */\n    className?: string;\n}\n// eslint-disable-next-line deprecation/deprecation\nexport type Props = IProps;\n\n/** @deprecated use IntentProps */\nexport interface IIntentProps {\n    /** Visual intent color to apply to element. */\n    intent?: Intent;\n}\n// eslint-disable-next-line deprecation/deprecation\nexport type IntentProps = IIntentProps;\n\n/**\n * Interface for a clickable action, such as a button or menu item.\n * These props can be spready directly to a `<Button>` or `<MenuItem>` element.\n *\n * @deprecated use ActionProps\n */\nexport interface IActionProps extends IntentProps, Props {\n    /** Whether this action is non-interactive. */\n    disabled?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render before the text. */\n    icon?: IconName | MaybeElement;\n\n    /** Click event handler. */\n    onClick?: (event: React.MouseEvent<HTMLElement>) => void;\n\n    /** Action text. Can be any single React renderable. */\n    text?: React.ReactNode;\n}\n// eslint-disable-next-line deprecation/deprecation\nexport type ActionProps = IActionProps;\n\n/**\n * Interface for a link, with support for customizing target window.\n *\n * @deprecated use LinkProps\n */\nexport interface ILinkProps {\n    /** Link URL. */\n    href?: string;\n\n    /** Link target attribute. Use `\"_blank\"` to open in a new window. */\n    target?: string;\n}\n// eslint-disable-next-line deprecation/deprecation\nexport type LinkProps = ILinkProps;\n\n/**\n * Interface for a controlled input.\n *\n * @deprecated use IControlledProps2.\n */\nexport interface IControlledProps {\n    /** Initial value of the input, for uncontrolled usage. */\n    defaultValue?: string;\n\n    /** Change event handler. Use `event.target.value` for new value. */\n    onChange?: React.FormEventHandler<HTMLElement>;\n\n    /** Form value of the input, for controlled usage. */\n    value?: string;\n}\n\nexport interface IControlledProps2 {\n    /** Initial value of the input, for uncontrolled usage. */\n    defaultValue?: string;\n\n    /** Form value of the input, for controlled usage. */\n    value?: string;\n}\nexport type ControlledProps2 = IControlledProps2;\n\n/**\n * @deprecated will be removed in Blueprint v5.0, where components will use `ref` prop instead\n */\nexport interface IElementRefProps<E extends HTMLElement> {\n    /** A ref handler or a ref object that receives the native HTML element rendered by this component. */\n    elementRef?: IRef<E>;\n}\n\n/**\n * An interface for an option in a list, such as in a `<select>` or `RadioGroup`.\n * These props can be spread directly to an `<option>` or `<Radio>` element.\n *\n * @deprecated use OptionProps\n */\nexport interface IOptionProps extends Props {\n    /** Whether this option is non-interactive. */\n    disabled?: boolean;\n\n    /** Label text for this option. If omitted, `value` is used as the label. */\n    label?: string;\n\n    /** Value of this option. */\n    value: string | number;\n}\n// eslint-disable-next-line deprecation/deprecation\nexport type OptionProps = IOptionProps;\n\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\nconst INVALID_PROPS = [\n    \"active\",\n    \"alignText\",\n    \"asyncControl\", // IInputGroupProps2\n    \"containerRef\",\n    \"current\",\n    \"elementRef\",\n    \"fill\",\n    \"icon\",\n    \"inputRef\",\n    \"intent\",\n    \"inline\",\n    \"large\",\n    \"loading\",\n    \"leftElement\",\n    \"leftIcon\",\n    \"minimal\",\n    \"onRemove\", // ITagProps, ITagInputProps\n    \"outlined\", // IButtonProps\n    \"panel\", // ITabProps\n    \"panelClassName\", // ITabProps\n    \"popoverProps\",\n    \"rightElement\",\n    \"rightIcon\",\n    \"round\",\n    \"small\",\n    \"text\",\n];\n\n/**\n * Typically applied to HTMLElements to filter out disallowed props. When applied to a Component,\n * can filter props from being passed down to the children. Can also filter by a combined list of\n * supplied prop keys and the denylist (only appropriate for HTMLElements).\n *\n * @param props The original props object to filter down.\n * @param {string[]} invalidProps If supplied, overwrites the default denylist.\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and denylist together.\n */\nexport function removeNonHTMLProps(\n    props: { [key: string]: any },\n    invalidProps = INVALID_PROPS,\n    shouldMerge = false,\n): { [key: string]: any } {\n    if (shouldMerge) {\n        invalidProps = invalidProps.concat(INVALID_PROPS);\n    }\n\n    return invalidProps.reduce(\n        (prev, curr) => {\n            // Props with hyphens (e.g. data-*) are always considered html props\n            if (curr.indexOf(\"-\") !== -1) {\n                return prev;\n            }\n\n            if (prev.hasOwnProperty(curr)) {\n                delete (prev as any)[curr];\n            }\n            return prev;\n        },\n        { ...props },\n    );\n}\n"]},"metadata":{},"sourceType":"module"}