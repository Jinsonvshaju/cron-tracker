{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Utils } from \"../../common\";\nimport { isReactNodeEmpty } from \"../../common/utils\";\nimport { Icon, IconSize } from \"../icon/icon\";\nimport { Text } from \"../text/text\";\n\nvar Tag =\n/** @class */\nfunction (_super) {\n  __extends(Tag, _super);\n\n  function Tag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onRemoveClick = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onRemove) === null || _b === void 0 ? void 0 : _b.call(_a, e, _this.props);\n    };\n\n    return _this;\n  }\n\n  Tag.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        active = _b.active,\n        children = _b.children,\n        className = _b.className,\n        fill = _b.fill,\n        icon = _b.icon,\n        intent = _b.intent,\n        interactive = _b.interactive,\n        large = _b.large,\n        minimal = _b.minimal,\n        multiline = _b.multiline,\n        onRemove = _b.onRemove,\n        rightIcon = _b.rightIcon,\n        round = _b.round,\n        _c = _b.tabIndex,\n        tabIndex = _c === void 0 ? 0 : _c,\n        htmlTitle = _b.htmlTitle,\n        elementRef = _b.elementRef,\n        htmlProps = __rest(_b, [\"active\", \"children\", \"className\", \"fill\", \"icon\", \"intent\", \"interactive\", \"large\", \"minimal\", \"multiline\", \"onRemove\", \"rightIcon\", \"round\", \"tabIndex\", \"htmlTitle\", \"elementRef\"]);\n\n    var isRemovable = Utils.isFunction(onRemove);\n    var tagClasses = classNames(Classes.TAG, Classes.intentClass(intent), (_a = {}, _a[Classes.ACTIVE] = active, _a[Classes.FILL] = fill, _a[Classes.INTERACTIVE] = interactive, _a[Classes.LARGE] = large, _a[Classes.MINIMAL] = minimal, _a[Classes.ROUND] = round, _a), className);\n    var isLarge = large || tagClasses.indexOf(Classes.LARGE) >= 0;\n    var removeButton = isRemovable ? React.createElement(\"button\", {\n      \"aria-label\": \"Remove\",\n      type: \"button\",\n      className: Classes.TAG_REMOVE,\n      onClick: this.onRemoveClick,\n      tabIndex: interactive ? tabIndex : undefined\n    }, React.createElement(Icon, {\n      icon: \"small-cross\",\n      size: isLarge ? IconSize.LARGE : IconSize.STANDARD\n    })) : null;\n    return React.createElement(\"span\", __assign({}, htmlProps, {\n      className: tagClasses,\n      tabIndex: interactive ? tabIndex : undefined,\n      ref: elementRef\n    }), React.createElement(Icon, {\n      icon: icon\n    }), !isReactNodeEmpty(children) && React.createElement(Text, {\n      className: Classes.FILL,\n      ellipsize: !multiline,\n      tagName: \"span\",\n      title: htmlTitle\n    }, children), React.createElement(Icon, {\n      icon: rightIcon\n    }), removeButton);\n  };\n\n  Tag.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Tag\");\n  return Tag;\n}(AbstractPureComponent2);\n\nexport { Tag };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","Utils","isReactNodeEmpty","Icon","IconSize","Text","__extends","_this","e","props","onRemove","_b","Tag","active","children","className","fill","icon","intent","interactive","large","minimal","multiline","rightIcon","round","_c","tabIndex","htmlTitle","elementRef","htmlProps","isRemovable","isFunction","tagClasses","TAG","intentClass","_a","ACTIVE","FILL","INTERACTIVE","LARGE","MINIMAL","ROUND","isLarge","indexOf","removeButton","type","TAG_REMOVE","onClick","onRemoveClick","undefined","size","STANDARD","ref","ellipsize","tagName","title"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/tag/tag.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    IElementRefProps,\n    IntentProps,\n    Props,\n    MaybeElement,\n    Utils,\n} from \"../../common\";\nimport { isReactNodeEmpty } from \"../../common/utils\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { Text } from \"../text/text\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TagProps = ITagProps;\n/** @deprecated use TagProps */\nexport interface ITagProps\n    extends Props,\n        IntentProps,\n        // eslint-disable-next-line deprecation/deprecation\n        IElementRefProps<HTMLSpanElement>,\n        React.HTMLAttributes<HTMLSpanElement> {\n    /**\n     * Whether the tag should appear in an active state.\n     *\n     * @default false\n     */\n    active?: boolean;\n\n    children?: React.ReactNode;\n\n    /**\n     * Whether the tag should take up the full width of its container.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render before the children. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether the tag should visually respond to user interactions. If set\n     * to `true`, hovering over the tag will change its color and mouse cursor.\n     *\n     * Recommended when `onClick` is also defined.\n     *\n     * @default false\n     */\n    interactive?: boolean;\n\n    /**\n     * Whether this tag should use large styles.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Whether this tag should use minimal styles.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n\n    /**\n     * Whether tag content should be allowed to occupy multiple lines.\n     * If false, a single line of text will be truncated with an ellipsis if\n     * it overflows. Note that icons will be vertically centered relative to\n     * multiline text.\n     *\n     * @default false\n     */\n    multiline?: boolean;\n\n    /**\n     * Callback invoked when the tag is clicked.\n     * Recommended when `interactive` is `true`.\n     */\n    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n\n    /**\n     * Click handler for remove button.\n     * The remove button will only be rendered if this prop is defined.\n     */\n    onRemove?: (e: React.MouseEvent<HTMLButtonElement>, tagProps: TagProps) => void;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render after the children. */\n    rightIcon?: IconName | MaybeElement;\n\n    /**\n     * Whether this tag should have rounded ends.\n     *\n     * @default false\n     */\n    round?: boolean;\n\n    /**\n     * HTML title to be passed to the <Text> component\n     */\n    htmlTitle?: string;\n}\n\nexport class Tag extends AbstractPureComponent2<TagProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tag`;\n\n    public render() {\n        const {\n            active,\n            children,\n            className,\n            fill,\n            icon,\n            intent,\n            interactive,\n            large,\n            minimal,\n            multiline,\n            onRemove,\n            rightIcon,\n            round,\n            tabIndex = 0,\n            htmlTitle,\n            elementRef,\n            ...htmlProps\n        } = this.props;\n        const isRemovable = Utils.isFunction(onRemove);\n        const tagClasses = classNames(\n            Classes.TAG,\n            Classes.intentClass(intent),\n            {\n                [Classes.ACTIVE]: active,\n                [Classes.FILL]: fill,\n                [Classes.INTERACTIVE]: interactive,\n                [Classes.LARGE]: large,\n                [Classes.MINIMAL]: minimal,\n                [Classes.ROUND]: round,\n            },\n            className,\n        );\n        const isLarge = large || tagClasses.indexOf(Classes.LARGE) >= 0;\n        const removeButton = isRemovable ? (\n            <button\n                aria-label=\"Remove\"\n                type=\"button\"\n                className={Classes.TAG_REMOVE}\n                onClick={this.onRemoveClick}\n                tabIndex={interactive ? tabIndex : undefined}\n            >\n                <Icon icon=\"small-cross\" size={isLarge ? IconSize.LARGE : IconSize.STANDARD} />\n            </button>\n        ) : null;\n\n        return (\n            <span {...htmlProps} className={tagClasses} tabIndex={interactive ? tabIndex : undefined} ref={elementRef}>\n                <Icon icon={icon} />\n                {!isReactNodeEmpty(children) && (\n                    <Text className={Classes.FILL} ellipsize={!multiline} tagName=\"span\" title={htmlTitle}>\n                        {children}\n                    </Text>\n                )}\n                <Icon icon={rightIcon} />\n                {removeButton}\n            </span>\n        );\n    }\n\n    private onRemoveClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        this.props.onRemove?.(e, this.props);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}