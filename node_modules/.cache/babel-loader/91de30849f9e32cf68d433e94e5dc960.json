{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {\n    popup,\n    setPopup\n  };\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    console.log(dateTime);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    setTimeMap(timeMap.clear());\n    setEvents([]);\n  };\n\n  const populateStartTimeMap = (element, startTimeMap) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes\n    } = element;\n    triggerTimes.forEach(element => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(getEventKey(element), existingList.concat(newList));\n      } else {\n        const list = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n    return startTimeMap;\n  };\n\n  const handleEventClick = _ref => {\n    let {\n      event\n    } = _ref;\n    console.log(getEndTime(\"2022-04-27T24:30:00\"));\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach(element => {\n      const message = element.name + \" \" + element.clientName + \" (\" + element.env + \") \" + element.exchange + \" \" + element.timeZone + \" \" + element.cron + \" (\" + element.cronInfo + \") \";\n      messages.push(message);\n    });\n    setDisplayMap({\n      \"key\": key,\n      \"values\": messages\n    });\n    setPopup(true);\n  };\n\n  const setNewEvents = cronDetails => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach(element => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      newEvents.push({\n        title: \"Event \" + newEvents.length,\n        start: key,\n        end: getEndTime(key)\n      });\n    });\n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReloadClick = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        setCronDetails(res.data.message);\n        setNewEvents(res.data.message);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(POPup, {\n        elementsMap: displayMap,\n        stateValue: stateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridDay\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        customButtons: {\n          reload: {\n            text: \"Reload\",\n            click: function () {\n              handleReloadClick();\n            }\n          }\n        },\n        headerToolbar: {\n          left: \"reload,prev,next\",\n          center: 'title',\n          right: \"today,timeGridDay,timeGridWeek\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:05:00\",\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"OAYwQyoxHccoKcb/P8WvGkDeEcg=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","API","moment","POPup","api","Home","props","cronDetails","setCronDetails","timeMap","setTimeMap","Map","events","setEvents","displayMap","setDisplayMap","popup","setPopup","stateValue","getEventKey","time","local","format","getEndTime","dateTime","Date","console","log","setSeconds","getSeconds","clearEvents","clear","populateStartTimeMap","element","startTimeMap","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","forEach","has","newList","existingList","get","set","concat","list","handleEventClick","event","key","start","messages","Object","values","message","push","setNewEvents","newEvents","value","title","length","end","handleReloadClick","Promise","resolve","getTriggerTimes","then","res","data","catch","err","reload","text","click","left","center","right"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\n\nlet api = new API();\n\nfunction Home(props) {\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {popup,setPopup};\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    console.log(dateTime);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    setTimeMap(timeMap.clear());\n    setEvents([]);\n    \n  };\n\n  const populateStartTimeMap = (element, startTimeMap) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes,\n    } = element;\n    triggerTimes.forEach((element) => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(getEventKey(element), existingList.concat(newList));\n      } else {\n        const list = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n    return startTimeMap;\n  };\n\n  const handleEventClick = ({ event }) => {\n    console.log(getEndTime(\"2022-04-27T24:30:00\"));\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach((element) => {\n      const message =\n        element.name +\n        \" \" +\n        element.clientName +\n        \" (\" +\n        element.env +\n        \") \" +\n        element.exchange +\n        \" \" +\n        element.timeZone +\n        \" \" +\n        element.cron +\n        \" (\" +\n        element.cronInfo +\n        \") \";\n      messages.push(message);\n    });\n    setDisplayMap({\"key\":key,\"values\":messages});\n    setPopup(true);\n  };\n\n  const setNewEvents = (cronDetails) => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach((element) => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      newEvents.push({\n        title: \"Event \" + newEvents.length,\n        start: key,\n        end: getEndTime(key),\n      });\n    });\n    \n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReloadClick = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          setCronDetails(res.data.message);\n          setNewEvents(res.data.message);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n      <POPup elementsMap={displayMap} stateValue={stateValue}></POPup>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridDay\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          customButtons={{\n            reload: {\n              text: \"Reload\",\n              click: function () {\n                handleReloadClick();\n              },\n            },\n          }}\n          headerToolbar={{\n            left: \"reload,prev,next\",\n            center: 'title',\n            right: \"today,timeGridDay,timeGridWeek\",\n          }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:05:00\"\n          events={events}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}