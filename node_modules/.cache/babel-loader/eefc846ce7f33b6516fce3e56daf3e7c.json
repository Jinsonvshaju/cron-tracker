{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Radio } from \"./controls\";\nvar counter = 0;\n\nfunction nextName() {\n  return \"\".concat(RadioGroup.displayName, \"-\").concat(counter++);\n}\n\nvar RadioGroup =\n/** @class */\nfunction (_super) {\n  __extends(RadioGroup, _super);\n\n  function RadioGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // a unique name for this group, which can be overridden by `name` prop.\n\n\n    _this.autoGroupName = nextName();\n    return _this;\n  }\n\n  RadioGroup.prototype.render = function () {\n    var label = this.props.label;\n    return React.createElement(\"div\", {\n      className: this.props.className\n    }, label == null ? null : React.createElement(\"label\", {\n      className: Classes.LABEL\n    }, label), Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren());\n  };\n\n  RadioGroup.prototype.validateProps = function () {\n    if (this.props.children != null && this.props.options != null) {\n      console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n    }\n  };\n\n  RadioGroup.prototype.renderChildren = function () {\n    var _this = this;\n\n    return React.Children.map(this.props.children, function (child) {\n      if (isElementOfType(child, Radio)) {\n        return React.cloneElement(child, _this.getRadioProps(child.props));\n      } else {\n        return child;\n      }\n    });\n  };\n\n  RadioGroup.prototype.renderOptions = function () {\n    var _this = this;\n\n    var _a;\n\n    return (_a = this.props.options) === null || _a === void 0 ? void 0 : _a.map(function (option) {\n      return React.createElement(Radio, __assign({}, _this.getRadioProps(option), {\n        key: option.value,\n        labelElement: option.label || option.value\n      }));\n    });\n  };\n\n  RadioGroup.prototype.getRadioProps = function (optionProps) {\n    var name = this.props.name;\n    var className = optionProps.className,\n        disabled = optionProps.disabled,\n        value = optionProps.value;\n    return {\n      checked: value === this.props.selectedValue,\n      className: className,\n      disabled: disabled || this.props.disabled,\n      inline: this.props.inline,\n      name: name == null ? this.autoGroupName : name,\n      onChange: this.props.onChange,\n      value: value\n    };\n  };\n\n  RadioGroup.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".RadioGroup\");\n  return RadioGroup;\n}(AbstractPureComponent2);\n\nexport { RadioGroup };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,sBAAT,EAAiCC,OAAjC,QAAgD,cAAhD;AACA,OAAO,KAAKC,MAAZ,MAAwB,qBAAxB;AACA,SAASC,kBAAT,QAAuD,oBAAvD;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAAqBC,KAArB,QAAkC,YAAlC;AAiDA,IAAIC,OAAO,GAAG,CAAd;;AACA,SAASC,QAAT,GAAiB;AACb,SAAO,UAAGC,UAAU,CAACC,WAAd,EAAyB,GAAzB,EAAyBC,MAAzB,CAA6BJ,OAAO,EAApC,CAAP;AACH;;AAED;AAAA;AAAA;AAAgCK;;AAAhC;AAAA,0EAGI;;;AACQC,0BAAgBL,QAAQ,EAAxB;;AA+CX;;AA7CUC,gCAAP;AACY,aAAK,GAAK,KAAKK,KAAL,CAAUC,KAApB;AACR,WACIf;AAAKgB,eAAS,EAAE,KAAKF,KAAL,CAAWE;AAA3B,OACKD,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAuBf;AAAOgB,eAAS,EAAEd,OAAO,CAACe;AAA1B,OAAkCF,KAAlC,CAD5B,EAEKG,KAAK,CAACC,OAAN,CAAc,KAAKL,KAAL,CAAWM,OAAzB,IAAoC,KAAKC,aAAL,EAApC,GAA2D,KAAKC,cAAL,EAFhE,CADJ;AAMH,GARM;;AAUGb,uCAAV;AACI,QAAI,KAAKK,KAAL,CAAWS,QAAX,IAAuB,IAAvB,IAA+B,KAAKT,KAAL,CAAWM,OAAX,IAAsB,IAAzD,EAA+D;AAC3DI,aAAO,CAACC,IAAR,CAAatB,MAAM,CAACuB,sCAApB;AACH;AACJ,GAJS;;AAMFjB,wCAAR;AAAA;;AACI,WAAOT,KAAK,CAAC2B,QAAN,CAAeC,GAAf,CAAmB,KAAKd,KAAL,CAAWS,QAA9B,EAAwC,iBAAK;AAChD,UAAIlB,eAAe,CAACwB,KAAD,EAAQvB,KAAR,CAAnB,EAAmC;AAC/B,eAAON,KAAK,CAAC8B,YAAN,CAAmBD,KAAnB,EAA0BhB,KAAI,CAACkB,aAAL,CAAmBF,KAAK,CAACf,KAAzB,CAA1B,CAAP;AACH,OAFD,MAEO;AACH,eAAOe,KAAP;AACH;AACJ,KANM,CAAP;AAOH,GARO;;AAUApB,uCAAR;AAAA;;;;AACI,WAAO,WAAKK,KAAL,CAAWM,OAAX,MAAkB,IAAlB,IAAkBY,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEJ,GAAF,CAAM,kBAAM;AAAI,aACrC5B,oBAACM,KAAD,EAAM2B,aAAKpB,KAAI,CAACkB,aAAL,CAAmBG,MAAnB,CAAL,EAA+B;AAAEC,WAAG,EAAED,MAAM,CAACE,KAAd;AAAqBC,oBAAY,EAAEH,MAAM,CAACnB,KAAP,IAAgBmB,MAAM,CAACE;AAA1D,OAA/B,CAAN,CADqC;AAExC,KAFwB,CAAzB;AAGH,GAJO;;AAMA3B,uCAAR,UAAsB6B,WAAtB,EAA8C;AAClC,YAAI,GAAK,KAAKxB,KAAL,CAAUyB,IAAnB;AACA,iBAAS,GAAsBD,WAAW,UAA1C;AAAA,QAAWE,QAAQ,GAAYF,WAAW,SAA1C;AAAA,QAAqBF,KAAK,GAAKE,WAAW,MAA1C;AACR,WAAO;AACHG,aAAO,EAAEL,KAAK,KAAK,KAAKtB,KAAL,CAAW4B,aAD3B;AAEH1B,eAAS,WAFN;AAGHwB,cAAQ,EAAEA,QAAQ,IAAI,KAAK1B,KAAL,CAAW0B,QAH9B;AAIHG,YAAM,EAAE,KAAK7B,KAAL,CAAW6B,MAJhB;AAKHJ,UAAI,EAAEA,IAAI,IAAI,IAAR,GAAe,KAAKK,aAApB,GAAoCL,IALvC;AAMHM,cAAQ,EAAE,KAAK/B,KAAL,CAAW+B,QANlB;AAOHT,WAAK;AAPF,KAAP;AASH,GAZO;;AArCM3B,2BAAc,UAAGL,kBAAH,EAAqB,aAArB,CAAd;AAkDlB;AAAC,CAnDD,CAAgCH,sBAAhC;;SAAaQ","names":["React","AbstractPureComponent2","Classes","Errors","DISPLAYNAME_PREFIX","isElementOfType","Radio","counter","nextName","RadioGroup","displayName","concat","__extends","_this","props","label","className","LABEL","Array","isArray","options","renderOptions","renderChildren","children","console","warn","RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX","Children","map","child","cloneElement","getRadioProps","_a","__assign","option","key","value","labelElement","optionProps","name","disabled","checked","selectedValue","inline","autoGroupName","onChange"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/forms/radioGroup.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, OptionProps, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { RadioProps, Radio } from \"./controls\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type RadioGroupProps = IRadioGroupProps;\n/** @deprecated use RadioGroupProps */\nexport interface IRadioGroupProps extends Props {\n    /**\n     * Radio elements. This prop is mutually exclusive with `options`.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the radio buttons are to be displayed inline horizontally.\n     */\n    inline?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: React.ReactNode;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group. This prop is mutually exclusive\n     * with `children`: either provide an array of `OptionProps` objects or\n     * provide `<Radio>` children elements.\n     */\n    options?: readonly OptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string | number;\n}\n\nlet counter = 0;\nfunction nextName() {\n    return `${RadioGroup.displayName}-${counter++}`;\n}\n\nexport class RadioGroup extends AbstractPureComponent2<RadioGroupProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    private autoGroupName = nextName();\n\n    public render() {\n        const { label } = this.props;\n        return (\n            <div className={this.props.className}>\n                {label == null ? null : <label className={Classes.LABEL}>{label}</label>}\n                {Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren()}\n            </div>\n        );\n    }\n\n    protected validateProps() {\n        if (this.props.children != null && this.props.options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }\n\n    private renderChildren() {\n        return React.Children.map(this.props.children, child => {\n            if (isElementOfType(child, Radio)) {\n                return React.cloneElement(child, this.getRadioProps(child.props as OptionProps));\n            } else {\n                return child;\n            }\n        });\n    }\n\n    private renderOptions() {\n        return this.props.options?.map(option => (\n            <Radio {...this.getRadioProps(option)} key={option.value} labelElement={option.label || option.value} />\n        ));\n    }\n\n    private getRadioProps(optionProps: OptionProps): RadioProps {\n        const { name } = this.props;\n        const { className, disabled, value } = optionProps;\n        return {\n            checked: value === this.props.selectedValue,\n            className,\n            disabled: disabled || this.props.disabled,\n            inline: this.props.inline,\n            name: name == null ? this.autoGroupName : name,\n            onChange: this.props.onChange,\n            value,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}