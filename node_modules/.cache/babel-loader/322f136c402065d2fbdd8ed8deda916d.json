{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Classes } from \"../../common\";\nimport { Dialog } from \"../../components\";\nimport { Hotkey } from \"./hotkey\";\nimport { Hotkeys } from \"./hotkeys\";\n/**\n * The delay before showing or hiding the dialog. Should be long enough to\n * allow all registered hotkey listeners to execute first.\n */\n\nvar DELAY_IN_MS = 10;\n\nvar HotkeysDialog =\n/** @class */\nfunction () {\n  function HotkeysDialog() {\n    var _this = this;\n\n    this.componentProps = {\n      globalHotkeysGroup: \"Global hotkeys\"\n    };\n    this.container = null;\n    this.hotkeysQueue = [];\n    this.isDialogShowing = false;\n\n    this.show = function () {\n      _this.isDialogShowing = true;\n\n      _this.render();\n    };\n\n    this.hide = function () {\n      _this.isDialogShowing = false;\n\n      _this.render();\n    };\n  }\n\n  HotkeysDialog.prototype.render = function () {\n    if (this.container == null) {\n      this.container = this.getContainer();\n    }\n\n    ReactDOM.render(this.renderComponent(), this.container);\n  };\n\n  HotkeysDialog.prototype.unmount = function () {\n    if (this.container != null) {\n      ReactDOM.unmountComponentAtNode(this.container);\n      this.container.remove();\n      this.container = null;\n    }\n  };\n  /**\n   * Because hotkeys can be registered globally and locally and because\n   * event ordering cannot be guaranteed, we use this debouncing method to\n   * allow all hotkey listeners to fire and add their hotkeys to the dialog.\n   *\n   * 10msec after the last listener adds their hotkeys, we render the dialog\n   * and clear the queue.\n   */\n\n\n  HotkeysDialog.prototype.enqueueHotkeysForDisplay = function (hotkeys) {\n    this.hotkeysQueue.push(hotkeys); // reset timeout for debounce\n\n    window.clearTimeout(this.showTimeoutToken);\n    this.showTimeoutToken = window.setTimeout(this.show, DELAY_IN_MS);\n  };\n\n  HotkeysDialog.prototype.hideAfterDelay = function () {\n    window.clearTimeout(this.hideTimeoutToken);\n    this.hideTimeoutToken = window.setTimeout(this.hide, DELAY_IN_MS);\n  };\n\n  HotkeysDialog.prototype.isShowing = function () {\n    return this.isDialogShowing;\n  };\n\n  HotkeysDialog.prototype.getContainer = function () {\n    if (this.container == null) {\n      this.container = document.createElement(\"div\");\n      this.container.classList.add(Classes.PORTAL);\n      document.body.appendChild(this.container);\n    }\n\n    return this.container;\n  };\n\n  HotkeysDialog.prototype.renderComponent = function () {\n    return React.createElement(Dialog, __assign({}, this.componentProps, {\n      className: classNames(Classes.HOTKEY_DIALOG, this.componentProps.className),\n      isOpen: this.isDialogShowing,\n      onClose: this.hide\n    }), React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, this.renderHotkeys()));\n  };\n\n  HotkeysDialog.prototype.renderHotkeys = function () {\n    var _this = this;\n\n    var hotkeys = this.emptyHotkeyQueue();\n    var elements = hotkeys.map(function (hotkey, index) {\n      var group = hotkey.global === true && hotkey.group == null ? _this.componentProps.globalHotkeysGroup : hotkey.group;\n      return React.createElement(Hotkey, __assign({\n        key: index\n      }, hotkey, {\n        group: group\n      }));\n    });\n    return React.createElement(Hotkeys, null, elements);\n  };\n\n  HotkeysDialog.prototype.emptyHotkeyQueue = function () {\n    // flatten then empty the hotkeys queue\n    var hotkeys = this.hotkeysQueue.reduce(function (arr, queued) {\n      return arr.concat(queued);\n    }, []);\n    this.hotkeysQueue.length = 0;\n    return hotkeys;\n  };\n\n  return HotkeysDialog;\n}(); // singleton instance\n\n\nvar HOTKEYS_DIALOG = new HotkeysDialog();\nexport function isHotkeysDialogShowing() {\n  return HOTKEYS_DIALOG.isShowing();\n}\nexport function setHotkeysDialogProps(props) {\n  for (var key in props) {\n    if (props.hasOwnProperty(key)) {\n      HOTKEYS_DIALOG.componentProps[key] = props[key];\n    }\n  }\n}\nexport function showHotkeysDialog(hotkeys) {\n  HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);\n}\nexport function hideHotkeysDialog() {\n  HOTKEYS_DIALOG.hide();\n}\n/**\n * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners\n * have time to execute with the dialog in a consistent open state. This can avoid flickering the\n * dialog between open and closedÂ states as successive listeners fire.\n */\n\nexport function hideHotkeysDialogAfterDelay() {\n  HOTKEYS_DIALOG.hideAfterDelay();\n}","map":{"version":3,"mappings":"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","names":["classNames","React","ReactDOM","Classes","Dialog","Hotkey","Hotkeys","DELAY_IN_MS","globalHotkeysGroup","_this","isDialogShowing","render","HotkeysDialog","container","getContainer","renderComponent","unmountComponentAtNode","remove","hotkeys","hotkeysQueue","push","window","clearTimeout","showTimeoutToken","setTimeout","show","hideTimeoutToken","hide","document","createElement","classList","add","PORTAL","body","appendChild","__assign","componentProps","className","HOTKEY_DIALOG","isOpen","onClose","DIALOG_BODY","renderHotkeys","emptyHotkeyQueue","elements","map","hotkey","index","group","global","key","reduce","arr","queued","concat","length","HOTKEYS_DIALOG","isHotkeysDialogShowing","isShowing","setHotkeysDialogProps","props","hasOwnProperty","showHotkeysDialog","enqueueHotkeysForDisplay","hideHotkeysDialog","hideHotkeysDialogAfterDelay","hideAfterDelay"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/hotkeys/hotkeysDialog.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Classes } from \"../../common\";\nimport { Dialog, DialogProps } from \"../../components\";\nimport { Hotkey, IHotkeyProps } from \"./hotkey\";\nimport { Hotkeys } from \"./hotkeys\";\n\nexport interface IHotkeysDialogProps extends DialogProps {\n    /**\n     * This string displayed as the group name in the hotkeys dialog for all\n     * global hotkeys.\n     */\n    globalHotkeysGroup?: string;\n}\n\n/**\n * The delay before showing or hiding the dialog. Should be long enough to\n * allow all registered hotkey listeners to execute first.\n */\nconst DELAY_IN_MS = 10;\n\nclass HotkeysDialog {\n    public componentProps = ({\n        globalHotkeysGroup: \"Global hotkeys\",\n    } as any) as IHotkeysDialogProps;\n\n    private container: HTMLElement | null = null;\n\n    private hotkeysQueue = [] as IHotkeyProps[][];\n\n    private isDialogShowing = false;\n\n    private showTimeoutToken?: number;\n\n    private hideTimeoutToken?: number;\n\n    public render() {\n        if (this.container == null) {\n            this.container = this.getContainer();\n        }\n        ReactDOM.render(this.renderComponent(), this.container);\n    }\n\n    public unmount() {\n        if (this.container != null) {\n            ReactDOM.unmountComponentAtNode(this.container);\n            this.container.remove();\n            this.container = null;\n        }\n    }\n\n    /**\n     * Because hotkeys can be registered globally and locally and because\n     * event ordering cannot be guaranteed, we use this debouncing method to\n     * allow all hotkey listeners to fire and add their hotkeys to the dialog.\n     *\n     * 10msec after the last listener adds their hotkeys, we render the dialog\n     * and clear the queue.\n     */\n    public enqueueHotkeysForDisplay(hotkeys: IHotkeyProps[]) {\n        this.hotkeysQueue.push(hotkeys);\n\n        // reset timeout for debounce\n        window.clearTimeout(this.showTimeoutToken);\n        this.showTimeoutToken = window.setTimeout(this.show, DELAY_IN_MS);\n    }\n\n    public hideAfterDelay() {\n        window.clearTimeout(this.hideTimeoutToken);\n        this.hideTimeoutToken = window.setTimeout(this.hide, DELAY_IN_MS);\n    }\n\n    public show = () => {\n        this.isDialogShowing = true;\n        this.render();\n    };\n\n    public hide = () => {\n        this.isDialogShowing = false;\n        this.render();\n    };\n\n    public isShowing() {\n        return this.isDialogShowing;\n    }\n\n    private getContainer() {\n        if (this.container == null) {\n            this.container = document.createElement(\"div\");\n            this.container.classList.add(Classes.PORTAL);\n            document.body.appendChild(this.container);\n        }\n        return this.container;\n    }\n\n    private renderComponent() {\n        return (\n            <Dialog\n                {...this.componentProps}\n                className={classNames(Classes.HOTKEY_DIALOG, this.componentProps.className)}\n                isOpen={this.isDialogShowing}\n                onClose={this.hide}\n            >\n                <div className={Classes.DIALOG_BODY}>{this.renderHotkeys()}</div>\n            </Dialog>\n        );\n    }\n\n    private renderHotkeys() {\n        const hotkeys = this.emptyHotkeyQueue();\n        const elements = hotkeys.map((hotkey, index) => {\n            const group =\n                hotkey.global === true && hotkey.group == null ? this.componentProps.globalHotkeysGroup : hotkey.group;\n\n            return <Hotkey key={index} {...hotkey} group={group} />;\n        });\n\n        return <Hotkeys>{elements}</Hotkeys>;\n    }\n\n    private emptyHotkeyQueue() {\n        // flatten then empty the hotkeys queue\n        const hotkeys = this.hotkeysQueue.reduce((arr, queued) => arr.concat(queued), []);\n        this.hotkeysQueue.length = 0;\n        return hotkeys;\n    }\n}\n\n// singleton instance\nconst HOTKEYS_DIALOG = new HotkeysDialog();\n\nexport function isHotkeysDialogShowing() {\n    return HOTKEYS_DIALOG.isShowing();\n}\n\nexport function setHotkeysDialogProps(props: Partial<IHotkeysDialogProps>) {\n    for (const key in props) {\n        if (props.hasOwnProperty(key)) {\n            (HOTKEYS_DIALOG.componentProps as any)[key] = (props as any)[key];\n        }\n    }\n}\n\nexport function showHotkeysDialog(hotkeys: IHotkeyProps[]) {\n    HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);\n}\n\nexport function hideHotkeysDialog() {\n    HOTKEYS_DIALOG.hide();\n}\n\n/**\n * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners\n * have time to execute with the dialog in a consistent open state. This can avoid flickering the\n * dialog between open and closedÂ states as successive listeners fire.\n */\nexport function hideHotkeysDialogAfterDelay() {\n    HOTKEYS_DIALOG.hideAfterDelay();\n}\n"]},"metadata":{},"sourceType":"module"}