{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  __extends(Overlay, _super);\n\n  function Overlay() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isAutoFocusing = false;\n    _this.state = {\n      hasEverOpened: _this.props.isOpen\n    }; // an HTMLElement that contains the backdrop and any children, to query for focus target\n\n    _this.containerElement = null; // An empty, keyboard-focusable div at the beginning of the Overlay content\n\n    _this.startFocusTrapElement = null; // An empty, keyboard-focusable div at the end of the Overlay content\n\n    _this.endFocusTrapElement = null;\n    _this.refHandlers = {\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n\n      /* eslint-disable-next-line react/no-find-dom-node */\n      container: function (ref) {\n        return _this.containerElement = findDOMNode(ref);\n      },\n      endFocusTrap: function (ref) {\n        return _this.endFocusTrapElement = ref;\n      },\n      startFocusTrap: function (ref) {\n        return _this.startFocusTrapElement = ref;\n      }\n    };\n\n    _this.maybeRenderChild = function (child) {\n      if (isFunction(child)) {\n        child = child();\n      }\n\n      if (child == null) {\n        return null;\n      } // add a special class to each child element that will automatically set the appropriate\n      // CSS position mode under the hood.\n\n\n      var decoratedChild = typeof child === \"object\" ? React.cloneElement(child, {\n        className: classNames(child.props.className, Classes.OVERLAY_CONTENT)\n      }) : React.createElement(\"span\", {\n        className: Classes.OVERLAY_CONTENT\n      }, child);\n      var _a = _this.props,\n          onOpening = _a.onOpening,\n          onOpened = _a.onOpened,\n          onClosing = _a.onClosing,\n          transitionDuration = _a.transitionDuration,\n          transitionName = _a.transitionName;\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        onEntering: onOpening,\n        onEntered: onOpened,\n        onExiting: onClosing,\n        onExited: _this.handleTransitionExited,\n        timeout: transitionDuration,\n        addEndListener: _this.handleTransitionAddEnd\n      }, decoratedChild);\n    };\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n\n\n    _this.handleStartFocusTrapElementFocus = function (e) {\n      var _a;\n\n      if (!_this.props.enforceFocus || _this.isAutoFocusing) {\n        return;\n      } // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n      // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n      // Otherwise, we're handling a user interaction, and we should wrap around to the last\n      // element in this transition group.\n\n\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.endFocusTrapElement) {\n        (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n\n\n    _this.handleStartFocusTrapElementKeyDown = function (e) {\n      var _a;\n\n      if (!_this.props.enforceFocus) {\n        return;\n      } // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n\n\n      if (e.shiftKey && e.which === Keys.TAB) {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n\n\n    _this.handleEndFocusTrapElementFocus = function (e) {\n      var _a, _b; // No need for this.props.enforceFocus check here because this element is only rendered\n      // when that prop is true.\n      // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n      // \"start focus trap\" element.\n      // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n      // presses shift+tab from the first focusable element in the overlay.\n\n\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.startFocusTrapElement) {\n        var firstFocusableElement = _this.getKeyboardFocusableElements().shift(); // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n\n\n        if (!_this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n          firstFocusableElement.focus();\n        } else {\n          (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      } else {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          // Keeps focus within Overlay even if there are no keyboard-focusable children\n          (_b = _this.startFocusTrapElement) === null || _b === void 0 ? void 0 : _b.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n\n    _this.handleTransitionExited = function (node) {\n      var _a, _b;\n\n      if (_this.props.shouldReturnFocusOnClose && _this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n        _this.lastActiveElementBeforeOpened.focus();\n      }\n\n      (_b = (_a = _this.props).onClosed) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n\n    _this.handleBackdropMouseDown = function (e) {\n      var _a;\n\n      var _b = _this.props,\n          backdropProps = _b.backdropProps,\n          canOutsideClickClose = _b.canOutsideClickClose,\n          enforceFocus = _b.enforceFocus,\n          onClose = _b.onClose;\n\n      if (canOutsideClickClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n\n      if (enforceFocus) {\n        _this.bringFocusInsideOverlay();\n      }\n\n      (_a = backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(backdropProps, e);\n    };\n\n    _this.handleDocumentClick = function (e) {\n      var _a = _this.props,\n          canOutsideClickClose = _a.canOutsideClickClose,\n          isOpen = _a.isOpen,\n          onClose = _a.onClose; // get the actual target even in the Shadow DOM\n\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      var stackIndex = Overlay.openStack.indexOf(_this);\n      var isClickInThisOverlayOrDescendant = Overlay.openStack.slice(stackIndex).some(function (_a) {\n        var elem = _a.containerElement; // `elem` is the container of backdrop & content, so clicking on that container\n        // should not count as being \"inside\" the overlay.\n\n        return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n      });\n\n      if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n        // casting to any because this is a native event\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n    };\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n\n\n    _this.handleDocumentFocus = function (e) {\n      // get the actual target even in the Shadow DOM\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n\n      if (_this.props.enforceFocus && _this.containerElement != null && eventTarget instanceof Node && !_this.containerElement.contains(eventTarget)) {\n        // prevent default focus behavior (sometimes auto-scrolls the page)\n        e.preventDefault();\n        e.stopImmediatePropagation();\n\n        _this.bringFocusInsideOverlay();\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _a = _this.props,\n          canEscapeKeyClose = _a.canEscapeKeyClose,\n          onClose = _a.onClose; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n\n      if (e.which === Keys.ESCAPE && canEscapeKeyClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e); // prevent browser-specific escape key behavior (Safari exits fullscreen)\n\n        e.preventDefault();\n      }\n    };\n\n    _this.handleTransitionAddEnd = function () {// no-op\n    };\n\n    return _this;\n  }\n\n  Overlay.getDerivedStateFromProps = function (_a) {\n    var hasEverOpened = _a.isOpen;\n\n    if (hasEverOpened) {\n      return {\n        hasEverOpened: hasEverOpened\n      };\n    }\n\n    return null;\n  };\n\n  Overlay.prototype.render = function () {\n    var _a;\n\n    var _b; // oh snap! no reason to render anything at all if we're being truly lazy\n\n\n    if (this.props.lazy && !this.state.hasEverOpened) {\n      return null;\n    }\n\n    var _c = this.props,\n        autoFocus = _c.autoFocus,\n        children = _c.children,\n        className = _c.className,\n        enforceFocus = _c.enforceFocus,\n        usePortal = _c.usePortal,\n        isOpen = _c.isOpen; // TransitionGroup types require single array of children; does not support nested arrays.\n    // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n    // Transition element (no ReactText allowed).\n\n    var childrenWithTransitions = isOpen ? (_b = React.Children.map(children, this.maybeRenderChild)) !== null && _b !== void 0 ? _b : [] : [];\n    var maybeBackdrop = this.maybeRenderBackdrop();\n\n    if (maybeBackdrop !== null) {\n      childrenWithTransitions.unshift(maybeBackdrop);\n    }\n\n    if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n      childrenWithTransitions.unshift(this.renderDummyElement(\"__start\", {\n        className: Classes.OVERLAY_START_FOCUS_TRAP,\n        onFocus: this.handleStartFocusTrapElementFocus,\n        onKeyDown: this.handleStartFocusTrapElementKeyDown,\n        ref: this.refHandlers.startFocusTrap\n      }));\n\n      if (enforceFocus) {\n        childrenWithTransitions.push(this.renderDummyElement(\"__end\", {\n          className: Classes.OVERLAY_END_FOCUS_TRAP,\n          onFocus: this.handleEndFocusTrapElementFocus,\n          ref: this.refHandlers.endFocusTrap\n        }));\n      }\n    }\n\n    var containerClasses = classNames(Classes.OVERLAY, (_a = {}, _a[Classes.OVERLAY_OPEN] = isOpen, _a[Classes.OVERLAY_INLINE] = !usePortal, _a), className);\n    var transitionGroup = React.createElement(TransitionGroup, {\n      appear: true,\n      \"aria-live\": \"polite\",\n      className: containerClasses,\n      component: \"div\",\n      onKeyDown: this.handleKeyDown,\n      ref: this.refHandlers.container\n    }, childrenWithTransitions);\n\n    if (usePortal) {\n      return React.createElement(Portal, {\n        className: this.props.portalClassName,\n        container: this.props.portalContainer\n      }, transitionGroup);\n    } else {\n      return transitionGroup;\n    }\n  };\n\n  Overlay.prototype.componentDidMount = function () {\n    if (this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.isOpen && !this.props.isOpen) {\n      this.overlayWillClose();\n    } else if (!prevProps.isOpen && this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentWillUnmount = function () {\n    this.overlayWillClose();\n  };\n  /**\n   * @public for testing\n   * @internal\n   */\n\n\n  Overlay.prototype.bringFocusInsideOverlay = function () {\n    var _this = this; // always delay focus manipulation to just before repaint to prevent scroll jumping\n\n\n    return this.requestAnimationFrame(function () {\n      var _a; // container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n\n\n      if (_this.containerElement == null || document.activeElement == null || !_this.props.isOpen) {\n        return;\n      }\n\n      var isFocusOutsideModal = !_this.containerElement.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        _this.isAutoFocusing = false;\n      }\n    });\n  };\n\n  Overlay.prototype.maybeRenderBackdrop = function () {\n    var _a = this.props,\n        backdropClassName = _a.backdropClassName,\n        backdropProps = _a.backdropProps,\n        hasBackdrop = _a.hasBackdrop,\n        isOpen = _a.isOpen,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n\n    if (hasBackdrop && isOpen) {\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        key: \"__backdrop\",\n        timeout: transitionDuration,\n        addEndListener: this.handleTransitionAddEnd\n      }, React.createElement(\"div\", __assign({}, backdropProps, {\n        className: classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.className),\n        onMouseDown: this.handleBackdropMouseDown\n      })));\n    } else {\n      return null;\n    }\n  };\n\n  Overlay.prototype.renderDummyElement = function (key, props) {\n    var _a = this.props,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n    return React.createElement(CSSTransition, {\n      classNames: transitionName,\n      key: key,\n      addEndListener: this.handleTransitionAddEnd,\n      timeout: transitionDuration,\n      unmountOnExit: true\n    }, React.createElement(\"div\", __assign({\n      tabIndex: 0\n    }, props)));\n  };\n\n  Overlay.prototype.getKeyboardFocusableElements = function () {\n    var focusableElements = this.containerElement !== null ? Array.from( // Order may not be correct if children elements use tabindex values > 0.\n    // Selectors derived from this SO question:\n    // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n    this.containerElement.querySelectorAll(['a[href]:not([tabindex=\"-1\"])', 'button:not([disabled]):not([tabindex=\"-1\"])', 'details:not([tabindex=\"-1\"])', 'input:not([disabled]):not([tabindex=\"-1\"])', 'select:not([disabled]):not([tabindex=\"-1\"])', 'textarea:not([disabled]):not([tabindex=\"-1\"])', '[tabindex]:not([tabindex=\"-1\"])'].join(\",\"))) : [];\n    return focusableElements.filter(function (el) {\n      return !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) && !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP);\n    });\n  };\n\n  Overlay.prototype.overlayWillClose = function () {\n    document.removeEventListener(\"focus\", this.handleDocumentFocus,\n    /* useCapture */\n    true);\n    document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n    var openStack = Overlay.openStack;\n    var stackIndex = openStack.indexOf(this);\n\n    if (stackIndex !== -1) {\n      openStack.splice(stackIndex, 1);\n\n      if (openStack.length > 0) {\n        var lastOpenedOverlay = Overlay.getLastOpened(); // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n        // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n        // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n\n        if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n          lastOpenedOverlay.bringFocusInsideOverlay();\n          document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus,\n          /* useCapture */\n          true);\n        }\n      }\n\n      if (openStack.filter(function (o) {\n        return o.props.usePortal && o.props.hasBackdrop;\n      }).length === 0) {\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n      }\n    }\n  };\n\n  Overlay.prototype.overlayWillOpen = function () {\n    var getLastOpened = Overlay.getLastOpened,\n        openStack = Overlay.openStack;\n\n    if (openStack.length > 0) {\n      document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    openStack.push(this);\n\n    if (this.props.autoFocus) {\n      this.isAutoFocusing = true;\n      this.bringFocusInsideOverlay();\n    }\n\n    if (this.props.enforceFocus) {\n      // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n      // our handler before all others\n      document.addEventListener(\"focus\", this.handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n      document.addEventListener(\"mousedown\", this.handleDocumentClick);\n    }\n\n    if (this.props.hasBackdrop && this.props.usePortal) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n\n    this.lastActiveElementBeforeOpened = document.activeElement;\n  };\n\n  Overlay.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Overlay\");\n  Overlay.defaultProps = {\n    autoFocus: true,\n    backdropProps: {},\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    hasBackdrop: true,\n    isOpen: false,\n    lazy: true,\n    shouldReturnFocusOnClose: true,\n    transitionDuration: 300,\n    transitionName: Classes.OVERLAY,\n    usePortal: true\n  };\n  Overlay.openStack = [];\n\n  Overlay.getLastOpened = function () {\n    return Overlay.openStack[Overlay.openStack.length - 1];\n  };\n\n  return Overlay;\n}(AbstractPureComponent2);\n\nexport { Overlay };","map":{"version":3,"mappings":"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","names":["classNames","React","findDOMNode","CSSTransition","TransitionGroup","AbstractPureComponent2","Classes","Keys","DISPLAYNAME_PREFIX","isFunction","Portal","__extends","_this","hasEverOpened","props","isOpen","container","ref","containerElement","endFocusTrap","endFocusTrapElement","startFocusTrap","startFocusTrapElement","child","decoratedChild","cloneElement","className","OVERLAY_CONTENT","onOpening","onOpened","onClosing","transitionDuration","transitionName","onEntering","onEntered","onExiting","onExited","handleTransitionExited","timeout","addEndListener","handleTransitionAddEnd","e","enforceFocus","isAutoFocusing","relatedTarget","contains","_a","focus","preventScroll","shiftKey","which","TAB","lastFocusableElement","getKeyboardFocusableElements","pop","firstFocusableElement","shift","_b","node","shouldReturnFocusOnClose","lastActiveElementBeforeOpened","HTMLElement","onClosed","backdropProps","canOutsideClickClose","onClose","bringFocusInsideOverlay","onMouseDown","eventTarget","composed","composedPath","target","stackIndex","Overlay","openStack","indexOf","isClickInThisOverlayOrDescendant","slice","some","elem","isSameNode","Node","preventDefault","stopImmediatePropagation","canEscapeKeyClose","ESCAPE","lazy","state","autoFocus","children","usePortal","childrenWithTransitions","Children","map","maybeRenderChild","maybeBackdrop","maybeRenderBackdrop","unshift","length","renderDummyElement","OVERLAY_START_FOCUS_TRAP","onFocus","handleStartFocusTrapElementFocus","onKeyDown","handleStartFocusTrapElementKeyDown","refHandlers","push","OVERLAY_END_FOCUS_TRAP","handleEndFocusTrapElementFocus","containerClasses","OVERLAY","OVERLAY_OPEN","OVERLAY_INLINE","transitionGroup","appear","component","handleKeyDown","portalClassName","portalContainer","overlayWillOpen","prevProps","overlayWillClose","requestAnimationFrame","document","activeElement","isFocusOutsideModal","backdropClassName","hasBackdrop","key","OVERLAY_BACKDROP","handleBackdropMouseDown","unmountOnExit","tabIndex","focusableElements","Array","from","querySelectorAll","join","filter","el","classList","removeEventListener","handleDocumentFocus","handleDocumentClick","splice","lastOpenedOverlay","getLastOpened","addEventListener","o","body","remove","add"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/overlay/overlay.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLDivProps, Props } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayableProps = IOverlayableProps;\n/** @deprecated use OverlayableProps */\nexport interface IOverlayableProps extends IOverlayLifecycleProps {\n    /**\n     * Whether the overlay should acquire application focus when it first opens.\n     *\n     * @default true\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should invoke `onClose`.\n     *\n     * @default true\n     */\n    canEscapeKeyClose?: boolean;\n\n    /**\n     * Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\n     * to focus an element outside the overlay and this prop is enabled, then the overlay will\n     * immediately bring focus back to itself. If you are nesting overlay components, either disable\n     * this prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.\n     *\n     * @default true\n     */\n    enforceFocus?: boolean;\n\n    /**\n     * If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\n     * to the DOM when the overlay is opened for the first time; otherwise this happens when the\n     * component mounts. Lazy mounting provides noticeable performance improvements if you have lots\n     * of overlays at once, such as on each row of a table.\n     *\n     * @default true\n     */\n    lazy?: boolean;\n\n    /**\n     * Whether the application should return focus to the last active element in the\n     * document after this overlay closes.\n     *\n     * @default true\n     */\n    shouldReturnFocusOnClose?: boolean;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\n     * element attached to `portalContainer` prop.\n     *\n     * This prop essentially determines which element is covered by the backdrop: if `false`,\n     * then only its parent is covered; otherwise, the entire page is covered (because the parent\n     * of the `Portal` is the `<body>` itself).\n     *\n     * Set this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\n     * are rendered above their parents.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n\n    /**\n     * Space-delimited string of class names applied to the `Portal` element if\n     * `usePortal={true}`.\n     */\n    portalClassName?: string;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * A callback that is invoked when user interaction causes the overlay to close, such as\n     * clicking on the overlay or pressing the `esc` key (if enabled).\n     *\n     * Receives the event from the user's interaction, if there was an event (generally either a\n     * mouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\n     * will not actually close itself until that prop becomes `false`.\n     */\n    onClose?: (event: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nexport type OverlayLifecycleProps = IOverlayLifecycleProps;\nexport interface IOverlayLifecycleProps {\n    /**\n     * Lifecycle method invoked just before the CSS _close_ transition begins on\n     * a child. Receives the DOM element of the child being closed.\n     */\n    onClosing?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _close_ transition ends but\n     * before the child has been removed from the DOM. Receives the DOM element\n     * of the child being closed.\n     */\n    onClosed?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after mounting the child in the DOM but\n     * just before the CSS _open_ transition begins. Receives the DOM element of\n     * the child being opened.\n     */\n    onOpening?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _open_ transition ends.\n     * Receives the DOM element of the child being opened.\n     */\n    onOpened?: (node: HTMLElement) => void;\n}\n\nexport type BackdropProps = IBackdropProps;\nexport interface IBackdropProps {\n    /** CSS class names to apply to backdrop element. */\n    backdropClassName?: string;\n\n    /** HTML props for the backdrop element. */\n    backdropProps?: React.HTMLProps<HTMLDivElement>;\n\n    /**\n     * Whether clicking outside the overlay element (either on backdrop when present or on document)\n     * should invoke `onClose`.\n     *\n     * @default true\n     */\n    canOutsideClickClose?: boolean;\n\n    /**\n     * Whether a container-spanning backdrop element should be rendered behind the contents.\n     *\n     * @default true\n     */\n    hasBackdrop?: boolean;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayProps = IOverlayProps;\n/** @deprecated use OverlayProps */\nexport interface IOverlayProps extends OverlayableProps, IBackdropProps, Props {\n    /** Element to overlay. */\n    children?: React.ReactNode;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Name of the transition for internal `CSSTransition`.\n     * Providing your own name here will require defining new CSS transition properties.\n     *\n     * @default Classes.OVERLAY\n     */\n    transitionName?: string;\n}\n\nexport interface IOverlayState {\n    hasEverOpened?: boolean;\n}\n\nexport class Overlay extends AbstractPureComponent2<OverlayProps, IOverlayState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Overlay`;\n\n    public static defaultProps: OverlayProps = {\n        autoFocus: true,\n        backdropProps: {},\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        lazy: true,\n        shouldReturnFocusOnClose: true,\n        transitionDuration: 300,\n        transitionName: Classes.OVERLAY,\n        usePortal: true,\n    };\n\n    public static getDerivedStateFromProps({ isOpen: hasEverOpened }: OverlayProps) {\n        if (hasEverOpened) {\n            return { hasEverOpened };\n        }\n        return null;\n    }\n\n    private static openStack: Overlay[] = [];\n\n    private static getLastOpened = () => Overlay.openStack[Overlay.openStack.length - 1];\n\n    private isAutoFocusing = false;\n\n    private lastActiveElementBeforeOpened: Element | null | undefined;\n\n    public state: IOverlayState = {\n        hasEverOpened: this.props.isOpen,\n    };\n\n    // an HTMLElement that contains the backdrop and any children, to query for focus target\n    public containerElement: HTMLElement | null = null;\n\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    private startFocusTrapElement: HTMLDivElement | null = null;\n\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    private endFocusTrapElement: HTMLDivElement | null = null;\n\n    private refHandlers = {\n        // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n        /* eslint-disable-next-line react/no-find-dom-node */\n        container: (ref: TransitionGroup | null) => (this.containerElement = findDOMNode(ref) as HTMLElement),\n        endFocusTrap: (ref: HTMLDivElement | null) => (this.endFocusTrapElement = ref),\n        startFocusTrap: (ref: HTMLDivElement | null) => (this.startFocusTrapElement = ref),\n    };\n\n    public render() {\n        // oh snap! no reason to render anything at all if we're being truly lazy\n        if (this.props.lazy && !this.state.hasEverOpened) {\n            return null;\n        }\n\n        const { autoFocus, children, className, enforceFocus, usePortal, isOpen } = this.props;\n\n        // TransitionGroup types require single array of children; does not support nested arrays.\n        // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n        // Transition element (no ReactText allowed).\n        const childrenWithTransitions = isOpen ? React.Children.map(children, this.maybeRenderChild) ?? [] : [];\n\n        const maybeBackdrop = this.maybeRenderBackdrop();\n        if (maybeBackdrop !== null) {\n            childrenWithTransitions.unshift(maybeBackdrop);\n        }\n        if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n            childrenWithTransitions.unshift(\n                this.renderDummyElement(\"__start\", {\n                    className: Classes.OVERLAY_START_FOCUS_TRAP,\n                    onFocus: this.handleStartFocusTrapElementFocus,\n                    onKeyDown: this.handleStartFocusTrapElementKeyDown,\n                    ref: this.refHandlers.startFocusTrap,\n                }),\n            );\n            if (enforceFocus) {\n                childrenWithTransitions.push(\n                    this.renderDummyElement(\"__end\", {\n                        className: Classes.OVERLAY_END_FOCUS_TRAP,\n                        onFocus: this.handleEndFocusTrapElementFocus,\n                        ref: this.refHandlers.endFocusTrap,\n                    }),\n                );\n            }\n        }\n\n        const containerClasses = classNames(\n            Classes.OVERLAY,\n            {\n                [Classes.OVERLAY_OPEN]: isOpen,\n                [Classes.OVERLAY_INLINE]: !usePortal,\n            },\n            className,\n        );\n\n        const transitionGroup = (\n            <TransitionGroup\n                appear={true}\n                aria-live=\"polite\"\n                className={containerClasses}\n                component=\"div\"\n                onKeyDown={this.handleKeyDown}\n                ref={this.refHandlers.container}\n            >\n                {childrenWithTransitions}\n            </TransitionGroup>\n        );\n        if (usePortal) {\n            return (\n                <Portal className={this.props.portalClassName} container={this.props.portalContainer}>\n                    {transitionGroup}\n                </Portal>\n            );\n        } else {\n            return transitionGroup;\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentDidUpdate(prevProps: OverlayProps) {\n        if (prevProps.isOpen && !this.props.isOpen) {\n            this.overlayWillClose();\n        } else if (!prevProps.isOpen && this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.overlayWillClose();\n    }\n\n    /**\n     * @public for testing\n     * @internal\n     */\n    public bringFocusInsideOverlay() {\n        // always delay focus manipulation to just before repaint to prevent scroll jumping\n        return this.requestAnimationFrame(() => {\n            // container ref may be undefined between component mounting and Portal rendering\n            // activeElement may be undefined in some rare cases in IE\n            if (this.containerElement == null || document.activeElement == null || !this.props.isOpen) {\n                return;\n            }\n\n            const isFocusOutsideModal = !this.containerElement.contains(document.activeElement);\n            if (isFocusOutsideModal) {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n                this.isAutoFocusing = false;\n            }\n        });\n    }\n\n    private maybeRenderChild = (child?: React.ReactNode) => {\n        if (isFunction(child)) {\n            child = child();\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        // add a special class to each child element that will automatically set the appropriate\n        // CSS position mode under the hood.\n        const decoratedChild =\n            typeof child === \"object\" ? (\n                React.cloneElement(child as React.ReactElement, {\n                    className: classNames((child as React.ReactElement).props.className, Classes.OVERLAY_CONTENT),\n                })\n            ) : (\n                <span className={Classes.OVERLAY_CONTENT}>{child}</span>\n            );\n        const { onOpening, onOpened, onClosing, transitionDuration, transitionName } = this.props;\n\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                onEntering={onOpening}\n                onEntered={onOpened}\n                onExiting={onClosing}\n                onExited={this.handleTransitionExited}\n                timeout={transitionDuration}\n                addEndListener={this.handleTransitionAddEnd}\n            >\n                {decoratedChild}\n            </CSSTransition>\n        );\n    };\n\n    private maybeRenderBackdrop() {\n        const {\n            backdropClassName,\n            backdropProps,\n            hasBackdrop,\n            isOpen,\n            transitionDuration,\n            transitionName,\n        } = this.props;\n\n        if (hasBackdrop && isOpen) {\n            return (\n                <CSSTransition\n                    classNames={transitionName}\n                    key=\"__backdrop\"\n                    timeout={transitionDuration}\n                    addEndListener={this.handleTransitionAddEnd}\n                >\n                    <div\n                        {...backdropProps}\n                        className={classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps?.className)}\n                        onMouseDown={this.handleBackdropMouseDown}\n                    />\n                </CSSTransition>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    private renderDummyElement(key: string, props: HTMLDivProps & { ref?: React.Ref<HTMLDivElement> }) {\n        const { transitionDuration, transitionName } = this.props;\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                key={key}\n                addEndListener={this.handleTransitionAddEnd}\n                timeout={transitionDuration}\n                unmountOnExit={true}\n            >\n                <div tabIndex={0} {...props} />\n            </CSSTransition>\n        );\n    }\n\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleStartFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus || this.isAutoFocusing) {\n            return;\n        }\n        // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n        // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n        // Otherwise, we're handling a user interaction, and we should wrap around to the last\n        // element in this transition group.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.endFocusTrapElement\n        ) {\n            this.endFocusTrapElement?.focus({ preventScroll: true });\n        }\n    };\n\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    private handleStartFocusTrapElementKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus) {\n            return;\n        }\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable-next-line deprecation/deprecation */\n        if (e.shiftKey && e.which === Keys.TAB) {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                this.endFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleEndFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        // No need for this.props.enforceFocus check here because this element is only rendered\n        // when that prop is true.\n        // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n        // \"start focus trap\" element.\n        // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n        // presses shift+tab from the first focusable element in the overlay.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.startFocusTrapElement\n        ) {\n            const firstFocusableElement = this.getKeyboardFocusableElements().shift();\n            // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n            if (!this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n                firstFocusableElement.focus();\n            } else {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        } else {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                // Keeps focus within Overlay even if there are no keyboard-focusable children\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    private getKeyboardFocusableElements() {\n        const focusableElements: HTMLElement[] =\n            this.containerElement !== null\n                ? Array.from(\n                      // Order may not be correct if children elements use tabindex values > 0.\n                      // Selectors derived from this SO question:\n                      // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n                      this.containerElement.querySelectorAll(\n                          [\n                              'a[href]:not([tabindex=\"-1\"])',\n                              'button:not([disabled]):not([tabindex=\"-1\"])',\n                              'details:not([tabindex=\"-1\"])',\n                              'input:not([disabled]):not([tabindex=\"-1\"])',\n                              'select:not([disabled]):not([tabindex=\"-1\"])',\n                              'textarea:not([disabled]):not([tabindex=\"-1\"])',\n                              '[tabindex]:not([tabindex=\"-1\"])',\n                          ].join(\",\"),\n                      ),\n                  )\n                : [];\n\n        return focusableElements.filter(\n            el =>\n                !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) &&\n                !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP),\n        );\n    }\n\n    private overlayWillClose() {\n        document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n\n        const { openStack } = Overlay;\n        const stackIndex = openStack.indexOf(this);\n        if (stackIndex !== -1) {\n            openStack.splice(stackIndex, 1);\n            if (openStack.length > 0) {\n                const lastOpenedOverlay = Overlay.getLastOpened();\n                // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n                // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n                // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n                if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n                    lastOpenedOverlay.bringFocusInsideOverlay();\n                    document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */ true);\n                }\n            }\n\n            if (openStack.filter(o => o.props.usePortal && o.props.hasBackdrop).length === 0) {\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        }\n    }\n\n    private overlayWillOpen() {\n        const { getLastOpened, openStack } = Overlay;\n        if (openStack.length > 0) {\n            document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */ true);\n        }\n        openStack.push(this);\n\n        if (this.props.autoFocus) {\n            this.isAutoFocusing = true;\n            this.bringFocusInsideOverlay();\n        }\n\n        if (this.props.enforceFocus) {\n            // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n            // our handler before all others\n            document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        }\n\n        if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n            document.addEventListener(\"mousedown\", this.handleDocumentClick);\n        }\n\n        if (this.props.hasBackdrop && this.props.usePortal) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n\n        this.lastActiveElementBeforeOpened = document.activeElement;\n    }\n\n    private handleTransitionExited = (node: HTMLElement) => {\n        if (this.props.shouldReturnFocusOnClose && this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n            this.lastActiveElementBeforeOpened.focus();\n        }\n        this.props.onClosed?.(node);\n    };\n\n    private handleBackdropMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { backdropProps, canOutsideClickClose, enforceFocus, onClose } = this.props;\n        if (canOutsideClickClose) {\n            onClose?.(e);\n        }\n        if (enforceFocus) {\n            this.bringFocusInsideOverlay();\n        }\n        backdropProps?.onMouseDown?.(e);\n    };\n\n    private handleDocumentClick = (e: MouseEvent) => {\n        const { canOutsideClickClose, isOpen, onClose } = this.props;\n        // get the actual target even in the Shadow DOM\n        const eventTarget = (e.composed ? e.composedPath()[0] : e.target) as HTMLElement;\n\n        const stackIndex = Overlay.openStack.indexOf(this);\n        const isClickInThisOverlayOrDescendant = Overlay.openStack\n            .slice(stackIndex)\n            .some(({ containerElement: elem }) => {\n                // `elem` is the container of backdrop & content, so clicking on that container\n                // should not count as being \"inside\" the overlay.\n                return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n            });\n\n        if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n            // casting to any because this is a native event\n            onClose?.(e as any);\n        }\n    };\n\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    private handleDocumentFocus = (e: FocusEvent) => {\n        // get the actual target even in the Shadow DOM\n        const eventTarget = e.composed ? e.composedPath()[0] : e.target;\n        if (\n            this.props.enforceFocus &&\n            this.containerElement != null &&\n            eventTarget instanceof Node &&\n            !this.containerElement.contains(eventTarget as HTMLElement)\n        ) {\n            // prevent default focus behavior (sometimes auto-scrolls the page)\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.bringFocusInsideOverlay();\n        }\n    };\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { canEscapeKeyClose, onClose } = this.props;\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable-next-line deprecation/deprecation */\n        if (e.which === Keys.ESCAPE && canEscapeKeyClose) {\n            onClose?.(e);\n            // prevent browser-specific escape key behavior (Safari exits fullscreen)\n            e.preventDefault();\n        }\n    };\n\n    private handleTransitionAddEnd = () => {\n        // no-op\n    };\n}\n"]},"metadata":{},"sourceType":"module"}