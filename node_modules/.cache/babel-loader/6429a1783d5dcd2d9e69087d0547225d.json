{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\"; // TODO: write tests (ignoring for now to get a build passing quickly)\n\n/* istanbul ignore next */\n\nvar FileInput =\n/** @class */\nfunction (_super) {\n  __extends(FileInput, _super);\n\n  function FileInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleInputChange = function (e) {\n      var _a, _b, _c, _d;\n\n      (_b = (_a = _this.props).onInputChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n      (_d = (_c = _this.props.inputProps) === null || _c === void 0 ? void 0 : _c.onChange) === null || _d === void 0 ? void 0 : _d.call(_c, e);\n    };\n\n    return _this;\n  }\n\n  FileInput.prototype.render = function () {\n    var _a, _b, _c;\n\n    var _d = this.props,\n        buttonText = _d.buttonText,\n        className = _d.className,\n        disabled = _d.disabled,\n        fill = _d.fill,\n        hasSelection = _d.hasSelection,\n        inputProps = _d.inputProps,\n        large = _d.large,\n        onInputChange = _d.onInputChange,\n        text = _d.text,\n        htmlProps = __rest(_d, [\"buttonText\", \"className\", \"disabled\", \"fill\", \"hasSelection\", \"inputProps\", \"large\", \"onInputChange\", \"text\"]);\n\n    var rootClasses = classNames(Classes.FILE_INPUT, (_a = {}, _a[Classes.FILE_INPUT_HAS_SELECTION] = hasSelection, _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a), className);\n    var NS = Classes.getClassNamespace();\n    var uploadProps = (_b = {}, _b[\"\".concat(NS, \"-button-text\")] = buttonText, _b.className = classNames(Classes.FILE_UPLOAD_INPUT, (_c = {}, _c[Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT] = !!buttonText, _c)), _b);\n    return React.createElement(\"label\", __assign({}, htmlProps, {\n      className: rootClasses\n    }), React.createElement(\"input\", __assign({}, inputProps, {\n      onChange: this.handleInputChange,\n      type: \"file\",\n      disabled: disabled\n    })), React.createElement(\"span\", __assign({}, uploadProps), text));\n  };\n\n  FileInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".FileInput\");\n  FileInput.defaultProps = {\n    hasSelection: false,\n    inputProps: {},\n    text: \"Choose file...\"\n  };\n  return FileInput;\n}(AbstractPureComponent2);\n\nexport { FileInput };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,sBAAT,EAAiCC,OAAjC,QAAgD,cAAhD;AACA,SAASC,kBAAT,QAA0C,oBAA1C,C,CAgEA;;AACA;;AACA;AAAA;AAAA;AAA+BC;;AAA/B;AAAA;;AAmDYC,8BAAoB,UAACC,CAAD,EAAqC;;;AAC7D,uBAAI,CAACC,KAAL,EAAWC,aAAX,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,YAAGH,CAAH,CAAxB;AACA,uBAAI,CAACC,KAAL,CAAWG,UAAX,MAAqB,IAArB,IAAqBC,aAArB,GAAqB,MAArB,GAAqBA,GAAEC,QAAvB,MAA+B,IAA/B,IAA+BC,aAA/B,GAA+B,MAA/B,GAA+BA,YAAGP,CAAH,CAA/B;AACH,KAHO;;;AAIX;;AA9CUQ,+BAAP;;;AACI,QAAMD,KAWF,KAAKN,KAXT;AAAA,QACIQ,UAAU,gBADd;AAAA,QAEIC,SAAS,eAFb;AAAA,QAGIC,QAAQ,cAHZ;AAAA,QAIIC,IAAI,UAJR;AAAA,QAKIC,YAAY,kBALhB;AAAA,QAMIT,UAAU,gBANd;AAAA,QAOIU,KAAK,WAPT;AAAA,QAQIZ,aAAa,mBARjB;AAAA,QASIa,IAAI,UATR;AAAA,QAUOC,SAAS,cAVV,+GAUU,CAVhB;;AAaA,QAAMC,WAAW,GAAGxB,UAAU,CAC1BG,OAAO,CAACsB,UADkB,GACRC,SAEdA,GAACvB,OAAO,CAACwB,wBAAT,IAAoCP,YAFtB,EAGdM,GAACvB,OAAO,CAACyB,QAAT,IAAoBV,QAHN,EAIdQ,GAACvB,OAAO,CAAC0B,IAAT,IAAgBV,IAJF,EAKdO,GAACvB,OAAO,CAAC2B,KAAT,IAAiBT,KALH,IADQ,GAQ1BJ,SAR0B,CAA9B;AAWA,QAAMc,EAAE,GAAG5B,OAAO,CAAC6B,iBAAR,EAAX;AAEA,QAAMC,WAAW,aACbvB,GAAC,UAAGqB,EAAH,EAAK,cAAL,CAAD,IAAuBf,UADV,EAEbN,eAAWV,UAAU,CAACG,OAAO,CAAC+B,iBAAT,GAA0BtB,SAC3CA,GAACT,OAAO,CAACgC,6BAAT,IAAyC,CAAC,CAACnB,UADA,IAA1B,EAFR,KAAjB;AAOA,WACIf,0CAAWsB,SAAX,EAAoB;AAAEN,eAAS,EAAEO;AAAb,KAApB,GACIvB,0CAAWU,UAAX,EAAqB;AAAEE,cAAQ,EAAE,KAAKuB,iBAAjB;AAAoCC,UAAI,EAAC,MAAzC;AAAgDnB,cAAQ,EAAEA;AAA1D,KAArB,EADJ,EAEIjB,yCAAUgC,WAAV,GAAwBX,IAAxB,CAFJ,CADJ;AAMH,GAxCM;;AAROP,0BAAc,UAAGX,kBAAH,EAAqB,YAArB,CAAd;AAEAW,2BAA+B;AACzCK,gBAAY,EAAE,KAD2B;AAEzCT,cAAU,EAAE,EAF6B;AAGzCW,QAAI,EAAE;AAHmC,GAA/B;AAoDlB;AAAC,CAvDD,CAA+BpB,sBAA/B;;SAAaa","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","__extends","_this","e","props","onInputChange","_b","inputProps","_c","onChange","_d","FileInput","buttonText","className","disabled","fill","hasSelection","large","text","htmlProps","rootClasses","FILE_INPUT","_a","FILE_INPUT_HAS_SELECTION","DISABLED","FILL","LARGE","NS","getClassNamespace","uploadProps","FILE_UPLOAD_INPUT","FILE_UPLOAD_INPUT_CUSTOM_TEXT","handleInputChange","type"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/forms/fileInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type FileInputProps = IFileInputProps;\n/** @deprecated use FileInputProps */\nexport interface IFileInputProps extends React.LabelHTMLAttributes<HTMLLabelElement>, Props {\n    /**\n     * Whether the file input is non-interactive.\n     * Setting this to `true` will automatically disable the child input too.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the file input should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the user has made a selection in the input. This will affect the component's\n     * text styling. Make sure to set a non-empty value for the text prop as well.\n     *\n     * @default false\n     */\n    hasSelection?: boolean;\n\n    /**\n     * The props to pass to the child input.\n     * `disabled` will be ignored in favor of the top-level prop.\n     * `type` will be ignored, because the input _must_ be `type=\"file\"`.\n     * Pass `onChange` here to be notified when the user selects a file.\n     */\n    inputProps?: React.HTMLProps<HTMLInputElement>;\n\n    /**\n     * Whether the file input should appear with large styling.\n     */\n    large?: boolean;\n\n    /**\n     * Callback invoked on `<input>` `change` events.\n     *\n     * This callback is offered as a convenience; it is equivalent to passing\n     * `onChange` to `inputProps`.\n     *\n     * __Note:__ The top-level `onChange` prop is passed to the wrapping\n     * `<label>` rather than the `<input>`, which may not be what you expect.\n     */\n    onInputChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * The text to display.\n     *\n     * @default \"Choose file...\"\n     */\n    text?: React.ReactNode;\n\n    /**\n     * The button text.\n     *\n     * @default \"Browse\"\n     */\n    buttonText?: string;\n}\n\n// TODO: write tests (ignoring for now to get a build passing quickly)\n/* istanbul ignore next */\nexport class FileInput extends AbstractPureComponent2<FileInputProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.FileInput`;\n\n    public static defaultProps: FileInputProps = {\n        hasSelection: false,\n        inputProps: {},\n        text: \"Choose file...\",\n    };\n\n    public render() {\n        const {\n            buttonText,\n            className,\n            disabled,\n            fill,\n            hasSelection,\n            inputProps,\n            large,\n            onInputChange,\n            text,\n            ...htmlProps\n        } = this.props;\n\n        const rootClasses = classNames(\n            Classes.FILE_INPUT,\n            {\n                [Classes.FILE_INPUT_HAS_SELECTION]: hasSelection,\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n            },\n            className,\n        );\n\n        const NS = Classes.getClassNamespace();\n\n        const uploadProps = {\n            [`${NS}-button-text`]: buttonText,\n            className: classNames(Classes.FILE_UPLOAD_INPUT, {\n                [Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT]: !!buttonText,\n            }),\n        };\n\n        return (\n            <label {...htmlProps} className={rootClasses}>\n                <input {...inputProps} onChange={this.handleInputChange} type=\"file\" disabled={disabled} />\n                <span {...uploadProps}>{text}</span>\n            </label>\n        );\n    }\n\n    private handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        this.props.onInputChange?.(e);\n        this.props.inputProps?.onChange?.(e);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}