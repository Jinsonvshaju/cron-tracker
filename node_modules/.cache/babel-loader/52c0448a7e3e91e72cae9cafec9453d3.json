{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX, InputGroup, Keys, Popover, PopoverInteractionKind, Position, refHandler, setRef } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Suggest =\n/** @class */\nfunction (_super) {\n  __extends(Suggest, _super);\n\n  function Suggest() {\n    var _this = this;\n\n    var _a;\n\n    _this = _super.apply(this, arguments) || this;\n    _this.state = {\n      isOpen: _this.props.popoverProps != null && _this.props.popoverProps.isOpen || false,\n      selectedItem: _this.getInitialSelectedItem()\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.inputElement = null;\n    _this.queryList = null;\n    _this.handleInputRef = refHandler(_this, \"inputElement\", (_a = _this.props.inputProps) === null || _a === void 0 ? void 0 : _a.inputRef);\n\n    _this.handleQueryListRef = function (ref) {\n      return _this.queryList = ref;\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          fill = _a.fill,\n          _b = _a.inputProps,\n          inputProps = _b === void 0 ? {} : _b,\n          _c = _a.popoverProps,\n          popoverProps = _c === void 0 ? {} : _c;\n      var _d = _this.state,\n          isOpen = _d.isOpen,\n          selectedItem = _d.selectedItem;\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      var _e = inputProps.autoComplete,\n          autoComplete = _e === void 0 ? \"off\" : _e,\n          _f = inputProps.placeholder,\n          placeholder = _f === void 0 ? \"Search...\" : _f;\n      var selectedItemText = selectedItem ? _this.props.inputValueRenderer(selectedItem) : \"\"; // placeholder shows selected item while open.\n\n      var inputPlaceholder = isOpen && selectedItemText ? selectedItemText : placeholder; // value shows query when open, and query remains when closed if nothing is selected.\n      // if resetOnClose is enabled, then hide query when not open. (see handlePopoverOpening)\n\n      var inputValue = isOpen ? listProps.query : selectedItemText || (_this.props.resetOnClose ? \"\" : listProps.query);\n\n      if (fill) {\n        popoverProps.fill = true;\n        inputProps.fill = true;\n      }\n\n      return (\n        /* eslint-disable-next-line deprecation/deprecation */\n        React.createElement(Popover, __assign({\n          autoFocus: false,\n          enforceFocus: false,\n          isOpen: isOpen,\n          position: Position.BOTTOM_LEFT\n        }, popoverProps, {\n          className: classNames(listProps.className, popoverProps.className),\n          interactionKind: PopoverInteractionKind.CLICK,\n          onInteraction: _this.handlePopoverInteraction,\n          popoverClassName: classNames(Classes.SELECT_POPOVER, popoverProps.popoverClassName),\n          onOpening: _this.handlePopoverOpening,\n          onOpened: _this.handlePopoverOpened\n        }), React.createElement(InputGroup, __assign({\n          autoComplete: autoComplete,\n          disabled: _this.props.disabled\n        }, inputProps, {\n          inputRef: _this.handleInputRef,\n          onChange: listProps.handleQueryChange,\n          onFocus: _this.handleInputFocus,\n          onKeyDown: _this.getTargetKeyDownHandler(handleKeyDown),\n          onKeyUp: _this.getTargetKeyUpHandler(handleKeyUp),\n          placeholder: inputPlaceholder,\n          value: inputValue\n        })), React.createElement(\"div\", {\n          onKeyDown: handleKeyDown,\n          onKeyUp: handleKeyUp\n        }, listProps.itemList))\n      );\n    };\n\n    _this.selectText = function () {\n      // wait until the input is properly focused to select the text inside of it\n      _this.requestAnimationFrame(function () {\n        var _a;\n\n        (_a = _this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, _this.inputElement.value.length);\n      });\n    };\n\n    _this.handleInputFocus = function (event) {\n      var _a, _b;\n\n      _this.selectText(); // TODO can we leverage Popover.openOnTargetFocus for this?\n\n\n      if (!_this.props.openOnKeyDown) {\n        _this.setState({\n          isOpen: true\n        });\n      }\n\n      (_b = (_a = _this.props.inputProps) === null || _a === void 0 ? void 0 : _a.onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n    };\n\n    _this.handleItemSelect = function (item, event) {\n      var _a, _b, _c, _d;\n\n      var nextOpenState;\n\n      if (!_this.props.closeOnSelect) {\n        (_a = _this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();\n\n        _this.selectText();\n\n        nextOpenState = true;\n      } else {\n        (_b = _this.inputElement) === null || _b === void 0 ? void 0 : _b.blur();\n        nextOpenState = false;\n      } // the internal state should only change when uncontrolled.\n\n\n      if (_this.props.selectedItem === undefined) {\n        _this.setState({\n          isOpen: nextOpenState,\n          selectedItem: item\n        });\n      } else {\n        // otherwise just set the next open state.\n        _this.setState({\n          isOpen: nextOpenState\n        });\n      }\n\n      (_d = (_c = _this.props).onItemSelect) === null || _d === void 0 ? void 0 : _d.call(_c, item, event);\n    }; // Popover interaction kind is CLICK, so this only handles click events.\n    // Note that we defer to the next animation frame in order to get the latest document.activeElement\n\n\n    _this.handlePopoverInteraction = function (nextOpenState, event) {\n      return _this.requestAnimationFrame(function () {\n        var _a, _b;\n\n        var isInputFocused = _this.inputElement === document.activeElement;\n\n        if (_this.inputElement != null && !isInputFocused) {\n          // the input is no longer focused, we should close the popover\n          _this.setState({\n            isOpen: false\n          });\n        }\n\n        (_b = (_a = _this.props.popoverProps) === null || _a === void 0 ? void 0 : _a.onInteraction) === null || _b === void 0 ? void 0 : _b.call(_a, nextOpenState, event);\n      });\n    };\n\n    _this.handlePopoverOpening = function (node) {\n      var _a, _b; // reset query before opening instead of when closing to prevent flash of unfiltered items.\n      // this is a limitation of the interactions between QueryList state and Popover transitions.\n\n\n      if (_this.props.resetOnClose && _this.queryList) {\n        _this.queryList.setQuery(\"\", true);\n      }\n\n      (_b = (_a = _this.props.popoverProps) === null || _a === void 0 ? void 0 : _a.onOpening) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      var _a, _b; // scroll active item into view after popover transition completes and all dimensions are stable.\n\n\n      if (_this.queryList != null) {\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      (_b = (_a = _this.props.popoverProps) === null || _a === void 0 ? void 0 : _a.onOpened) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n\n    _this.getTargetKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (evt) {\n        var _a, _b, _c; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        // eslint-disable-next-line deprecation/deprecation\n\n\n        var which = evt.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          (_a = _this.inputElement) === null || _a === void 0 ? void 0 : _a.blur();\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (_this.props.openOnKeyDown && which !== Keys.BACKSPACE && which !== Keys.ARROW_LEFT && which !== Keys.ARROW_RIGHT) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        if (_this.state.isOpen) {\n          handleQueryListKeyDown === null || handleQueryListKeyDown === void 0 ? void 0 : handleQueryListKeyDown(evt);\n        }\n\n        (_c = (_b = _this.props.inputProps) === null || _b === void 0 ? void 0 : _b.onKeyDown) === null || _c === void 0 ? void 0 : _c.call(_b, evt);\n      };\n    };\n\n    _this.getTargetKeyUpHandler = function (handleQueryListKeyUp) {\n      return function (evt) {\n        var _a, _b;\n\n        if (_this.state.isOpen) {\n          handleQueryListKeyUp === null || handleQueryListKeyUp === void 0 ? void 0 : handleQueryListKeyUp(evt);\n        }\n\n        (_b = (_a = _this.props.inputProps) === null || _a === void 0 ? void 0 : _a.onKeyUp) === null || _b === void 0 ? void 0 : _b.call(_a, evt);\n      };\n    };\n\n    return _this;\n  }\n\n  Suggest.ofType = function () {\n    return Suggest;\n  };\n\n  Suggest.prototype.render = function () {\n    var _a; // omit props specific to this component, spread the rest.\n\n\n    var _b = this.props,\n        disabled = _b.disabled,\n        inputProps = _b.inputProps,\n        popoverProps = _b.popoverProps,\n        restProps = __rest(_b, [\"disabled\", \"inputProps\", \"popoverProps\"]);\n\n    return React.createElement(this.TypedQueryList, __assign({}, restProps, {\n      initialActiveItem: (_a = this.props.selectedItem) !== null && _a !== void 0 ? _a : undefined,\n      onItemSelect: this.handleItemSelect,\n      ref: this.handleQueryListRef,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Suggest.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    if (((_a = prevProps.inputProps) === null || _a === void 0 ? void 0 : _a.inputRef) !== ((_b = this.props.inputProps) === null || _b === void 0 ? void 0 : _b.inputRef)) {\n      setRef((_c = prevProps.inputProps) === null || _c === void 0 ? void 0 : _c.inputRef, null);\n      this.handleInputRef = refHandler(this, \"inputElement\", (_d = this.props.inputProps) === null || _d === void 0 ? void 0 : _d.inputRef);\n      setRef((_e = this.props.inputProps) === null || _e === void 0 ? void 0 : _e.inputRef, this.inputElement);\n    } // If the selected item prop changes, update the underlying state.\n\n\n    if (this.props.selectedItem !== undefined && this.props.selectedItem !== this.state.selectedItem) {\n      this.setState({\n        selectedItem: this.props.selectedItem\n      });\n    }\n\n    if (this.state.isOpen === false && prevState.isOpen === true) {\n      // just closed, likely by keyboard interaction\n      // wait until the transition ends so there isn't a flash of content in the popover\n\n      /* eslint-disable-next-line deprecation/deprecation */\n      var timeout = (_g = (_f = this.props.popoverProps) === null || _f === void 0 ? void 0 : _f.transitionDuration) !== null && _g !== void 0 ? _g : Popover.defaultProps.transitionDuration;\n      setTimeout(function () {\n        return _this.maybeResetActiveItemToSelectedItem();\n      }, timeout);\n    }\n\n    if (this.state.isOpen && !prevState.isOpen && this.queryList != null) {\n      this.queryList.scrollActiveItemIntoView();\n    }\n  };\n\n  Suggest.prototype.getInitialSelectedItem = function () {\n    // controlled > uncontrolled > default\n    if (this.props.selectedItem !== undefined) {\n      return this.props.selectedItem;\n    } else if (this.props.defaultSelectedItem !== undefined) {\n      return this.props.defaultSelectedItem;\n    } else {\n      return null;\n    }\n  };\n\n  Suggest.prototype.maybeResetActiveItemToSelectedItem = function () {\n    var _a;\n\n    var shouldResetActiveItemToSelectedItem = this.props.activeItem === undefined && this.state.selectedItem !== null && !this.props.resetOnSelect;\n\n    if (this.queryList !== null && shouldResetActiveItemToSelectedItem) {\n      this.queryList.setActiveItem((_a = this.props.selectedItem) !== null && _a !== void 0 ? _a : this.state.selectedItem);\n    }\n  };\n\n  Suggest.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Suggest\");\n  Suggest.defaultProps = {\n    closeOnSelect: true,\n    fill: false,\n    openOnKeyDown: false,\n    resetOnClose: false\n  };\n  return Suggest;\n}(AbstractPureComponent2);\n\nexport { Suggest };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","DISPLAYNAME_PREFIX","InputGroup","Keys","Popover","PopoverInteractionKind","Position","refHandler","setRef","Classes","QueryList","__extends","_this","isOpen","props","popoverProps","selectedItem","getInitialSelectedItem","ofType","inputProps","_a","inputRef","ref","queryList","listProps","fill","_b","_c","state","handleKeyUp","_e","_f","placeholder","selectedItemText","inputValueRenderer","inputPlaceholder","inputValue","query","resetOnClose","__assign","autoFocus","enforceFocus","position","BOTTOM_LEFT","className","interactionKind","CLICK","onInteraction","handlePopoverInteraction","popoverClassName","SELECT_POPOVER","onOpening","handlePopoverOpening","onOpened","handlePopoverOpened","autoComplete","disabled","handleInputRef","onChange","handleQueryChange","onFocus","handleInputFocus","onKeyDown","getTargetKeyDownHandler","handleKeyDown","onKeyUp","getTargetKeyUpHandler","value","itemList","requestAnimationFrame","inputElement","setSelectionRange","length","event","selectText","openOnKeyDown","setState","item","nextOpenState","closeOnSelect","focus","blur","undefined","onItemSelect","_d","isInputFocused","document","activeElement","node","setQuery","scrollActiveItemIntoView","handleQueryListKeyDown","evt","which","ESCAPE","TAB","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","handleQueryListKeyUp","Suggest","restProps","TypedQueryList","initialActiveItem","handleItemSelect","handleQueryListRef","renderer","renderQueryList","prevProps","prevState","timeout","transitionDuration","_g","defaultProps","setTimeout","maybeResetActiveItemToSelectedItem","defaultSelectedItem","shouldResetActiveItemToSelectedItem","activeItem","resetOnSelect","setActiveItem"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/select/src/components/select/suggest.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    DISPLAYNAME_PREFIX,\n    InputGroupProps2,\n    InputGroup,\n    IPopoverProps,\n    IRef,\n    Keys,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n    refHandler,\n    setRef,\n} from \"@blueprintjs/core\";\n\nimport { Classes, IListItemsProps } from \"../../common\";\nimport { IQueryListRendererProps, QueryList } from \"../query-list/queryList\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type SuggestProps<T> = ISuggestProps<T>;\n/** @deprecated use SuggestProps */\nexport interface ISuggestProps<T> extends IListItemsProps<T> {\n    /**\n     * Whether the popover should close after selecting an item.\n     *\n     * @default true\n     */\n    closeOnSelect?: boolean;\n\n    /** Whether the input field should be disabled. */\n    disabled?: boolean;\n\n    /**\n     * Whether the component should take up the full width of its container.\n     * This overrides `popoverProps.fill` and `inputProps.fill`.\n     */\n    fill?: boolean;\n\n    /**\n     * Props to spread to the query `InputGroup`. To control this input, use\n     * `query` and `onQueryChange` instead of `inputProps.value` and\n     * `inputProps.onChange`.\n     */\n    inputProps?: InputGroupProps2;\n\n    /** Custom renderer to transform an item into a string for the input value. */\n    inputValueRenderer: (item: T) => string;\n\n    /**\n     * The uncontrolled default selected item.\n     * This prop is ignored if `selectedItem` is used to control the state.\n     */\n    defaultSelectedItem?: T;\n\n    /**\n     * The currently selected item, or `null` to indicate that no item is selected.\n     * If omitted or `undefined`, this prop will be uncontrolled (managed by the component's state).\n     * Use `onItemSelect` to listen for updates.\n     */\n    selectedItem?: T | null;\n\n    /**\n     * If true, the component waits until a keydown event in the TagInput\n     * before opening its popover.\n     *\n     * If false, the popover opens immediately after a mouse click or TAB key\n     * interaction focuses the component's TagInput.\n     *\n     * @default false\n     */\n    openOnKeyDown?: boolean;\n\n    /** Props to spread to `Popover`. Note that `content` cannot be changed. */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    popoverProps?: Partial<IPopoverProps> & object;\n\n    /**\n     * Whether the active item should be reset to the first matching item _when\n     * the popover closes_. The query will also be reset to the empty string.\n     *\n     * @default false\n     */\n    resetOnClose?: boolean;\n}\n\nexport interface ISuggestState<T> {\n    isOpen: boolean;\n    selectedItem: T | null;\n}\n\nexport class Suggest<T> extends AbstractPureComponent2<SuggestProps<T>, ISuggestState<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Suggest`;\n\n    public static defaultProps: Partial<SuggestProps<any>> = {\n        closeOnSelect: true,\n        fill: false,\n        openOnKeyDown: false,\n        resetOnClose: false,\n    };\n\n    public static ofType<U>() {\n        return Suggest as new (props: SuggestProps<U>) => Suggest<U>;\n    }\n\n    public state: ISuggestState<T> = {\n        isOpen: (this.props.popoverProps != null && this.props.popoverProps.isOpen) || false,\n        selectedItem: this.getInitialSelectedItem(),\n    };\n\n    private TypedQueryList = QueryList.ofType<T>();\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private queryList: QueryList<T> | null = null;\n\n    private handleInputRef: IRef<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputProps?.inputRef);\n\n    private handleQueryListRef = (ref: QueryList<T> | null) => (this.queryList = ref);\n\n    public render() {\n        // omit props specific to this component, spread the rest.\n        const { disabled, inputProps, popoverProps, ...restProps } = this.props;\n        return (\n            <this.TypedQueryList\n                {...restProps}\n                initialActiveItem={this.props.selectedItem ?? undefined}\n                onItemSelect={this.handleItemSelect}\n                ref={this.handleQueryListRef}\n                renderer={this.renderQueryList}\n            />\n        );\n    }\n\n    public componentDidUpdate(prevProps: SuggestProps<T>, prevState: ISuggestState<T>) {\n        if (prevProps.inputProps?.inputRef !== this.props.inputProps?.inputRef) {\n            setRef(prevProps.inputProps?.inputRef, null);\n            this.handleInputRef = refHandler(this, \"inputElement\", this.props.inputProps?.inputRef);\n            setRef(this.props.inputProps?.inputRef, this.inputElement);\n        }\n\n        // If the selected item prop changes, update the underlying state.\n        if (this.props.selectedItem !== undefined && this.props.selectedItem !== this.state.selectedItem) {\n            this.setState({ selectedItem: this.props.selectedItem });\n        }\n\n        if (this.state.isOpen === false && prevState.isOpen === true) {\n            // just closed, likely by keyboard interaction\n            // wait until the transition ends so there isn't a flash of content in the popover\n            /* eslint-disable-next-line deprecation/deprecation */\n            const timeout = this.props.popoverProps?.transitionDuration ?? Popover.defaultProps.transitionDuration;\n            setTimeout(() => this.maybeResetActiveItemToSelectedItem(), timeout);\n        }\n\n        if (this.state.isOpen && !prevState.isOpen && this.queryList != null) {\n            this.queryList.scrollActiveItemIntoView();\n        }\n    }\n\n    private renderQueryList = (listProps: IQueryListRendererProps<T>) => {\n        const { fill, inputProps = {}, popoverProps = {} } = this.props;\n        const { isOpen, selectedItem } = this.state;\n        const { handleKeyDown, handleKeyUp } = listProps;\n        const { autoComplete = \"off\", placeholder = \"Search...\" } = inputProps;\n\n        const selectedItemText = selectedItem ? this.props.inputValueRenderer(selectedItem) : \"\";\n        // placeholder shows selected item while open.\n        const inputPlaceholder = isOpen && selectedItemText ? selectedItemText : placeholder;\n        // value shows query when open, and query remains when closed if nothing is selected.\n        // if resetOnClose is enabled, then hide query when not open. (see handlePopoverOpening)\n        const inputValue = isOpen\n            ? listProps.query\n            : selectedItemText || (this.props.resetOnClose ? \"\" : listProps.query);\n\n        if (fill) {\n            popoverProps.fill = true;\n            inputProps.fill = true;\n        }\n\n        return (\n            /* eslint-disable-next-line deprecation/deprecation */\n            <Popover\n                autoFocus={false}\n                enforceFocus={false}\n                isOpen={isOpen}\n                position={Position.BOTTOM_LEFT}\n                {...popoverProps}\n                className={classNames(listProps.className, popoverProps.className)}\n                interactionKind={PopoverInteractionKind.CLICK}\n                onInteraction={this.handlePopoverInteraction}\n                popoverClassName={classNames(Classes.SELECT_POPOVER, popoverProps.popoverClassName)}\n                onOpening={this.handlePopoverOpening}\n                onOpened={this.handlePopoverOpened}\n            >\n                <InputGroup\n                    autoComplete={autoComplete}\n                    disabled={this.props.disabled}\n                    {...inputProps}\n                    inputRef={this.handleInputRef}\n                    onChange={listProps.handleQueryChange}\n                    onFocus={this.handleInputFocus}\n                    onKeyDown={this.getTargetKeyDownHandler(handleKeyDown)}\n                    onKeyUp={this.getTargetKeyUpHandler(handleKeyUp)}\n                    placeholder={inputPlaceholder}\n                    value={inputValue}\n                />\n                <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n                    {listProps.itemList}\n                </div>\n                {/* eslint-disable-next-line deprecation/deprecation */}\n            </Popover>\n        );\n    };\n\n    private selectText = () => {\n        // wait until the input is properly focused to select the text inside of it\n        this.requestAnimationFrame(() => {\n            this.inputElement?.setSelectionRange(0, this.inputElement.value.length);\n        });\n    };\n\n    private handleInputFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n        this.selectText();\n\n        // TODO can we leverage Popover.openOnTargetFocus for this?\n        if (!this.props.openOnKeyDown) {\n            this.setState({ isOpen: true });\n        }\n\n        this.props.inputProps?.onFocus?.(event);\n    };\n\n    private handleItemSelect = (item: T, event?: React.SyntheticEvent<HTMLElement>) => {\n        let nextOpenState: boolean;\n\n        if (!this.props.closeOnSelect) {\n            this.inputElement?.focus();\n            this.selectText();\n            nextOpenState = true;\n        } else {\n            this.inputElement?.blur();\n            nextOpenState = false;\n        }\n\n        // the internal state should only change when uncontrolled.\n        if (this.props.selectedItem === undefined) {\n            this.setState({\n                isOpen: nextOpenState,\n                selectedItem: item,\n            });\n        } else {\n            // otherwise just set the next open state.\n            this.setState({ isOpen: nextOpenState });\n        }\n\n        this.props.onItemSelect?.(item, event);\n    };\n\n    private getInitialSelectedItem(): T | null {\n        // controlled > uncontrolled > default\n        if (this.props.selectedItem !== undefined) {\n            return this.props.selectedItem;\n        } else if (this.props.defaultSelectedItem !== undefined) {\n            return this.props.defaultSelectedItem;\n        } else {\n            return null;\n        }\n    }\n\n    // Popover interaction kind is CLICK, so this only handles click events.\n    // Note that we defer to the next animation frame in order to get the latest document.activeElement\n    private handlePopoverInteraction = (nextOpenState: boolean, event?: React.SyntheticEvent<HTMLElement>) =>\n        this.requestAnimationFrame(() => {\n            const isInputFocused = this.inputElement === document.activeElement;\n\n            if (this.inputElement != null && !isInputFocused) {\n                // the input is no longer focused, we should close the popover\n                this.setState({ isOpen: false });\n            }\n            this.props.popoverProps?.onInteraction?.(nextOpenState, event);\n        });\n\n    private handlePopoverOpening = (node: HTMLElement) => {\n        // reset query before opening instead of when closing to prevent flash of unfiltered items.\n        // this is a limitation of the interactions between QueryList state and Popover transitions.\n        if (this.props.resetOnClose && this.queryList) {\n            this.queryList.setQuery(\"\", true);\n        }\n        this.props.popoverProps?.onOpening?.(node);\n    };\n\n    private handlePopoverOpened = (node: HTMLElement) => {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        if (this.queryList != null) {\n            this.queryList.scrollActiveItemIntoView();\n        }\n        this.props.popoverProps?.onOpened?.(node);\n    };\n\n    private getTargetKeyDownHandler = (\n        handleQueryListKeyDown: React.EventHandler<React.KeyboardEvent<HTMLElement>>,\n    ) => {\n        return (evt: React.KeyboardEvent<HTMLInputElement>) => {\n            // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n            // eslint-disable-next-line deprecation/deprecation\n            const { which } = evt;\n\n            if (which === Keys.ESCAPE || which === Keys.TAB) {\n                this.inputElement?.blur();\n                this.setState({ isOpen: false });\n            } else if (\n                this.props.openOnKeyDown &&\n                which !== Keys.BACKSPACE &&\n                which !== Keys.ARROW_LEFT &&\n                which !== Keys.ARROW_RIGHT\n            ) {\n                this.setState({ isOpen: true });\n            }\n\n            if (this.state.isOpen) {\n                handleQueryListKeyDown?.(evt);\n            }\n\n            this.props.inputProps?.onKeyDown?.(evt);\n        };\n    };\n\n    private getTargetKeyUpHandler = (handleQueryListKeyUp: React.EventHandler<React.KeyboardEvent<HTMLElement>>) => {\n        return (evt: React.KeyboardEvent<HTMLInputElement>) => {\n            if (this.state.isOpen) {\n                handleQueryListKeyUp?.(evt);\n            }\n            this.props.inputProps?.onKeyUp?.(evt);\n        };\n    };\n\n    private maybeResetActiveItemToSelectedItem() {\n        const shouldResetActiveItemToSelectedItem =\n            this.props.activeItem === undefined && this.state.selectedItem !== null && !this.props.resetOnSelect;\n\n        if (this.queryList !== null && shouldResetActiveItemToSelectedItem) {\n            this.queryList.setActiveItem(this.props.selectedItem ?? this.state.selectedItem);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}