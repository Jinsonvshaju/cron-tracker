{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/crondetails/crondetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport FileUpload from \"../fileUpload/FileUpload.jsx\";\nimport { API } from \"../util/api/Api.js\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction CronDetails(props) {\n  _s();\n\n  const [records, setRecords] = useState([]);\n  const [isFileUploaded, setFileUploaded] = useState(false);\n  const [cronMessage, setCronMessage] = useState(\"Validate Cron\");\n  const [cron, setCron] = useState(\"\");\n  useEffect(() => {\n    getEntries();\n    console.log(\"Cron Input form page reloaded\"); //eslint-disable-next-line\n  }, [isFileUploaded]);\n\n  const getEntries = () => {\n    return new Promise(resolve => {\n      api.getRecords().then(res => {\n        setRecords(res.data.message);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const setCronInfo = cron => {\n    return new Promise(resolve => {\n      api.getCronInfo(cron).then(res => {\n        setCronMessage(res.data.message);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const handleCronChange = event => {\n    const value = event.target.value;\n\n    if (value.trim().length > 0) {\n      setCronInfo(value);\n    } else setCronMessage(\"Validate Cron\");\n\n    setCron(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n      uploadFlag: {\n        set: setFileUploaded,\n        get: isFileUploaded\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), records.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped table-hover\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(records[0]).map(element => {\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                children: element\n              }, element, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 26\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), records.map((val, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(val).map(value => {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: value\n                }, Math.random(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 30\n                }, this);\n              })\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed-bottom\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-floating\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          className: \"form-control is-invalid\",\n          id: \"floatingInputInvalid\",\n          onChange: handleCronChange,\n          value: cron\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"floatingInputInvalid\",\n          style: \"font-size:15px;\",\n          children: cronMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CronDetails, \"33R4O/uflSm+M81gpaZCTqp2KY0=\");\n\n_c = CronDetails;\nexport default CronDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CronDetails\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/crondetails/crondetails.jsx"],"names":["React","useState","useEffect","FileUpload","API","api","CronDetails","props","records","setRecords","isFileUploaded","setFileUploaded","cronMessage","setCronMessage","cron","setCron","getEntries","console","log","Promise","resolve","getRecords","then","res","data","message","catch","err","setCronInfo","getCronInfo","handleCronChange","event","value","target","trim","length","set","get","Object","keys","map","element","val","key","values","Math","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport FileUpload from \"../fileUpload/FileUpload.jsx\";\nimport { API } from \"../util/api/Api.js\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nlet api = new API();\n\nfunction CronDetails(props) {\n  const [records, setRecords] = useState([]);\n  const [isFileUploaded, setFileUploaded] = useState(false);\n  const [cronMessage, setCronMessage] = useState(\"Validate Cron\");\n  const [cron, setCron] = useState(\"\");\n\n  useEffect(() => {\n    getEntries();\n    console.log(\"Cron Input form page reloaded\");\n    //eslint-disable-next-line\n  }, [isFileUploaded]);\n\n  const getEntries = () => {\n    return new Promise((resolve) => {\n      api\n        .getRecords()\n        .then((res) => {\n          setRecords(res.data.message);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const setCronInfo = (cron) => {\n    return new Promise((resolve) => {\n      api\n        .getCronInfo(cron)\n        .then((res) => {\n          setCronMessage(res.data.message);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const handleCronChange = (event) => {\n    const value = event.target.value;\n    if (value.trim().length > 0) {\n      setCronInfo(value);\n    } else setCronMessage(\"Validate Cron\");\n    setCron(value);\n  };\n\n  return (\n    <div>\n      <FileUpload uploadFlag={{ set: setFileUploaded, get: isFileUploaded }} />\n      {records.length > 0 ? (\n        <div>\n          <table className=\"table table-striped table-hover\">\n            <tbody>\n              <tr>\n                {Object.keys(records[0]).map((element) => {\n                  return <th key={element}>{element}</th>;\n                })}\n              </tr>\n              {records.map((val, key) => {\n                return (\n                  <tr key={key}>\n                    {Object.values(val).map((value) => {\n                      return <td key={Math.random()}>{value}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <div className=\"fixed-bottom\">\n        <form className=\"form-floating\">\n          <input\n            type=\"email\"\n            className=\"form-control is-invalid\"\n            id=\"floatingInputInvalid\"\n            onChange={handleCronChange}\n            value={cron}\n          />\n          <label htmlFor=\"floatingInputInvalid\" style=\"font-size:15px;\">{cronMessage}</label>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default CronDetails;\n"]},"metadata":{},"sourceType":"module"}