{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\"; // HACKHACK: these components should go in separate files\n\n/* eslint-disable max-classes-per-file */\n\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton } from \"./abstractButton\";\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n\n\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n\n  Button.prototype.render = function () {\n    return React.createElement(\"button\", __assign({\n      type: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), this.getCommonButtonProps()), this.renderChildren());\n  };\n\n  Button.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n\n  Button.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Button\");\n  return Button;\n}(AbstractButton);\n\nexport { Button };\n\nvar AnchorButton =\n/** @class */\nfunction (_super) {\n  __extends(AnchorButton, _super);\n\n  function AnchorButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n\n\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n\n  AnchorButton.prototype.render = function () {\n    var _a = this.props,\n        href = _a.href,\n        _b = _a.tabIndex,\n        tabIndex = _b === void 0 ? 0 : _b;\n    var commonProps = this.getCommonButtonProps();\n    return React.createElement(\"a\", __assign({\n      role: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), commonProps, {\n      href: commonProps.disabled ? undefined : href,\n      tabIndex: commonProps.disabled ? -1 : tabIndex\n    }), this.renderChildren());\n  };\n\n  AnchorButton.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n\n  AnchorButton.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".AnchorButton\");\n  return AnchorButton;\n}(AbstractButton);\n\nexport { AnchorButton };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;6CAgBA;;AACA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,oBAAvD;AACA,SAAeC,UAAf,EAA2BC,MAA3B,QAAyC,mBAAzC;AACA,SAASC,cAAT,QAAiG,kBAAjG;;AAKA;AAAA;AAAA;AAA4BC;;AAA5B;AAAA,0EAGI;;;AACOC,sBAAsC,IAAtC;AAEGA,sBAAqCJ,UAAU,CAACI,KAAD,EAAO,WAAP,EAAoBA,KAAI,CAACC,KAAL,CAAWC,UAA/B,CAA/C;;AAsBb;;AApBUC,4BAAP;AACI,WACIV;AACIW,UAAI,EAAC,QADT;AAEIC,SAAG,EAAE,KAAKC;AAFd,OAGQX,kBAAkB,CAAC,KAAKM,KAAN,CAH1B,EAIQ,KAAKM,oBAAL,EAJR,GAMK,KAAKC,cAAL,EANL,CADJ;AAUH,GAXM;;AAaAL,wCAAP,UAA0BM,SAA1B,EAAgD;AAC5C,QAAIA,SAAS,CAACP,UAAV,KAAyB,KAAKD,KAAL,CAAWC,UAAxC,EAAoD;AAChDL,YAAM,CAACY,SAAS,CAACP,UAAX,EAAuB,IAAvB,CAAN;AACA,WAAKI,SAAL,GAAiBV,UAAU,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAKK,KAAL,CAAWC,UAA/B,CAA3B;AACAL,YAAM,CAAC,KAAKI,KAAL,CAAWC,UAAZ,EAAwB,KAAKQ,SAA7B,CAAN;AACH;AACJ,GANM;;AApBOP,uBAAc,UAAGT,kBAAH,EAAqB,SAArB,CAAd;AA2BlB;AAAC,CA5BD,CAA4BI,cAA5B;;SAAaK;;AA8Bb;AAAA;AAAA;AAAkCJ;;AAAlC;AAAA,0EAGI;;;AACOC,sBAAsC,IAAtC;AAEGA,sBAAqCJ,UAAU,CAACI,KAAD,EAAO,WAAP,EAAoBA,KAAI,CAACC,KAAL,CAAWC,UAA/B,CAA/C;;AA2Bb;;AAzBUS,kCAAP;AACU,aAAyB,KAAKV,KAA9B;AAAA,QAAEW,IAAI,UAAN;AAAA,QAAQC,gBAAR;AAAA,QAAQC,QAAQ,mBAAG,CAAH,GAAID,EAApB;AACN,QAAME,WAAW,GAAG,KAAKR,oBAAL,EAApB;AAEA,WACId;AACIuB,UAAI,EAAC,QADT;AAEIX,SAAG,EAAE,KAAKC;AAFd,OAGQX,kBAAkB,CAAC,KAAKM,KAAN,CAH1B,EAIQc,WAJR,EAImB;AACfH,UAAI,EAAEG,WAAW,CAACE,QAAZ,GAAuBC,SAAvB,GAAmCN,IAD1B;AAEfE,cAAQ,EAAEC,WAAW,CAACE,QAAZ,GAAuB,CAAC,CAAxB,GAA4BH;AAFvB,KAJnB,GAQK,KAAKN,cAAL,EARL,CADJ;AAYH,GAhBM;;AAkBAG,8CAAP,UAA0BF,SAA1B,EAAsD;AAClD,QAAIA,SAAS,CAACP,UAAV,KAAyB,KAAKD,KAAL,CAAWC,UAAxC,EAAoD;AAChDL,YAAM,CAACY,SAAS,CAACP,UAAX,EAAuB,IAAvB,CAAN;AACA,WAAKI,SAAL,GAAiBV,UAAU,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAKK,KAAL,CAAWC,UAA/B,CAA3B;AACAL,YAAM,CAAC,KAAKI,KAAL,CAAWC,UAAZ,EAAwB,KAAKQ,SAA7B,CAAN;AACH;AACJ,GANM;;AAzBOC,6BAAc,UAAGjB,kBAAH,EAAqB,eAArB,CAAd;AAgClB;AAAC,CAjCD,CAAkCI,cAAlC;;SAAaa","names":["React","DISPLAYNAME_PREFIX","removeNonHTMLProps","refHandler","setRef","AbstractButton","__extends","_this","props","elementRef","Button","type","ref","handleRef","getCommonButtonProps","renderChildren","prevProps","buttonRef","AnchorButton","href","_b","tabIndex","commonProps","role","disabled","undefined"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/button/buttons.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// HACKHACK: these components should go in separate files\n/* eslint-disable max-classes-per-file */\n\nimport * as React from \"react\";\n\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { IRef, refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton, IButtonProps, IAnchorButtonProps, ButtonProps, AnchorButtonProps } from \"./abstractButton\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport { IAnchorButtonProps, IButtonProps, ButtonProps, AnchorButtonProps };\n\nexport class Button extends AbstractButton<HTMLButtonElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Button`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLButtonElement | null = null;\n\n    protected handleRef: IRef<HTMLButtonElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        return (\n            <button\n                type=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...this.getCommonButtonProps()}\n            >\n                {this.renderChildren()}\n            </button>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n\nexport class AnchorButton extends AbstractButton<HTMLAnchorElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.AnchorButton`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLAnchorElement | null = null;\n\n    protected handleRef: IRef<HTMLAnchorElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        const { href, tabIndex = 0 } = this.props;\n        const commonProps = this.getCommonButtonProps();\n\n        return (\n            <a\n                role=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...commonProps}\n                href={commonProps.disabled ? undefined : href}\n                tabIndex={commonProps.disabled ? -1 : tabIndex}\n            >\n                {this.renderChildren()}\n            </a>\n        );\n    }\n\n    public componentDidUpdate(prevProps: AnchorButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}