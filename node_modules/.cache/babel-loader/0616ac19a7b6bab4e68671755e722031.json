{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\n\nexport var AnimationStates;\n\n(function (AnimationStates) {\n  /**\n   * The body is re-rendered, height is set to the measured body height and\n   * the body Y is set to 0.\n   */\n  AnimationStates[AnimationStates[\"OPEN_START\"] = 0] = \"OPEN_START\";\n  /**\n   * Animation begins, height is set to auto. This is all animated, and on\n   * complete, the state changes to OPEN.\n   */\n\n  AnimationStates[AnimationStates[\"OPENING\"] = 1] = \"OPENING\";\n  /**\n   * The collapse height is set to auto, and the body Y is set to 0 (so the\n   * element can be seen as normal).\n   */\n\n  AnimationStates[AnimationStates[\"OPEN\"] = 2] = \"OPEN\";\n  /**\n   * Height has been changed from auto to the measured height of the body to\n   * prepare for the closing animation in CLOSING.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING_START\"] = 3] = \"CLOSING_START\";\n  /**\n   * Height is set to 0 and the body Y is at -height. Both of these properties\n   * are transformed, and then after the animation is complete, the state\n   * changes to CLOSED.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING\"] = 4] = \"CLOSING\";\n  /**\n   * The contents of the collapse is not rendered, the collapse height is 0,\n   * and the body Y is at -height (so that the bottom of the body is at Y=0).\n   */\n\n  AnimationStates[AnimationStates[\"CLOSED\"] = 5] = \"CLOSED\";\n})(AnimationStates || (AnimationStates = {}));\n\nvar Collapse =\n/** @class */\nfunction (_super) {\n  __extends(Collapse, _super);\n\n  function Collapse() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n      height: undefined,\n      heightWhenOpen: undefined\n    }; // The element containing the contents of the collapse.\n\n    _this.contents = null;\n\n    _this.contentsRefHandler = function (el) {\n      _this.contents = el;\n\n      if (_this.contents != null) {\n        var height = _this.contents.clientHeight;\n\n        _this.setState({\n          animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n          height: height === 0 ? undefined : \"\".concat(height, \"px\"),\n          heightWhenOpen: height === 0 ? undefined : height\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  Collapse.getDerivedStateFromProps = function (props, state) {\n    var isOpen = props.isOpen;\n    var animationState = state.animationState;\n\n    if (isOpen) {\n      switch (animationState) {\n        case AnimationStates.OPEN:\n          // no-op\n          break;\n\n        case AnimationStates.OPENING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n\n        default:\n          return {\n            animationState: AnimationStates.OPEN_START\n          };\n      }\n    } else {\n      switch (animationState) {\n        case AnimationStates.CLOSED:\n          // no-op\n          break;\n\n        case AnimationStates.CLOSING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n\n        default:\n          // need to set an explicit height so that transition can work\n          return {\n            animationState: AnimationStates.CLOSING_START,\n            height: \"\".concat(state.heightWhenOpen, \"px\")\n          };\n      }\n    }\n\n    return null;\n  };\n\n  Collapse.prototype.render = function () {\n    var isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n    var shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n    var displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n    var isAutoHeight = this.state.height === \"auto\";\n    var containerStyle = {\n      height: isContentVisible ? this.state.height : undefined,\n      overflowY: isAutoHeight ? \"visible\" : undefined,\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    var contentsStyle = {\n      // only use heightWhenOpen while closing\n      transform: displayWithTransform ? \"translateY(0)\" : \"translateY(-\".concat(this.state.heightWhenOpen, \"px)\"),\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    return React.createElement(this.props.component, {\n      className: classNames(Classes.COLLAPSE, this.props.className),\n      style: containerStyle\n    }, React.createElement(\"div\", {\n      className: Classes.COLLAPSE_BODY,\n      ref: this.contentsRefHandler,\n      style: contentsStyle,\n      \"aria-hidden\": !isContentVisible && this.props.keepChildrenMounted\n    }, shouldRenderChildren ? this.props.children : null));\n  };\n\n  Collapse.prototype.componentDidMount = function () {\n    this.forceUpdate(); // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n\n    /* eslint-disable react/no-did-mount-set-state */\n\n    if (this.props.isOpen) {\n      this.setState({\n        animationState: AnimationStates.OPEN,\n        height: \"auto\"\n      });\n    } else {\n      this.setState({\n        animationState: AnimationStates.CLOSED,\n        height: \"0px\"\n      });\n    }\n    /* eslint-disable react/no-did-mount-set-state */\n\n  };\n\n  Collapse.prototype.componentDidUpdate = function () {\n    var _this = this;\n\n    if (this.contents == null) {\n      return;\n    }\n\n    var transitionDuration = this.props.transitionDuration;\n    var animationState = this.state.animationState;\n\n    if (animationState === AnimationStates.OPEN_START) {\n      var clientHeight = this.contents.clientHeight;\n      this.setState({\n        animationState: AnimationStates.OPENING,\n        height: \"\".concat(clientHeight, \"px\"),\n        heightWhenOpen: clientHeight\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    } else if (animationState === AnimationStates.CLOSING_START) {\n      var clientHeight_1 = this.contents.clientHeight;\n      this.setTimeout(function () {\n        return _this.setState({\n          animationState: AnimationStates.CLOSING,\n          height: \"0px\",\n          heightWhenOpen: clientHeight_1\n        });\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    }\n  };\n\n  Collapse.prototype.onDelayedStateChange = function () {\n    switch (this.state.animationState) {\n      case AnimationStates.OPENING:\n        this.setState({\n          animationState: AnimationStates.OPEN,\n          height: \"auto\"\n        });\n        break;\n\n      case AnimationStates.CLOSING:\n        this.setState({\n          animationState: AnimationStates.CLOSED\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  Collapse.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Collapse\");\n  Collapse.defaultProps = {\n    component: \"div\",\n    isOpen: false,\n    keepChildrenMounted: false,\n    transitionDuration: 200\n  };\n  return Collapse;\n}(AbstractPureComponent2);\n\nexport { Collapse };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","AnimationStates","__extends","_this","animationState","props","isOpen","OPEN","CLOSED","height","undefined","heightWhenOpen","el","contents","clientHeight","setState","Collapse","state","OPENING","OPEN_START","CLOSING","CLOSING_START","isContentVisible","shouldRenderChildren","keepChildrenMounted","displayWithTransform","isAutoHeight","containerStyle","overflowY","transition","contentsStyle","transform","createElement","component","className","COLLAPSE","style","COLLAPSE_BODY","ref","contentsRefHandler","children","forceUpdate","transitionDuration","setTimeout","onDelayedStateChange","clientHeight_1"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/collapse/collapse.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type CollapseProps = ICollapseProps;\n/** @deprecated use CollapseProps */\nexport interface ICollapseProps extends Props {\n    /** Contents to collapse. */\n    children: React.ReactNode;\n\n    /**\n     * Component to render as the root element.\n     * Useful when rendering a `Collapse` inside a `<table>`, for instance.\n     *\n     * @default \"div\"\n     */\n    component?: React.ElementType;\n\n    /**\n     * Whether the component is open or closed.\n     *\n     * @default false\n     */\n    isOpen?: boolean;\n\n    /**\n     * Whether the child components will remain mounted when the `Collapse` is closed.\n     * Setting to true may improve performance by avoiding re-mounting children.\n     *\n     * @default false\n     */\n    keepChildrenMounted?: boolean;\n\n    /**\n     * The length of time the transition takes, in milliseconds. This must match\n     * the duration of the animation in CSS. Only set this prop if you override\n     * Blueprint's default transitions with new transitions of a different\n     * length.\n     *\n     * @default 200\n     */\n    transitionDuration?: number;\n}\n\nexport interface ICollapseState {\n    /** The state the element is currently in. */\n    animationState: AnimationStates;\n\n    /** The height that should be used for the content animations. This is a CSS value, not just a number. */\n    height: string | undefined;\n\n    /**\n     * The most recent non-zero height (once a height has been measured upon first open; it is undefined until then)\n     */\n    heightWhenOpen: number | undefined;\n}\n\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\nexport enum AnimationStates {\n    /**\n     * The body is re-rendered, height is set to the measured body height and\n     * the body Y is set to 0.\n     */\n    OPEN_START,\n\n    /**\n     * Animation begins, height is set to auto. This is all animated, and on\n     * complete, the state changes to OPEN.\n     */\n    OPENING,\n\n    /**\n     * The collapse height is set to auto, and the body Y is set to 0 (so the\n     * element can be seen as normal).\n     */\n    OPEN,\n\n    /**\n     * Height has been changed from auto to the measured height of the body to\n     * prepare for the closing animation in CLOSING.\n     */\n    CLOSING_START,\n\n    /**\n     * Height is set to 0 and the body Y is at -height. Both of these properties\n     * are transformed, and then after the animation is complete, the state\n     * changes to CLOSED.\n     */\n    CLOSING,\n\n    /**\n     * The contents of the collapse is not rendered, the collapse height is 0,\n     * and the body Y is at -height (so that the bottom of the body is at Y=0).\n     */\n    CLOSED,\n}\n\nexport class Collapse extends AbstractPureComponent2<CollapseProps, ICollapseState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Collapse`;\n\n    public static defaultProps: Partial<CollapseProps> = {\n        component: \"div\",\n        isOpen: false,\n        keepChildrenMounted: false,\n        transitionDuration: 200,\n    };\n\n    public static getDerivedStateFromProps(props: CollapseProps, state: ICollapseState) {\n        const { isOpen } = props;\n        const { animationState } = state;\n\n        if (isOpen) {\n            switch (animationState) {\n                case AnimationStates.OPEN:\n                    // no-op\n                    break;\n                case AnimationStates.OPENING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    return { animationState: AnimationStates.OPEN_START };\n            }\n        } else {\n            switch (animationState) {\n                case AnimationStates.CLOSED:\n                    // no-op\n                    break;\n                case AnimationStates.CLOSING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    // need to set an explicit height so that transition can work\n                    return {\n                        animationState: AnimationStates.CLOSING_START,\n                        height: `${state.heightWhenOpen}px`,\n                    };\n            }\n        }\n\n        return null;\n    }\n\n    public state: ICollapseState = {\n        animationState: this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n        height: undefined,\n        heightWhenOpen: undefined,\n    };\n\n    // The element containing the contents of the collapse.\n    private contents: HTMLElement | null = null;\n\n    public render() {\n        const isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n        const shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n        const displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n        const isAutoHeight = this.state.height === \"auto\";\n\n        const containerStyle = {\n            height: isContentVisible ? this.state.height : undefined,\n            overflowY: isAutoHeight ? \"visible\" : undefined,\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n\n        const contentsStyle = {\n            // only use heightWhenOpen while closing\n            transform: displayWithTransform ? \"translateY(0)\" : `translateY(-${this.state.heightWhenOpen}px)`,\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n\n        return React.createElement(\n            this.props.component!,\n            {\n                className: classNames(Classes.COLLAPSE, this.props.className),\n                style: containerStyle,\n            },\n            <div\n                className={Classes.COLLAPSE_BODY}\n                ref={this.contentsRefHandler}\n                style={contentsStyle}\n                aria-hidden={!isContentVisible && this.props.keepChildrenMounted}\n            >\n                {shouldRenderChildren ? this.props.children : null}\n            </div>,\n        );\n    }\n\n    public componentDidMount() {\n        this.forceUpdate();\n        // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n        /* eslint-disable react/no-did-mount-set-state */\n        if (this.props.isOpen) {\n            this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n        } else {\n            this.setState({ animationState: AnimationStates.CLOSED, height: \"0px\" });\n        }\n        /* eslint-disable react/no-did-mount-set-state */\n    }\n\n    public componentDidUpdate() {\n        if (this.contents == null) {\n            return;\n        }\n\n        const { transitionDuration } = this.props;\n        const { animationState } = this.state;\n\n        if (animationState === AnimationStates.OPEN_START) {\n            const { clientHeight } = this.contents;\n            this.setState({\n                animationState: AnimationStates.OPENING,\n                height: `${clientHeight}px`,\n                heightWhenOpen: clientHeight,\n            });\n            this.setTimeout(() => this.onDelayedStateChange(), transitionDuration);\n        } else if (animationState === AnimationStates.CLOSING_START) {\n            const { clientHeight } = this.contents;\n            this.setTimeout(() =>\n                this.setState({\n                    animationState: AnimationStates.CLOSING,\n                    height: \"0px\",\n                    heightWhenOpen: clientHeight,\n                }),\n            );\n            this.setTimeout(() => this.onDelayedStateChange(), transitionDuration);\n        }\n    }\n\n    private contentsRefHandler = (el: HTMLElement | null) => {\n        this.contents = el;\n        if (this.contents != null) {\n            const height = this.contents.clientHeight;\n            this.setState({\n                animationState: this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n                height: height === 0 ? undefined : `${height}px`,\n                heightWhenOpen: height === 0 ? undefined : height,\n            });\n        }\n    };\n\n    private onDelayedStateChange() {\n        switch (this.state.animationState) {\n            case AnimationStates.OPENING:\n                this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n                break;\n            case AnimationStates.CLOSING:\n                this.setState({ animationState: AnimationStates.CLOSED });\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}