{"ast":null,"code":"/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { hasBgRendering, Splitter, createFormatter, createElement, ViewContextType, RenderHook, BaseComponent, createRef, diffDays, buildNavLinkAttrs, WeekNumberRoot, getStickyHeaderDates, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorRoot, renderScrollShim, DateComponent, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkRoot, setRef, SegHierarchy, groupIntersectingEntries, buildEntryKey, binarySearch, getEntrySpanEnd, StandardEvent, DayCellContent, Fragment, getSegMeta, memoize, sortEventSegs, DayCellRoot, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, intersectRanges, Slicer, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nimport { DayTable } from '@fullcalendar/daygrid';\n\nvar AllDaySplitter =\n/** @class */\nfunction (_super) {\n  __extends(AllDaySplitter, _super);\n\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n\n    return ['timed'];\n  };\n\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n\n    return ['allDay'];\n  };\n\n  return AllDaySplitter;\n}(Splitter);\n\nvar DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\n\nfunction TimeColsAxisCell(props) {\n  var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, function (context) {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n\n    var dateEnv = context.dateEnv,\n        options = context.options,\n        viewApi = context.viewApi;\n    var labelFormat = // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    var hookProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.slotLabelClassNames,\n      content: options.slotLabelContent,\n      defaultContent: renderInnerContent,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-time\": props.isoTimeStr\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n        ref: innerElRef\n      }, innerContent)));\n    });\n  });\n}\n\nfunction renderInnerContent(props) {\n  return props.text;\n}\n\nvar TimeBodyAxis =\n/** @class */\nfunction (_super) {\n  __extends(TimeBodyAxis, _super);\n\n  function TimeBodyAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeBodyAxis.prototype.render = function () {\n    return this.props.slatMetas.map(function (slatMeta) {\n      return createElement(\"tr\", {\n        key: slatMeta.key\n      }, createElement(TimeColsAxisCell, __assign({}, slatMeta)));\n    });\n  };\n\n  return TimeBodyAxis;\n}(BaseComponent);\n\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\n\nvar TimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsView, _super);\n\n  function TimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n\n    _this.headerElRef = createRef();\n    _this.rootElRef = createRef();\n    _this.scrollerElRef = createRef();\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleScrollTopRequest = function (scrollTop) {\n      var scrollerEl = _this.scrollerElRef.current;\n\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    _this.renderHeadAxis = function (rowKey, frameHeight) {\n      if (frameHeight === void 0) {\n        frameHeight = '';\n      }\n\n      var options = _this.context.options;\n      var dateProfile = _this.props.dateProfile;\n      var range = dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var navLinkAttrs = dayCnt === 1 // only do in day views (to avoid doing in week views that dont need it)\n      ? buildNavLinkAttrs(_this.context, range.start, 'week') : {};\n\n      if (options.weekNumbers && rowKey === 'day') {\n        return createElement(WeekNumberRoot, {\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"th\", {\n            ref: rootElRef,\n            \"aria-hidden\": true,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n            style: {\n              height: frameHeight\n            }\n          }, createElement(\"a\", __assign({\n            ref: innerElRef,\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n          }, navLinkAttrs), innerContent)));\n        });\n      }\n\n      return createElement(\"th\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n\n\n    _this.renderTableRowAxis = function (rowHeight) {\n      var _a = _this.context,\n          options = _a.options,\n          viewApi = _a.viewApi;\n      var hookProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (// TODO: make reusable hook. used in list view too\n        createElement(RenderHook, {\n          hookProps: hookProps,\n          classNames: options.allDayClassNames,\n          content: options.allDayContent,\n          defaultContent: renderAllDayInner,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"td\", {\n            ref: rootElRef,\n            \"aria-hidden\": true,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: 'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''),\n            style: {\n              height: rowHeight\n            }\n          }, createElement(\"span\", {\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n            ref: innerElRef\n          }, innerContent)));\n        })\n      );\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n    };\n\n    return _this;\n  } // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n\n  TimeColsView.prototype.renderSimpleLayout = function (headerRowContent, allDayContent, timeContent) {\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [{\n          width: 'shrink'\n        }],\n        sections: sections\n      }));\n    });\n  };\n\n  TimeColsView.prototype.renderHScrollLayout = function (headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    var _this = this;\n\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function rowContent(arg) {\n            return createElement(\"tr\", {\n              role: \"presentation\"\n            }, _this.renderHeadAxis('day', arg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function rowContent(contentArg) {\n            return createElement(\"tr\", {\n              role: \"presentation\"\n            }, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    var isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: function content(arg) {\n          return (// TODO: make this now-indicator arrow more DRY with TimeColsContent\n            createElement(\"div\", {\n              className: \"fc-timegrid-axis-chunk\"\n            }, createElement(\"table\", {\n              \"aria-hidden\": true,\n              style: {\n                height: arg.expandRows ? arg.clientHeight : ''\n              }\n            }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n              slatMetas: slatMetas\n            }))), createElement(\"div\", {\n              className: \"fc-timegrid-now-indicator-container\"\n            }, createElement(NowTimer, {\n              unit: isNowIndicator ? 'minute' : 'day'\n              /* hacky */\n\n            }, function (nowDate) {\n              var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n\n              if (typeof nowIndicatorTop === 'number') {\n                return createElement(NowIndicatorRoot, {\n                  isAxis: true,\n                  date: nowDate\n                }, function (rootElRef, classNames, innerElRef, innerContent) {\n                  return createElement(\"div\", {\n                    ref: rootElRef,\n                    className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n                    style: {\n                      top: nowIndicatorTop\n                    }\n                  }, innerContent);\n                });\n              }\n\n              return null;\n            })))\n          );\n        }\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: false,\n        colGroups: [{\n          width: 'shrink',\n          cols: [{\n            width: 'shrink'\n          }]\n        }, {\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeColsView.prototype.getAllDayMaxEventProps = function () {\n    var _a = this.context.options,\n        dayMaxEvents = _a.dayMaxEvents,\n        dayMaxEventRows = _a.dayMaxEventRows;\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n\n    return {\n      dayMaxEvents: dayMaxEvents,\n      dayMaxEventRows: dayMaxEventRows\n    };\n  };\n\n  return TimeColsView;\n}(DateComponent);\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\nvar TimeColsSlatsCoords =\n/** @class */\nfunction () {\n  function TimeColsSlatsCoords(positions, dateProfile, slotDuration) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n\n  TimeColsSlatsCoords.prototype.safeComputeTop = function (date) {\n    var dateProfile = this.dateProfile;\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      var startOfDayDate = startOfDay(date);\n      var timeMs = date.valueOf() - startOfDayDate.valueOf();\n\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n\n    return null;\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n  TimeColsSlatsCoords.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n\n\n  TimeColsSlatsCoords.prototype.computeTimeTop = function (duration) {\n    var _a = this,\n        positions = _a.positions,\n        dateProfile = _a.dateProfile;\n\n    var len = positions.els.length; // floating-point value of # of slots covered\n\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n    var slatIndex;\n    var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  };\n\n  return TimeColsSlatsCoords;\n}();\n\nvar TimeColsSlatsBody =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlatsBody, _super);\n\n  function TimeColsSlatsBody() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColsSlatsBody.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var options = context.options;\n    var slatElRefs = props.slatElRefs;\n    return createElement(\"tbody\", null, props.slatMetas.map(function (slatMeta, i) {\n      var hookProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-lane', slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor'];\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, __assign({}, slatMeta)), createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.slotLaneClassNames,\n        content: options.slotLaneContent,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          className: classNames.concat(customClassNames).join(' '),\n          \"data-time\": slatMeta.isoTimeStr\n        }, innerContent);\n      }));\n    }));\n  };\n\n  return TimeColsSlatsBody;\n}(BaseComponent);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\n\nvar TimeColsSlats =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlats, _super);\n\n  function TimeColsSlats() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    _this.slatElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsSlats.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    return createElement(\"div\", {\n      ref: this.rootElRef,\n      className: \"fc-timegrid-slots\"\n    }, createElement(\"table\", {\n      \"aria-hidden\": true,\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode\n    /* relies on there only being a single <col> for the axis */\n    , createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  };\n\n  TimeColsSlats.prototype.componentDidMount = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentDidUpdate = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentWillUnmount = function () {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  };\n\n  TimeColsSlats.prototype.updateSizing = function () {\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      var rootEl = this.rootElRef.current;\n\n      if (rootEl.offsetHeight) {\n        // not hidden by css\n        props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n      }\n    }\n  };\n\n  return TimeColsSlats;\n}(BaseComponent);\n\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(function (slatMeta) {\n    return elMap[slatMeta.key];\n  });\n}\n\nfunction splitSegsByCol(segs, colCnt) {\n  var segsByCol = [];\n  var i;\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n\n  return segsByCol;\n}\n\nfunction splitInteractionByCol(ui, colCnt) {\n  var byRow = [];\n\n  if (!ui) {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n\n  return byRow;\n}\n\nvar TimeColMoreLink =\n/** @class */\nfunction (_super) {\n  __extends(TimeColMoreLink, _super);\n\n  function TimeColMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    return _this;\n  }\n\n  TimeColMoreLink.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    return createElement(MoreLinkRoot, {\n      allDayDate: null,\n      moreCnt: props.hiddenSegs.length,\n      allSegs: props.hiddenSegs,\n      hiddenSegs: props.hiddenSegs,\n      alignmentElRef: this.rootElRef,\n      defaultContent: renderMoreLinkInner,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      popoverContent: function popoverContent() {\n        return renderPlainFgSegs(props.hiddenSegs, props);\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n      return createElement(\"a\", {\n        ref: function ref(el) {\n          setRef(rootElRef, el);\n          setRef(_this.rootElRef, el);\n        },\n        className: ['fc-timegrid-more-link'].concat(classNames).join(' '),\n        style: {\n          top: props.top,\n          bottom: props.bottom\n        },\n        onClick: handleClick,\n        title: title,\n        \"aria-expanded\": isExpanded,\n        \"aria-controls\": popoverId\n      }, createElement(\"div\", {\n        ref: innerElRef,\n        className: \"fc-timegrid-more-link-inner fc-sticky\"\n      }, innerContent));\n    });\n  };\n\n  return TimeColMoreLink;\n}(BaseComponent);\n\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n} // segInputs assumed sorted\n\n\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  var hierarchy = new SegHierarchy();\n\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var hiddenGroups = groupIntersectingEntries(hiddenEntries);\n  var web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n\n  var segRects = webToRects(web);\n  return {\n    segRects: segRects,\n    hiddenGroups: hiddenGroups\n  };\n}\n\nfunction buildWeb(hierarchy) {\n  var entriesByLevel = hierarchy.entriesByLevel;\n  var buildNode = cacheable(function (level, lateral) {\n    return level + ':' + lateral;\n  }, function (level, lateral) {\n    var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    var nextLevelRes = buildNodes(siblingRange, buildNode);\n    var entry = entriesByLevel[level][lateral];\n    return [__assign(__assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\n\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n\n  var level = siblingRange.level,\n      lateralStart = siblingRange.lateralStart,\n      lateralEnd = siblingRange.lateralEnd;\n  var lateral = lateralStart;\n  var pairs = [];\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\n\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\n\nfunction extractNode(a) {\n  return a[0];\n}\n\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  var levelCoords = hierarchy.levelCoords,\n      entriesByLevel = hierarchy.entriesByLevel;\n  var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  var levelCnt = levelCoords.length;\n  var level = subjectLevel; // skip past levels that are too high up\n\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) {\n    ;\n  } // do nothing\n\n\n  for (; level < levelCnt; level += 1) {\n    var entries = entriesByLevel[level];\n    var entry = void 0;\n    var searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n    var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n\n    var lateralEnd = lateralStart;\n\n    while ( // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) && // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n\n    if (lateralStart < lateralEnd) {\n      return {\n        level: level,\n        lateralStart: lateralStart,\n        lateralEnd: lateralEnd\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  var stretchNode = cacheable(function (node, startCoord, prevThickness) {\n    return buildEntryKey(node);\n  }, function (node, startCoord, prevThickness) {\n    var nextLevelNodes = node.nextLevelNodes,\n        thickness = node.thickness;\n    var allThickness = thickness + prevThickness;\n    var thicknessFraction = thickness / allThickness;\n    var endCoord;\n    var newChildren = [];\n\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      for (var _i = 0, nextLevelNodes_1 = nextLevelNodes; _i < nextLevelNodes_1.length; _i++) {\n        var childNode = nextLevelNodes_1[_i];\n\n        if (endCoord === undefined) {\n          var res = stretchNode(childNode, startCoord, allThickness);\n          endCoord = res[0];\n          newChildren.push(res[1]);\n        } else {\n          var res = stretchNode(childNode, endCoord, 0);\n          newChildren.push(res[1]);\n        }\n      }\n    }\n\n    var newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, __assign(__assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(function (node) {\n    return stretchNode(node, 0, 0)[1];\n  });\n} // not sorted in any particular order\n\n\nfunction webToRects(topLevelNodes) {\n  var rects = [];\n  var processNode = cacheable(function (node, levelCoord, stackDepth) {\n    return buildEntryKey(node);\n  }, function (node, levelCoord, stackDepth) {\n    var rect = __assign(__assign({}, node), {\n      levelCoord: levelCoord,\n      stackDepth: stackDepth,\n      stackForward: 0\n    });\n\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n\n  function processNodes(nodes, levelCoord, stackDepth) {\n    var stackForward = 0;\n\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n    }\n\n    return stackForward;\n  }\n\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n} // TODO: move to general util\n\n\nfunction cacheable(keyFunc, workFunc) {\n  var cache = {};\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var key = keyFunc.apply(void 0, args);\n    return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, args);\n  };\n}\n\nfunction computeSegVCoords(segs, colDate, slatCoords, eventMinHeight) {\n  if (slatCoords === void 0) {\n    slatCoords = null;\n  }\n\n  if (eventMinHeight === void 0) {\n    eventMinHeight = 0;\n  }\n\n  var vcoords = [];\n\n  if (slatCoords) {\n    for (var i = 0; i < segs.length; i += 1) {\n      var seg = segs[i];\n      var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      var spanEnd = Math.max(spanStart + (eventMinHeight || 0), // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n\n      });\n    }\n  }\n\n  return vcoords;\n}\n\nfunction computeFgSegPlacements(segs, segVCoords, // might not have for every seg\neventOrderStrict, eventMaxStack) {\n  var segInputs = [];\n  var dumbSegs = []; // segs without coords\n\n  for (var i = 0; i < segs.length; i += 1) {\n    var vcoords = segVCoords[i];\n\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n\n  var _a = buildPositioning(segInputs, eventOrderStrict, eventMaxStack),\n      segRects = _a.segRects,\n      hiddenGroups = _a.hiddenGroups;\n\n  var segPlacements = [];\n\n  for (var _i = 0, segRects_1 = segRects; _i < segRects_1.length; _i++) {\n    var segRect = segRects_1[_i];\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect\n    });\n  }\n\n  for (var _b = 0, dumbSegs_1 = dumbSegs; _b < dumbSegs_1.length; _b++) {\n    var dumbSeg = dumbSegs_1[_b];\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n\n  return {\n    segPlacements: segPlacements,\n    hiddenGroups: hiddenGroups\n  };\n}\n\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\n\nvar TimeColEvent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColEvent, _super);\n\n  function TimeColEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColEvent.prototype.render = function () {\n    var classNames = ['fc-timegrid-event', 'fc-v-event'];\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short');\n    }\n\n    return createElement(StandardEvent, __assign({}, this.props, {\n      defaultTimeFormat: DEFAULT_TIME_FORMAT,\n      extraClassNames: classNames\n    }));\n  };\n\n  return TimeColEvent;\n}(BaseComponent);\n\nvar TimeColMisc =\n/** @class */\nfunction (_super) {\n  __extends(TimeColMisc, _super);\n\n  function TimeColMisc() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColMisc.prototype.render = function () {\n    var props = this.props;\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (innerElRef, innerContent) {\n      return innerContent && createElement(\"div\", {\n        className: \"fc-timegrid-col-misc\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n\n  return TimeColMisc;\n}(BaseComponent);\n\nvar TimeCol =\n/** @class */\nfunction (_super) {\n  __extends(TimeCol, _super);\n\n  function TimeCol() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.sortEventSegs = memoize(sortEventSegs);\n    return _this;\n  } // TODO: memoize event-placement?\n\n\n  TimeCol.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var isSelectMirror = context.options.selectMirror;\n    var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    var interactionAffectedInstances = // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder);\n    return createElement(DayCellRoot, {\n      elRef: props.elRef,\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (rootElRef, classNames, dataAttrs) {\n      return createElement(\"td\", __assign({\n        ref: rootElRef,\n        role: \"gridcell\",\n        className: ['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')\n      }, dataAttrs, props.extraDataAttrs), createElement(\"div\", {\n        className: \"fc-timegrid-col-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-col-bg\"\n      }, _this.renderFillSegs(props.businessHourSegs, 'non-business'), _this.renderFillSegs(props.bgEventSegs, 'bg-event'), _this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), createElement(\"div\", {\n        className: \"fc-timegrid-now-indicator-container\"\n      }, _this.renderNowIndicator(props.nowIndicatorSegs)), createElement(TimeColMisc, {\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      })));\n    });\n  };\n\n  TimeCol.prototype.renderFgSegs = function (sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var props = this.props;\n\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props);\n    }\n\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n  };\n\n  TimeCol.prototype.renderPositionedFgSegs = function (segs, // if not mirror, needs to be sorted\n  segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var _this = this;\n\n    var _a = this.context.options,\n        eventMaxStack = _a.eventMaxStack,\n        eventShortHeight = _a.eventShortHeight,\n        eventOrderStrict = _a.eventOrderStrict,\n        eventMinHeight = _a.eventMinHeight;\n    var _b = this.props,\n        date = _b.date,\n        slatCoords = _b.slatCoords,\n        eventSelection = _b.eventSelection,\n        todayRange = _b.todayRange,\n        nowDate = _b.nowDate;\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n\n    var _c = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack),\n        segPlacements = _c.segPlacements,\n        hiddenGroups = _c.hiddenGroups;\n\n    return createElement(Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function (segPlacement) {\n      var seg = segPlacement.seg,\n          rect = segPlacement.rect;\n      var instanceId = seg.eventRange.instance.instanceId;\n      var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n      var vStyle = computeSegVStyle(rect && rect.span);\n      var hStyle = !isMirror && rect ? _this.computeSegHStyle(rect) : {\n        left: 0,\n        right: 0\n      };\n      var isInset = Boolean(rect) && rect.stackForward > 0;\n      var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n        key: instanceId,\n        style: __assign(__assign({\n          visibility: isVisible ? '' : 'hidden'\n        }, vStyle), hStyle)\n      }, createElement(TimeColEvent, __assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === eventSelection,\n        isShort: isShort\n      }, getSegMeta(seg, todayRange, nowDate))));\n    }));\n  }; // will already have eventMinHeight applied because segInputs already had it\n\n\n  TimeCol.prototype.renderHiddenGroups = function (hiddenGroups, segs) {\n    var _a = this.props,\n        extraDateSpan = _a.extraDateSpan,\n        dateProfile = _a.dateProfile,\n        todayRange = _a.todayRange,\n        nowDate = _a.nowDate,\n        eventSelection = _a.eventSelection,\n        eventDrag = _a.eventDrag,\n        eventResize = _a.eventResize;\n    return createElement(Fragment, null, hiddenGroups.map(function (hiddenGroup) {\n      var positionCss = computeSegVStyle(hiddenGroup.span);\n      var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n      return createElement(TimeColMoreLink, {\n        key: buildIsoString(computeEarliestSegStart(hiddenSegs)),\n        hiddenSegs: hiddenSegs,\n        top: positionCss.top,\n        bottom: positionCss.bottom,\n        extraDateSpan: extraDateSpan,\n        dateProfile: dateProfile,\n        todayRange: todayRange,\n        nowDate: nowDate,\n        eventSelection: eventSelection,\n        eventDrag: eventDrag,\n        eventResize: eventResize\n      });\n    }));\n  };\n\n  TimeCol.prototype.renderFillSegs = function (segs, fillType) {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n\n    var children = segVCoords.map(function (vcoords, i) {\n      var seg = segs[i];\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: computeSegVStyle(vcoords)\n      }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  };\n\n  TimeCol.prototype.renderNowIndicator = function (segs) {\n    var _a = this.props,\n        slatCoords = _a.slatCoords,\n        date = _a.date;\n\n    if (!slatCoords) {\n      return null;\n    }\n\n    return segs.map(function (seg, i) {\n      return createElement(NowIndicatorRoot, {\n        isAxis: false,\n        date: date,\n        // key doesn't matter. will only ever be one\n        key: i\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"div\", {\n          ref: rootElRef,\n          className: ['fc-timegrid-now-indicator-line'].concat(classNames).join(' '),\n          style: {\n            top: slatCoords.computeDateTop(seg.start, date)\n          }\n        }, innerContent);\n      });\n    });\n  };\n\n  TimeCol.prototype.computeSegHStyle = function (segHCoords) {\n    var _a = this.context,\n        isRtl = _a.isRtl,\n        options = _a.options;\n    var shouldOverlap = options.slotEventOverlap;\n    var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n\n    var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n\n    var left; // amount of space from left edge, a fraction of the total width\n\n    var right; // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord;\n      right = nearCoord;\n    } else {\n      left = nearCoord;\n      right = 1 - farCoord;\n    }\n\n    var props = {\n      zIndex: segHCoords.stackDepth + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  };\n\n  return TimeCol;\n}(BaseComponent);\n\nfunction renderPlainFgSegs(sortedFgSegs, _a) {\n  var todayRange = _a.todayRange,\n      nowDate = _a.nowDate,\n      eventSelection = _a.eventSelection,\n      eventDrag = _a.eventDrag,\n      eventResize = _a.eventResize;\n  var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return createElement(Fragment, null, sortedFgSegs.map(function (seg) {\n    var instanceId = seg.eventRange.instance.instanceId;\n    return createElement(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, createElement(TimeColEvent, __assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, getSegMeta(seg, todayRange, nowDate))));\n  }));\n}\n\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\n\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(function (segEntry) {\n    return allSegs[segEntry.index];\n  });\n}\n\nvar TimeColsContent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsContent, _super);\n\n  function TimeColsContent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.splitFgEventSegs = memoize(splitSegsByCol);\n    _this.splitBgEventSegs = memoize(splitSegsByCol);\n    _this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    _this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    _this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    _this.splitEventDrag = memoize(splitInteractionByCol);\n    _this.splitEventResize = memoize(splitInteractionByCol);\n    _this.rootElRef = createRef();\n    _this.cellElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsContent.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n\n    var colCnt = props.cells.length;\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      role: \"presentation\",\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", {\n      role: \"presentation\"\n    }, createElement(\"tr\", {\n      role: \"row\"\n    }, props.axis && createElement(\"td\", {\n      \"aria-hidden\": true,\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorRoot, {\n      isAxis: true,\n      date: props.nowDate\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n        style: {\n          top: nowIndicatorTop\n        }\n      }, innerContent);\n    })))), props.cells.map(function (cell, i) {\n      return createElement(TimeCol, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        nowDate: props.nowDate,\n        todayRange: props.todayRange,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        fgEventSegs: fgEventSegsByRow[i],\n        bgEventSegs: bgEventSegsByRow[i],\n        businessHourSegs: businessHourSegsByRow[i],\n        nowIndicatorSegs: nowIndicatorSegsByRow[i],\n        dateSelectionSegs: dateSelectionSegsByRow[i],\n        eventDrag: eventDragByRow[i],\n        eventResize: eventResizeByRow[i],\n        slatCoords: props.slatCoords,\n        eventSelection: props.eventSelection,\n        forPrint: props.forPrint\n      });\n    })))));\n  };\n\n  TimeColsContent.prototype.componentDidMount = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.componentDidUpdate = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.updateCoords = function () {\n    var props = this.props;\n\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, // horizontal\n      false));\n    }\n  };\n\n  return TimeColsContent;\n}(BaseComponent);\n\nfunction collectCellEls(elMap, cells) {\n  return cells.map(function (cell) {\n    return elMap[cell.key];\n  });\n}\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nvar TimeCols =\n/** @class */\nfunction (_super) {\n  __extends(TimeCols, _super);\n\n  function TimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.processSlotOptions = memoize(processSlotOptions);\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleRootEl = function (el) {\n      if (el) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: el,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    _this.handleScrollRequest = function (request) {\n      var onScrollTopRequest = _this.props.onScrollTopRequest;\n      var slatCoords = _this.state.slatCoords;\n\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          var top_1 = slatCoords.computeTimeTop(request.time);\n          top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n\n          if (top_1) {\n            top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top_1);\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleColCoords = function (colCoords) {\n      _this.colCoords = colCoords;\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n\n      if (_this.props.onSlatCoords) {\n        _this.props.onSlatCoords(slatCoords);\n      }\n    };\n\n    return _this;\n  }\n\n  TimeCols.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        state = _a.state;\n\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null\n      /* axis depends on the colgroup's shrinking */\n      ,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  };\n\n  TimeCols.prototype.componentDidMount = function () {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  };\n\n  TimeCols.prototype.componentDidUpdate = function (prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  };\n\n  TimeCols.prototype.componentWillUnmount = function () {\n    this.scrollResponder.detach();\n  };\n\n  TimeCols.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this.context,\n        dateEnv = _a.dateEnv,\n        options = _a.options;\n    var colCoords = this.colCoords;\n    var dateProfile = this.props.dateProfile;\n    var slatCoords = this.state.slatCoords;\n\n    var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration),\n        snapDuration = _b.snapDuration,\n        snapsPerSlot = _b.snapsPerSlot;\n\n    var colIndex = colCoords.leftToIndex(positionLeft);\n    var slatIndex = slatCoords.positions.topToIndex(positionTop);\n\n    if (colIndex != null && slatIndex != null) {\n      var cell = this.props.cells[colIndex];\n      var slatTop = slatCoords.positions.tops[slatIndex];\n      var slatHeight = slatCoords.positions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, snapDuration);\n      return {\n        dateProfile: dateProfile,\n        dateSpan: __assign({\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        }, cell.extraDateSpan),\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        },\n        layer: 0\n      };\n    }\n\n    return null;\n  };\n\n  return TimeCols;\n}(DateComponent);\n\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  var snapDuration = snapDurationOverride || slotDuration;\n  var snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1; // TODO: say warning?\n  }\n\n  return {\n    snapDuration: snapDuration,\n    snapsPerSlot: snapsPerSlot\n  };\n}\n\nvar DayTimeColsSlicer =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsSlicer, _super);\n\n  function DayTimeColsSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DayTimeColsSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n\n    for (var col = 0; col < dayRanges.length; col += 1) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n\n    return segs;\n  };\n\n  return DayTimeColsSlicer;\n}(Slicer);\n\nvar DayTimeCols =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeCols, _super);\n\n  function DayTimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new DayTimeColsSlicer();\n    _this.timeColsRef = createRef();\n    return _this;\n  }\n\n  DayTimeCols.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var dateProfile = props.dateProfile,\n        dayTableModel = props.dayTableModel;\n    var isNowIndicator = context.options.nowIndicator;\n    var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv); // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n\n    return createElement(NowTimer, {\n      unit: isNowIndicator ? 'minute' : 'day'\n    }, function (nowDate, todayRange) {\n      return createElement(TimeCols, __assign({\n        ref: _this.timeColsRef\n      }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n        forPrint: props.forPrint,\n        axis: props.axis,\n        dateProfile: dateProfile,\n        slatMetas: props.slatMetas,\n        slotDuration: props.slotDuration,\n        cells: dayTableModel.cells[0],\n        tableColGroupNode: props.tableColGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        expandRows: props.expandRows,\n        nowDate: nowDate,\n        nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n        todayRange: todayRange,\n        onScrollTopRequest: props.onScrollTopRequest,\n        onSlatCoords: props.onSlatCoords\n      }));\n    });\n  };\n\n  return DayTimeCols;\n}(DateComponent);\n\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  var ranges = [];\n\n  for (var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n\n  return ranges;\n} // potential nice values for the slot-duration and interval-duration\n// from largest to smallest\n\n\nvar STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\n\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  var dayStart = new Date(0);\n  var slatTime = slotMinTime;\n  var slatIterator = createDuration(0);\n  var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  var metas = [];\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    var date = dateEnv.add(dayStart, slatTime);\n    var isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date: date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled: isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n\n  return metas;\n} // Computes an automatic value for slotLabelInterval\n\n\nfunction computeLabelInterval(slotDuration) {\n  var i;\n  var labelInterval;\n  var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n\n  return slotDuration; // fall back\n}\n\nvar DayTimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsView, _super);\n\n  function DayTimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildTimeColsModel = memoize(buildTimeColsModel);\n    _this.buildSlatMetas = memoize(buildSlatMetas);\n    return _this;\n  }\n\n  DayTimeColsView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.context,\n        options = _a.options,\n        dateEnv = _a.dateEnv,\n        dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dateProfile = props.dateProfile;\n    var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    var splitProps = this.allDaySplitter.splitProps(props);\n    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    var dayMinWidth = options.dayMinWidth;\n    var hasAttachedAxis = !dayMinWidth;\n    var hasDetachedAxis = dayMinWidth;\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n\n    var allDayContent = options.allDaySlot !== false && function (contentArg) {\n      return createElement(DayTable, __assign({}, splitProps.allDay, {\n        dateProfile: dateProfile,\n        dayTableModel: dayTableModel,\n        nextDayThreshold: options.nextDayThreshold,\n        tableMinWidth: contentArg.tableMinWidth,\n        colGroupNode: contentArg.tableColGroupNode,\n        renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n        showWeekNumbers: false,\n        expandRows: false,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      }, _this.getAllDayMaxEventProps()));\n    };\n\n    var timeGridContent = function timeGridContent(contentArg) {\n      return createElement(DayTimeCols, __assign({}, splitProps.timed, {\n        dayTableModel: dayTableModel,\n        dateProfile: dateProfile,\n        axis: hasAttachedAxis,\n        slotDuration: options.slotDuration,\n        slatMetas: slatMetas,\n        forPrint: props.forPrint,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        onSlatCoords: _this.handleSlatCoords,\n        expandRows: contentArg.expandRows,\n        onScrollTopRequest: _this.handleScrollTopRequest\n      }));\n    };\n\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  };\n\n  return DayTimeColsView;\n}(TimeColsView);\n\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\n\nvar OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar main = createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };","map":{"version":3,"mappings":";;;;;;;;;;AAOA;AAAA;AAAA;AAAoCA;;AAApC;;AA2BC;;AA1BCC;AACE,WAAO;AACLC,YAAM,EAAE,EADH;AAELC,WAAK,EAAE;AAFF,KAAP;AAID,GALD;;AAOAF,0DAAmBG,QAAnB,EAAqC;AACnC,QAAIA,QAAQ,CAACF,MAAb,EAAqB;AACnB,aAAO,CAAC,QAAD,CAAP;AACD;;AAED,WAAO,CAAC,OAAD,CAAP;AACD,GAND;;AAQAD,0DAAmBI,QAAnB,EAAqC;AACnC,QAAI,CAACA,QAAQ,CAACH,MAAd,EAAsB;AACpB,aAAO,CAAC,OAAD,CAAP;AACD;;AAED,QAAII,cAAc,CAACD,QAAD,CAAlB,EAA8B;AAC5B,aAAO,CAAC,OAAD,EAAU,QAAV,CAAP;AACD;;AAED,WAAO,CAAC,QAAD,CAAP;AACD,GAVD;;AAWF;AA3BA,EAAoCE,QAApC;;ACGA,IAAMC,yBAAyB,GAAGC,eAAe,CAAC;AAChDC,MAAI,EAAE,SAD0C;AAEhDC,QAAM,EAAE,SAFwC;AAGhDC,gBAAc,EAAE,IAHgC;AAIhDC,UAAQ,EAAE;AAJsC,CAAD,CAAjD;;SAOgBC,iBAAiBC,OAAmB;AAClD,MAAIC,UAAU,GAAG,CACf,kBADe,EAEf,wBAFe,EAGfD,KAAK,CAACE,SAAN,GAAkB,sBAAlB,GAA2C,wBAH5B,CAAjB;AAMA,SACEC,cAACC,eAAe,CAACC,QAAjB,EAAyB,IAAzB,EACG,UAACC,OAAD,EAAqB;AACpB,QAAI,CAACN,KAAK,CAACE,SAAX,EAAsB;AACpB,aACEC;AAAII,iBAAS,EAAEN,UAAU,CAACO,IAAX,CAAgB,GAAhB,CAAf;AAAmC,qBAAaR,KAAK,CAACS;AAAtD,QADF;AAGD;;AAEK,eAAO,GAAuBH,OAAO,QAArC;AAAA,QAASI,OAAO,GAAcJ,OAAO,QAArC;AAAA,QAAkBK,OAAO,GAAKL,OAAO,QAArC;AACN,QAAIM,WAAW;AACbF,WAAO,CAACG,eAAR,IAA2B,IAA3B,GAAkCpB,yBAAlC,GACEqB,KAAK,CAACC,OAAN,CAAcL,OAAO,CAACG,eAAtB,IAAyCnB,eAAe,CAACgB,OAAO,CAACG,eAAR,CAAwB,CAAxB,CAAD,CAAxD,GACEnB,eAAe,CAACgB,OAAO,CAACG,eAAT,CAHrB;AAKA,QAAIG,SAAS,GAAwB;AACnCC,WAAK,EAAE,CAD4B;AAEnCC,UAAI,EAAElB,KAAK,CAACkB,IAFuB;AAGnCC,UAAI,EAAEC,OAAO,CAACC,MAAR,CAAerB,KAAK,CAACmB,IAArB,CAH6B;AAInCG,UAAI,EAAEX,OAJ6B;AAKnCY,UAAI,EAAEH,OAAO,CAACI,MAAR,CAAexB,KAAK,CAACmB,IAArB,EAA2BP,WAA3B;AAL6B,KAArC;AAQA,WACET,cAACsB,UAAD,EAAW;AACTT,eAAS,EAAEA,SADF;AAETf,gBAAU,EAAES,OAAO,CAACgB,mBAFX;AAGTC,aAAO,EAAEjB,OAAO,CAACkB,gBAHR;AAITC,oBAAc,EAAEC,kBAJP;AAKTC,cAAQ,EAAErB,OAAO,CAACsB,iBALT;AAMTC,iBAAW,EAAEvB,OAAO,CAACwB;AANZ,KAAX,EAQG,UAACC,SAAD,EAAYC,gBAAZ,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAsD;AAAK,aAC1DnC;AAAIoC,WAAG,EAAEJ,SAAT;AAAoB5B,iBAAS,EAAEN,UAAU,CAACuC,MAAX,CAAkBJ,gBAAlB,EAAoC5B,IAApC,CAAyC,GAAzC,CAA/B;AAA4E,qBAAaR,KAAK,CAACS;AAA/F,SACEN;AAAKI,iBAAS,EAAC;AAAf,SACEJ;AAAKI,iBAAS,EAAC,6DAAf;AAA6EgC,WAAG,EAAEF;AAAlF,SACGC,YADH,CADF,CADF,CAD0D;AAQ3D,KAhBH,CADF;AAoBD,GA1CH,CADF;AA8CD;;AAED,SAASR,kBAAT,CAA4B9B,KAA5B,EAAiC;AAC/B,SAAOA,KAAK,CAACuB,IAAb;AACF;;AC/DA;AAAA;AAAA;AAAkCtC;;AAAlC;;AAQC;;AAPCwD;AACE,WAAO,KAAKzC,KAAL,CAAW0C,SAAX,CAAqBC,GAArB,CAAyB,UAACC,QAAD,EAAuB;AAAK,aAC1DzC;AAAI0C,WAAG,EAAED,QAAQ,CAACC;AAAlB,SACE1C,cAACJ,gBAAD,EAAiB+C,aAAKF,QAAL,CAAjB,CADF,CAD0D;AAI3D,KAJM,CAAP;AAKD,GAND;;AAOF;AARA,EAAkCG,aAAlC;;ACmBA,IAAMC,uBAAuB,GAAGtD,eAAe,CAAC;AAAEuD,MAAI,EAAE;AAAR,CAAD,CAA/C;AACA,IAAMC,2BAA2B,GAAG,CAApC;;;;;AAW2CjE;;AAA3C;AAAA;;AACYkE,2BAAiB,IAAIjE,cAAJ,EAAjB,CADZ,CACiD;;AAErCiE,wBAA+CC,SAAS,EAAxD;AACFD,sBAAuCC,SAAS,EAAhD;AACAD,0BAA2CC,SAAS,EAApD;AAERD,kBAAQ;AACNE,gBAAU,EAAE;AADN,KAAR;;AAyPAF,mCAAyB,UAACG,SAAD,EAAkB;AACzC,UAAIC,UAAU,GAAGJ,KAAI,CAACK,aAAL,CAAmBC,OAApC;;AAEA,UAAIF,UAAJ,EAAgB;AAAA;AACdA,kBAAU,CAACD,SAAX,GAAuBA,SAAvB;AACD;AACF,KAND;;;;;AAyBAH,2BAAiB,UAACO,MAAD,EAAyBC,WAAzB,EAAsD;AAA7B;AAAAA;AAA6B;;AAC/D,iBAAO,GAAKR,KAAI,CAAC7C,OAAL,CAAYI,OAAxB;AACA,qBAAW,GAAKyC,KAAI,CAACnD,KAAL,CAAU4D,WAA1B;AACN,UAAIC,KAAK,GAAGD,WAAW,CAACE,WAAxB;AACA,UAAIC,MAAM,GAAGC,QAAQ,CAACH,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACK,GAApB,CAArB;AAEA,UAAIC,YAAY,GAAIJ,MAAM,KAAK,CAAZ,CAAa;AAAb,QACfK,iBAAiB,CAACjB,KAAI,CAAC7C,OAAN,EAAeuD,KAAK,CAACI,KAArB,EAA4B,MAA5B,CADF,GAEf,EAFJ;;AAIA,UAAIvD,OAAO,CAAC2D,WAAR,IAAuBX,MAAM,KAAK,KAAtC,EAA6C;AAC3C,eACEvD,cAACmE,cAAD,EAAe;AAACnD,cAAI,EAAE0C,KAAK,CAACI,KAAb;AAAoBM,uBAAa,EAAEvB;AAAnC,SAAf,EACG,UAACb,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAgD;AAAK,iBACpDnC;AACEoC,eAAG,EAAEJ,SADP;AACgB,+BADhB;AAGE5B,qBAAS,EAAE,CACT,kBADS,EAET,sBAFS,EAGTiC,MAHS,CAGFvC,UAHE,EAGUO,IAHV,CAGe,GAHf;AAHb,aAQEL;AACEI,qBAAS,EAAC,iFADZ;AAEEiE,iBAAK,EAAE;AAAEC,oBAAM,EAAEd;AAAV;AAFT,aAIExD;AACEoC,eAAG,EAAEF,UADP;AAEE9B,qBAAS,EAAC;AAFZ,aAGM4D,YAHN,GAKG7B,YALH,CAJF,CARF,CADoD;AAsBrD,SAvBH,CADF;AA2BD;;AAED,aACEnC;AAAA;AAAgBI,iBAAS,EAAC;AAA1B,SACEJ;AAAKI,iBAAS,EAAC,wBAAf;AAAwCiE,aAAK,EAAE;AAAEC,gBAAM,EAAEd;AAAV;AAA/C,QADF,CADF;AAKD,KA7CD;;;;;;;AAoDAR,+BAAqB,UAACuB,SAAD,EAAmB;AAClC,eAAuBvB,KAAI,CAAC7C,OAA5B;AAAA,UAAEI,OAAO,aAAT;AAAA,UAAWC,OAAO,aAAlB;AACJ,UAAIK,SAAS,GAAqB;AAChCO,YAAI,EAAEb,OAAO,CAACiE,UADkB;AAEhCrD,YAAI,EAAEX;AAF0B,OAAlC;AAKA;AAEER,sBAACsB,UAAD,EAAW;AACTT,mBAAS,EAAEA,SADF;AAETf,oBAAU,EAAES,OAAO,CAACkE,gBAFX;AAGTjD,iBAAO,EAAEjB,OAAO,CAACmE,aAHR;AAIThD,wBAAc,EAAEiD,iBAJP;AAKT/C,kBAAQ,EAAErB,OAAO,CAACqE,cALT;AAMT9C,qBAAW,EAAEvB,OAAO,CAACsE;AANZ,SAAX,EAQG,UAAC7C,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAgD;AAAK,iBACpDnC;AACEoC,eAAG,EAAEJ,SADP;AACgB,+BADhB;AAGE5B,qBAAS,EAAE,CACT,kBADS,EAET,sBAFS,EAGTiC,MAHS,CAGFvC,UAHE,EAGUO,IAHV,CAGe,GAHf;AAHb,aAQEL;AACEI,qBAAS,EAAE,uDAAuDmE,SAAS,IAAI,IAAb,GAAoB,gCAApB,GAAuD,EAA9G,CADb;AAEEF,iBAAK,EAAE;AAAEC,oBAAM,EAAEC;AAAV;AAFT,aAIEvE;AAAMI,qBAAS,EAAC,gFAAhB;AAAiGgC,eAAG,EAAEF;AAAtG,aACGC,YADH,CAJF,CARF,CADoD;AAkBrD,SA1BH;AAFF;AA+BD,KAtCD;;AAwCAa,6BAAmB,UAACE,UAAD,EAAgC;AACjDF,WAAI,CAAC8B,QAAL,CAAc;AAAE5B,kBAAU;AAAZ,OAAd;AACD,KAFD;;;AAGD;;;;AA1WC6B,wDACEC,gBADF,EAEEN,aAFF,EAGEO,WAHF,EAGuE;AAEjE,aAAqB,IAArB;AAAA,QAAE9E,OAAO,aAAT;AAAA,QAAWN,KAAK,WAAhB;;AACJ,QAAIqF,QAAQ,GAA8B,EAA1C;AACA,QAAIC,iBAAiB,GAAGC,oBAAoB,CAACjF,OAAO,CAACI,OAAT,CAA5C;;AAEA,QAAIyE,gBAAJ,EAAsB;AACpBE,cAAQ,CAACG,IAAT,CAAc;AACZC,YAAI,EAAE,QADM;AAEZ5C,WAAG,EAAE,QAFO;AAGZ6C,gBAAQ,EAAEJ,iBAHE;AAIZK,aAAK,EAAE;AACLC,eAAK,EAAE,KAAKC,WADP;AAELC,wBAAc,EAAE,eAFX;AAGLC,oBAAU,EAAEZ;AAHP;AAJK,OAAd;AAUD;;AAED,QAAIN,aAAJ,EAAmB;AACjBQ,cAAQ,CAACG,IAAT,CAAc;AACZC,YAAI,EAAE,MADM;AAEZ5C,WAAG,EAAE,SAFO;AAGZ8C,aAAK,EAAE;AAAEhE,iBAAO,EAAEkD;AAAX;AAHK,OAAd;AAKAQ,cAAQ,CAACG,IAAT,CAAc;AACZC,YAAI,EAAE,MADM;AAEZ5C,WAAG,EAAE,iBAFO;AAGZmD,oBAAY;AACV7F;AAAI8F,cAAI,EAAC,cAAT;AAAwB1F,mBAAS,EAAC;AAAlC,WACEJ;AACEI,mBAAS,EAAE,yBAAyBD,OAAO,CAAC4F,KAAR,CAAcC,QAAd,CAAuB,iBAAvB;AADtC,UADF;AAJU,OAAd;AAWD;;AAEDd,YAAQ,CAACG,IAAT,CAAc;AACZC,UAAI,EAAE,MADM;AAEZ5C,SAAG,EAAE,MAFO;AAGZuD,YAAM,EAAE,IAHI;AAIZC,gBAAU,EAAEC,OAAO,CAAChG,OAAO,CAACI,OAAR,CAAgB2F,UAAjB,CAJP;AAKZV,WAAK,EAAE;AACLnC,qBAAa,EAAE,KAAKA,aADf;AAEL7B,eAAO,EAAEyD;AAFJ;AALK,KAAd;AAWA,WACEjF,cAACoG,QAAD,EAAS;AAACC,cAAQ,EAAElG,OAAO,CAACkG,QAAnB;AAA6BZ,WAAK,EAAE,KAAKzD;AAAzC,KAAT,EACG,UAACA,SAAD,EAAYlC,UAAZ,EAAsB;AAAK,aAC1BE;AAAKI,iBAAS,EAAE,CAAC,aAAD,EAAgBiC,MAAhB,CAAuBvC,UAAvB,EAAmCO,IAAnC,CAAwC,GAAxC,CAAhB;AAA8D+B,WAAG,EAAEJ;AAAnE,SACEhC,cAACsG,gBAAD,EAAiB;AACfL,cAAM,EAAE,CAACpG,KAAK,CAAC0G,YAAP,IAAuB,CAAC1G,KAAK,CAAC2G,QADvB;AAEfC,wBAAgB,EAAE5G,KAAK,CAAC2G,QAFT;AAGfE,YAAI,EAAE,CAAC;AAAEC,eAAK,EAAE;AAAT,SAAD,CAHS;AAIfzB,gBAAQ,EAAEA;AAJK,OAAjB,CADF,CAD0B;AAS3B,KAVH,CADF;AAcD,GAlED;;AAoEAH,yDACEC,gBADF,EAEEN,aAFF,EAGEO,WAHF,EAIE2B,MAJF,EAKEC,WALF,EAMEtE,SANF,EAOEW,UAPF,EAOwC;AAPxC;;AASE,QAAI4D,UAAU,GAAG,KAAK3G,OAAL,CAAa4G,WAAb,CAAyBC,cAA1C;;AAEA,QAAI,CAACF,UAAL,EAAiB;AACf,YAAM,IAAIG,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAEG,aAAqB,IAArB;AAAA,QAAE9G,OAAO,aAAT;AAAA,QAAWN,KAAK,WAAhB;;AACJ,QAAIsF,iBAAiB,GAAG,CAACtF,KAAK,CAAC2G,QAAP,IAAmBpB,oBAAoB,CAACjF,OAAO,CAACI,OAAT,CAA/D;AACA,QAAI2G,qBAAqB,GAAG,CAACrH,KAAK,CAAC2G,QAAP,IAAmBW,wBAAwB,CAAChH,OAAO,CAACI,OAAT,CAAvE;AACA,QAAI2E,QAAQ,GAA8B,EAA1C;;AAEA,QAAIF,gBAAJ,EAAsB;AACpBE,cAAQ,CAACG,IAAT,CAAc;AACZC,YAAI,EAAE,QADM;AAEZ5C,WAAG,EAAE,QAFO;AAGZ6C,gBAAQ,EAAEJ,iBAHE;AAIZiC,sBAAc,EAAE,IAJJ;AAKZC,cAAM,EAAE,CACN;AACE3E,aAAG,EAAE,MADP;AAEEkD,oBAAU,EAAE,oBAAC0B,GAAD,EAA8B;AAAK,mBAC7CtH;AAAI8F,kBAAI,EAAC;AAAT,eACG9C,KAAI,CAACuE,cAAL,CAAoB,KAApB,EAA2BD,GAAG,CAACE,cAAJ,CAAmB,CAAnB,CAA3B,CADH,CAD6C;AAI9C;AANH,SADM,EASN;AACE9E,aAAG,EAAE,MADP;AAEE+C,eAAK,EAAE,KAAKC,WAFd;AAGEC,wBAAc,EAAE,eAHlB;AAIEC,oBAAU,EAAEZ;AAJd,SATM;AALI,OAAd;AAsBD;;AAED,QAAIN,aAAJ,EAAmB;AACjBQ,cAAQ,CAACG,IAAT,CAAc;AACZC,YAAI,EAAE,MADM;AAEZ5C,WAAG,EAAE,SAFO;AAGZ0E,sBAAc,EAAE,IAHJ;AAIZC,cAAM,EAAE,CACN;AACE3E,aAAG,EAAE,MADP;AAEEkD,oBAAU,EAAE,oBAAC6B,UAAD,EAAqC;AAAK,mBACpDzH;AAAI8F,kBAAI,EAAC;AAAT,eACG9C,KAAI,CAAC0E,kBAAL,CAAwBD,UAAU,CAACD,cAAX,CAA0B,CAA1B,CAAxB,CADH,CADoD;AAIrD;AANH,SADM,EASN;AACE9E,aAAG,EAAE,MADP;AAEElB,iBAAO,EAAEkD;AAFX,SATM;AAJI,OAAd;AAmBAQ,cAAQ,CAACG,IAAT,CAAc;AACZ3C,WAAG,EAAE,iBADO;AAEZ4C,YAAI,EAAE,MAFM;AAGZO,oBAAY;AACV7F;AAAI8F,cAAI,EAAC,cAAT;AAAwB1F,mBAAS,EAAC;AAAlC,WACEJ;AACE2H,iBAAO,EAAE,CADX;AAEEvH,mBAAS,EAAE,yBAAyBD,OAAO,CAAC4F,KAAR,CAAcC,QAAd,CAAuB,iBAAvB;AAFtC,UADF;AAJU,OAAd;AAYD;;AAED,QAAI4B,cAAc,GAAGzH,OAAO,CAACI,OAAR,CAAgBsH,YAArC;AAEA3C,YAAQ,CAACG,IAAT,CAAc;AACZC,UAAI,EAAE,MADM;AAEZ5C,SAAG,EAAE,MAFO;AAGZuD,YAAM,EAAE,IAHI;AAIZC,gBAAU,EAAEC,OAAO,CAAChG,OAAO,CAACI,OAAR,CAAgB2F,UAAjB,CAJP;AAKZmB,YAAM,EAAE,CACN;AACE3E,WAAG,EAAE,MADP;AAEElB,eAAO,EAAE,iBAAC8F,GAAD,EAAI;AAAK;AAEhBtH;AAAKI,uBAAS,EAAC;AAAf,eACEJ;AAAA;AAAmBqE,mBAAK,EAAE;AAAEC,sBAAM,EAAEgD,GAAG,CAACpB,UAAJ,GAAiBoB,GAAG,CAACQ,YAArB,GAAoC;AAA9C;AAA1B,eACGR,GAAG,CAACS,iBADP,EAEE/H,6BACEA,cAACsC,YAAD,EAAa;AAACC,uBAAS,EAAEA;AAAZ,aAAb,CADF,CAFF,CADF,EAOEvC;AAAKI,uBAAS,EAAC;AAAf,eACEJ,cAACgI,QAAD,EAAS;AAACC,kBAAI,EAAEL,cAAc,GAAG,QAAH,GAAc;AAAK;;AAAxC,aAAT,EACG,UAACM,OAAD,EAAoB;AACnB,kBAAIC,eAAe,GACjBP,cAAc,IACd1E,UADA,IAEAA,UAAU,CAACkF,cAAX,CAA0BF,OAA1B,CAHF,CADmB,CAIiB;;AAEpC,kBAAI,OAAOC,eAAP,KAA2B,QAA/B,EAAyC;AACvC,uBACEnI,cAACqI,gBAAD,EAAiB;AAACC,wBAAM,MAAP;AAAQtH,sBAAI,EAAEkH;AAAd,iBAAjB,EACG,UAAClG,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAgD;AAAK,yBACpDnC;AACEoC,uBAAG,EAAEJ,SADP;AAEE5B,6BAAS,EAAE,CAAC,iCAAD,EAAoCiC,MAApC,CAA2CvC,UAA3C,EAAuDO,IAAvD,CAA4D,GAA5D,CAFb;AAGEgE,yBAAK,EAAE;AAAEkE,yBAAG,EAAEJ;AAAP;AAHT,qBAKGhG,YALH,CADoD;AAQrD,iBATH,CADF;AAaD;;AAED,qBAAO,IAAP;AACD,aAxBH,CADF,CAPF;AAFgB;AAsCjB;AAxCH,OADM,EA2CN;AACEO,WAAG,EAAE,MADP;AAEEW,qBAAa,EAAE,KAAKA,aAFtB;AAGE7B,eAAO,EAAEyD;AAHX,OA3CM;AALI,KAAd;;AAwDA,QAAIiC,qBAAJ,EAA2B;AACzBhC,cAAQ,CAACG,IAAT,CAAc;AACZ3C,WAAG,EAAE,QADO;AAEZ4C,YAAI,EAAE,QAFM;AAGZC,gBAAQ,EAAE,IAHE;AAIZ8B,cAAM,EAAE,CACN;AACE3E,aAAG,EAAE,MADP;AAEElB,iBAAO,EAAEgH;AAFX,SADM,EAKN;AACE9F,aAAG,EAAE,MADP;AAEElB,iBAAO,EAAEgH;AAFX,SALM;AAJI,OAAd;AAeD;;AAED,WACExI,cAACoG,QAAD,EAAS;AAACC,cAAQ,EAAElG,OAAO,CAACkG,QAAnB;AAA6BZ,WAAK,EAAE,KAAKzD;AAAzC,KAAT,EACG,UAACA,SAAD,EAAYlC,UAAZ,EAAsB;AAAK,aAC1BE;AAAKI,iBAAS,EAAE,CAAC,aAAD,EAAgBiC,MAAhB,CAAuBvC,UAAvB,EAAmCO,IAAnC,CAAwC,GAAxC,CAAhB;AAA8D+B,WAAG,EAAEJ;AAAnE,SACEhC,cAAC8G,UAAD,EAAW;AACTb,cAAM,EAAE,CAACpG,KAAK,CAAC0G,YAAP,IAAuB,CAAC1G,KAAK,CAAC2G,QAD7B;AAETC,wBAAgB,EAAE,KAFT;AAGTgC,iBAAS,EAAE,CACT;AAAE9B,eAAK,EAAE,QAAT;AAAmBD,cAAI,EAAE,CAAC;AAAEC,iBAAK,EAAE;AAAT,WAAD;AAAzB,SADS,EAET;AAAED,cAAI,EAAE,CAAC;AAAEgC,gBAAI,EAAE9B,MAAR;AAAgB+B,oBAAQ,EAAE9B;AAA1B,WAAD;AAAR,SAFS,CAHF;AAOT3B,gBAAQ,EAAEA;AAPD,OAAX,CADF,CAD0B;AAY3B,KAbH,CADF;AAiBD,GA5KD;;;;;AAyLAH;AACM,aAAoC,KAAK5E,OAAL,CAAaI,OAAjD;AAAA,QAAEqI,YAAY,kBAAd;AAAA,QAAgBC,eAAe,qBAA/B;;AAEJ,QAAID,YAAY,KAAK,IAAjB,IAAyBC,eAAe,KAAK,IAAjD,EAAuD;AAAA;AACrDD,kBAAY,GAAGE,SAAf;AACAD,qBAAe,GAAG9F,2BAAlB,CAFqD,CAER;AAC9C;;AAED,WAAO;AAAE6F,kBAAY,cAAd;AAAgBC,qBAAe;AAA/B,KAAP;AACD,GATD;;AA6GF;AAxXA,EAA2CE;;AA0X3C,SAASpE,iBAAT,CAA2B9D,SAA3B,EAAoC;AAClC,SAAOA,SAAS,CAACO,IAAjB;AACF;;;;;AC1ZE,+BACS4H,SADT,EAEUvF,WAFV,EAGUwF,YAHV,EAGgC;AAFvB;AACC;AACA;AAET;;AAEDC,2DAAelI,IAAf,EAA+B;AACvB,mBAAW,GAAK,KAAIyC,WAApB;;AAEN,QAAI0F,mBAAmB,CAAC1F,WAAW,CAAC2F,YAAb,EAA2BpI,IAA3B,CAAvB,EAAyD;AACvD,UAAIqI,cAAc,GAAGC,UAAU,CAACtI,IAAD,CAA/B;AACA,UAAIuI,MAAM,GAAGvI,IAAI,CAACwI,OAAL,KAAiBH,cAAc,CAACG,OAAf,EAA9B;;AAEA,UACED,MAAM,IAAIE,SAAS,CAAChG,WAAW,CAACiG,WAAb,CAAnB,IACAH,MAAM,GAAGE,SAAS,CAAChG,WAAW,CAACkG,WAAb,CAFpB,EAGE;AACA,eAAO,KAAKC,cAAL,CAAoBC,cAAc,CAACN,MAAD,CAAlC,CAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAhBD;;;;AAoBAL,2DAAeY,IAAf,EAAiCT,cAAjC,EAA4D;AAC1D,QAAI,CAACA,cAAL,EAAqB;AACnBA,oBAAc,GAAGC,UAAU,CAACQ,IAAD,CAA3B;AACD;;AACD,WAAO,KAAKF,cAAL,CAAoBC,cAAc,CAACC,IAAI,CAACN,OAAL,KAAiBH,cAAc,CAACG,OAAf,EAAlB,CAAlC,CAAP;AACD,GALD;;;;;AAUAN,2DAAea,QAAf,EAAiC;AAC3B,aAA6B,IAA7B;AAAA,QAAEf,SAAS,eAAX;AAAA,QAAavF,WAAW,iBAAxB;;AACJ,QAAIuG,GAAG,GAAGhB,SAAS,CAACiB,GAAV,CAAcC,MAAxB,CAF+B;;AAK/B,QAAIC,YAAY,GAAG,CAACJ,QAAQ,CAACK,YAAT,GAAwBX,SAAS,CAAChG,WAAW,CAACiG,WAAb,CAAlC,IAA+DD,SAAS,CAAC,KAAKR,YAAN,CAA3F;AACA,QAAIoB,SAAJ;AACA,QAAIC,aAAJ,CAP+B;;;;AAY/BH,gBAAY,GAAGI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,YAAZ,CAAf;AACAA,gBAAY,GAAGI,IAAI,CAACE,GAAL,CAAST,GAAT,EAAcG,YAAd,CAAf,CAb+B;;;AAiB/BE,aAAS,GAAGE,IAAI,CAACG,KAAL,CAAWP,YAAX,CAAZ;AACAE,aAAS,GAAGE,IAAI,CAACE,GAAL,CAASJ,SAAT,EAAoBL,GAAG,GAAG,CAA1B,CAAZ,CAlB+B;;;AAsB/BM,iBAAa,GAAGH,YAAY,GAAGE,SAA/B;AAEA,WAAOrB,SAAS,CAAC2B,IAAV,CAAeN,SAAf,IACLrB,SAAS,CAAC4B,SAAV,CAAoBP,SAApB,IAAiCC,aADnC;AAED,GA1BD;;AA2BF;AAAC;;AC5DD;AAAA;AAAA;AAAuCxL;;AAAvC;;AAoDC;;AAnDC+L;AACM,aAAqB,IAArB;AAAA,QAAEhL,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AACE,eAAO,GAAKA,OAAO,QAAnB;AACA,kBAAU,GAAKN,KAAK,WAApB;AAEN,WACEG,6BACGH,KAAK,CAAC0C,SAAN,CAAgBC,GAAhB,CAAoB,UAACC,QAAD,EAAWqI,CAAX,EAAY;AAC/B,UAAIjK,SAAS,GAAuB;AAClCE,YAAI,EAAE0B,QAAQ,CAAC1B,IADmB;AAElCC,YAAI,EAAEb,OAAO,CAACc,OAAR,CAAgBC,MAAhB,CAAuBuB,QAAQ,CAACzB,IAAhC,CAF4B;AAGlCG,YAAI,EAAEhB,OAAO,CAACK;AAHoB,OAApC;AAMA,UAAIV,UAAU,GAAG,CACf,kBADe,EAEf,uBAFe,EAGf2C,QAAQ,CAAC1C,SAAT,GAAqB,EAArB,GAA0B,wBAHX,CAAjB;AAMA,aACEC;AACE0C,WAAG,EAAED,QAAQ,CAACC,GADhB;AAEEN,WAAG,EAAE2I,UAAU,CAAC9H,SAAX,CAAqBR,QAAQ,CAACC,GAA9B;AAFP,SAIG7C,KAAK,CAACmL,IAAN,IACChL,cAACJ,gBAAD,EAAiB+C,aAAKF,QAAL,CAAjB,CALJ,EAOEzC,cAACsB,UAAD,EAAW;AACTT,iBAAS,EAAEA,SADF;AAETf,kBAAU,EAAES,OAAO,CAAC0K,kBAFX;AAGTzJ,eAAO,EAAEjB,OAAO,CAAC2K,eAHR;AAITtJ,gBAAQ,EAAErB,OAAO,CAAC4K,gBAJT;AAKTrJ,mBAAW,EAAEvB,OAAO,CAAC6K;AALZ,OAAX,EAOG,UAACpJ,SAAD,EAAYC,gBAAZ,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAsD;AAAK,eAC1DnC;AACEoC,aAAG,EAAEJ,SADP;AAEE5B,mBAAS,EAAEN,UAAU,CAACuC,MAAX,CAAkBJ,gBAAlB,EAAoC5B,IAApC,CAAyC,GAAzC,CAFb;AAE0D,uBAC7CoC,QAAQ,CAACnC;AAHtB,WAKG6B,YALH,CAD0D;AAQ3D,OAfH,CAPF,CADF;AA2BD,KAxCA,CADH,CADF;AA6CD,GAlDD;;AAmDF;AApDA,EAAuCS,aAAvC;ACYA;;;;;AAIA;AAAA;AAAA;AAAmC9D;;AAAnC;AAAA;;AACUkE,sBAAYC,SAAS,EAArB;AACAD,uBAAa,IAAIqI,MAAJ,EAAb;;AAkET;;AAhECC;AACM,aAAqB,IAArB;AAAA,QAAEzL,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AAEJ,WACEH;AAAKoC,SAAG,EAAE,KAAKJ,SAAf;AAA0B5B,eAAS,EAAC;AAApC,OACEJ;AAAA;AAEEI,eAAS,EAAED,OAAO,CAAC4F,KAAR,CAAcC,QAAd,CAAuB,OAAvB,CAFb;AAGE3B,WAAK,EAAE;AACLsE,gBAAQ,EAAE9I,KAAK,CAAC0L,aADX;AAEL5E,aAAK,EAAE9G,KAAK,CAAC2L,WAFR;AAGLlH,cAAM,EAAEzE,KAAK,CAAC4L;AAHT;AAHT,OASG5L,KAAK,CAACkI;AAAiB;AAT1B,MAUE/H,cAAC6K,iBAAD,EAAkB;AAChBE,gBAAU,EAAE,KAAKA,UADD;AAEhBC,UAAI,EAAEnL,KAAK,CAACmL,IAFI;AAGhBzI,eAAS,EAAE1C,KAAK,CAAC0C;AAHD,KAAlB,CAVF,CADF,CADF;AAoBD,GAvBD;;AAyBA+I;AACE,SAAKI,YAAL;AACD,GAFD;;AAIAJ;AACE,SAAKI,YAAL;AACD,GAFD;;AAIAJ;AACE,QAAI,KAAKzL,KAAL,CAAW8L,QAAf,EAAyB;AACvB,WAAK9L,KAAL,CAAW8L,QAAX,CAAoB,IAApB;AACD;AACF,GAJD;;AAMAL;AACM,aAAqB,IAArB;AAAA,QAAEnL,OAAO,aAAT;AAAA,QAAWN,KAAK,WAAhB;;AAEJ,QACEA,KAAK,CAAC8L,QAAN,IACA9L,KAAK,CAAC2L,WAAN,KAAsB,IAFxB,CAE4B;AAF5B,MAGE;AACA,UAAII,MAAM,GAAG,KAAK5J,SAAL,CAAesB,OAA5B;;AAEA,UAAIsI,MAAM,CAACC,YAAX,EAAyB;AAAA;AACvBhM,aAAK,CAAC8L,QAAN,CACE,IAAIzC,mBAAJ,CACE,IAAI4C,aAAJ,CACE,KAAK9J,SAAL,CAAesB,OADjB,EAEEyI,cAAc,CAAC,KAAKhB,UAAL,CAAgBiB,UAAjB,EAA6BnM,KAAK,CAAC0C,SAAnC,CAFhB,EAGE,KAHF,EAIE,IAJF,CADF,EAOE,KAAK1C,KAAL,CAAW4D,WAPb,EAQEtD,OAAO,CAACI,OAAR,CAAgB0I,YARlB,CADF;AAYD;AACF;AACF,GAxBD;;AAyBF;AApEA,EAAmCrG,aAAnC;;AAsEA,SAASmJ,cAAT,CAAwBE,KAAxB,EAA+D1J,SAA/D,EAAwF;AACtF,SAAOA,SAAS,CAACC,GAAV,CAAc,UAACC,QAAD,EAAS;AAAK,gBAAK,CAACA,QAAQ,CAACC,GAAV,CAAL;AAAmB,GAA/C,CAAP;AACF;;SC9FgBwJ,eAAeC,MAA4BvF,QAAc;AACvE,MAAIwF,SAAS,GAAoB,EAAjC;AACA,MAAItB,CAAJ;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlE,MAAhB,EAAwBkE,CAAC,IAAI,CAA7B,EAAgC;AAC9BsB,aAAS,CAAC/G,IAAV,CAAe,EAAf;AACD;;AAED,MAAI8G,IAAJ,EAAU;AACR,SAAKrB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqB,IAAI,CAACjC,MAArB,EAA6BY,CAAC,IAAI,CAAlC,EAAqC;AACnCsB,eAAS,CAACD,IAAI,CAACrB,CAAD,CAAJ,CAAQuB,GAAT,CAAT,CAAuBhH,IAAvB,CAA4B8G,IAAI,CAACrB,CAAD,CAAhC;AACD;AACF;;AAED,SAAOsB,SAAP;AACD;;SAEeE,sBAAsBC,IAAuC3F,QAAc;AACzF,MAAI4F,KAAK,GAAiC,EAA1C;;AAEA,MAAI,CAACD,EAAL,EAAS;AACP,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlE,MAApB,EAA4BkE,CAAC,IAAI,CAAjC,EAAoC;AAClC0B,WAAK,CAAC1B,CAAD,CAAL,GAAW,IAAX;AACD;AACF,GAJD,MAIO;AACL,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlE,MAApB,EAA4BkE,CAAC,IAAI,CAAjC,EAAoC;AAClC0B,WAAK,CAAC1B,CAAD,CAAL,GAAW;AACT2B,yBAAiB,EAAEF,EAAE,CAACE,iBADb;AAETC,eAAO,EAAEH,EAAE,CAACG,OAFH;AAGTP,YAAI,EAAE;AAHG,OAAX;AAKD;;AAED,SAAgB,mBAAE,CAACA,IAAnB,EAAgBQ,cAAhB,EAAgBA,IAAhB,EAAyB;AAApB,UAAIC,GAAG,SAAP;AACHJ,WAAK,CAACI,GAAG,CAACP,GAAL,CAAL,CAAeF,IAAf,CAAoB9G,IAApB,CAAyBuH,GAAzB;AACD;AACF;;AAED,SAAOJ,KAAP;AACF;;AC7BA;AAAA;AAAA;AAAqC1N;;AAArC;AAAA;;AACEkE,sBAAYC,SAAS,EAArB;;AAsCD;;AApCC4J;AAAA;;AACQ,aAAK,GAAK,KAAIhN,KAAd;AACN,WACEG,cAAC8M,YAAD,EAAa;AACXC,gBAAU,EAAE,IADD;AAEXC,aAAO,EAAEnN,KAAK,CAACoN,UAAN,CAAiB/C,MAFf;AAGXgD,aAAO,EAAErN,KAAK,CAACoN,UAHJ;AAIXA,gBAAU,EAAEpN,KAAK,CAACoN,UAJP;AAKXE,oBAAc,EAAE,KAAKnL,SALV;AAMXN,oBAAc,EAAE0L,mBANL;AAOXC,mBAAa,EAAExN,KAAK,CAACwN,aAPV;AAQX5J,iBAAW,EAAE5D,KAAK,CAAC4D,WARR;AASX6J,gBAAU,EAAEzN,KAAK,CAACyN,UATP;AAUXC,oBAAc,EAAE;AAAM,gCAAiB,CAAC1N,KAAK,CAACoN,UAAP,EAAmBpN,KAAnB,CAAjB;AAA0C;AAVrD,KAAb,EAYG,UAACmC,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAkDqL,WAAlD,EAA+DC,KAA/D,EAAsEC,UAAtE,EAAkFC,SAAlF,EAA2F;AAAK,aAC/F3N;AACEoC,WAAG,EAAE,aAACwL,EAAD,EAAuB;AAC1BC,gBAAM,CAAC7L,SAAD,EAAY4L,EAAZ,CAAN;AACAC,gBAAM,CAAC7K,KAAI,CAAChB,SAAN,EAAiB4L,EAAjB,CAAN;AACD,SAJH;AAKExN,iBAAS,EAAE,CAAC,uBAAD,EAA0BiC,MAA1B,CAAiCvC,UAAjC,EAA6CO,IAA7C,CAAkD,GAAlD,CALb;AAMEgE,aAAK,EAAE;AAAEkE,aAAG,EAAE1I,KAAK,CAAC0I,GAAb;AAAkBuF,gBAAM,EAAEjO,KAAK,CAACiO;AAAhC,SANT;AAOEC,eAAO,EAAEP,WAPX;AAQEC,aAAK,EAAEA,KART;AAQc,yBACGC,UATjB;AAS2B,yBACVC;AAVjB,SAYE3N;AAAKoC,WAAG,EAAEF,UAAV;AAAsB9B,iBAAS,EAAC;AAAhC,SACG+B,YADH,CAZF,CAD+F;AAiBhG,KA7BH,CADF;AAiCD,GAnCD;;AAoCF;AAvCA,EAAqCS,aAArC;;AAyCA,SAASwK,mBAAT,CAA6BvN,KAA7B,EAAsD;AACpD,SAAOA,KAAK,CAACmO,SAAb;AACF,C,CCnCA;;;SACgBC,iBACdC,WACAC,aACAC,aAAoB;AAEpB,MAAIC,SAAS,GAAG,IAAIC,YAAJ,EAAhB;;AACA,MAAIH,WAAW,IAAI,IAAnB,EAAyB;AACvBE,aAAS,CAACF,WAAV,GAAwBA,WAAxB;AACD;;AACD,MAAIC,WAAW,IAAI,IAAnB,EAAyB;AACvBC,aAAS,CAACD,WAAV,GAAwBA,WAAxB;AACD;;AAED,MAAIG,aAAa,GAAGF,SAAS,CAACG,OAAV,CAAkBN,SAAlB,CAApB;AACA,MAAIO,YAAY,GAAGC,wBAAwB,CAACH,aAAD,CAA3C;AAEA,MAAII,GAAG,GAAGC,QAAQ,CAACP,SAAD,CAAlB;AACAM,KAAG,GAAGE,UAAU,CAACF,GAAD,EAAM,CAAN,CAAhB,CAdoB,CAcI;;AACxB,MAAIG,QAAQ,GAAGC,UAAU,CAACJ,GAAD,CAAzB;AAEA,SAAO;AAAEG,YAAQ,UAAV;AAAYL,gBAAY;AAAxB,GAAP;AACD;;AAED,SAASG,QAAT,CAAkBP,SAAlB,EAAyC;AAC/B,oBAAc,GAAKA,SAAS,eAA5B;AAER,MAAMW,SAAS,GAAGC,SAAS,CACzB,UAACnO,KAAD,EAAgBoO,OAAhB,EAA+B;AAAK,gBAAK,GAAG,GAAR,GAAcA,OAAd;AAAqB,GADhC,EAEzB,UAACpO,KAAD,EAAgBoO,OAAhB,EAA+B;AAC7B,QAAIC,YAAY,GAAGC,iBAAiB,CAACf,SAAD,EAAYvN,KAAZ,EAAmBoO,OAAnB,CAApC;AACA,QAAIG,YAAY,GAAGC,UAAU,CAACH,YAAD,EAAeH,SAAf,CAA7B;AACA,QAAIO,KAAK,GAAGC,cAAc,CAAC1O,KAAD,CAAd,CAAsBoO,OAAtB,CAAZ;AAEA,WAAO,uBACAK,QAAK;AAAEE,oBAAc,EAAEJ,YAAY,CAAC,CAAD;AAA9B,MADL,EAELE,KAAK,CAACG,SAAN,GAAkBL,YAAY,CAAC,CAAD,CAFzB,CAE4B;AAF5B,KAAP;AAID,GAXwB,CAA3B;AAcA,SAAOC,UAAU,CACfE,cAAc,CAACtF,MAAf,GACI;AAAEpJ,SAAK,EAAE,CAAT;AAAY6O,gBAAY,EAAE,CAA1B;AAA6BC,cAAU,EAAEJ,cAAc,CAAC,CAAD,CAAd,CAAkBtF;AAA3D,GADJ,GAEI,IAHW,EAIf8E,SAJe,CAAV,CAKL,CALK,CAAP;AAMD;;AAED,SAASM,UAAT,CACEH,YADF,EAEEH,SAFF,EAEmE;AAEjE,MAAI,CAACG,YAAL,EAAmB;AACjB,WAAO,CAAC,EAAD,EAAK,CAAL,CAAP;AACD;;AAEK,WAAK,GAA+BA,YAAY,MAAhD;AAAA,MAAOQ,YAAY,GAAiBR,YAAY,aAAhD;AAAA,MAAqBS,UAAU,GAAKT,YAAY,WAAhD;AACN,MAAID,OAAO,GAAGS,YAAd;AACA,MAAIE,KAAK,GAAyB,EAAlC;;AAEA,SAAOX,OAAO,GAAGU,UAAjB,EAA6B;AAC3BC,SAAK,CAACxK,IAAN,CAAW2J,SAAS,CAAClO,KAAD,EAAQoO,OAAR,CAApB;AACAA,WAAO,IAAI,CAAX;AACD;;AAEDW,OAAK,CAACC,IAAN,CAAWC,gBAAX;AAEA,SAAO,CACLF,KAAK,CAACrN,GAAN,CAAUwN,WAAV,CADK,EAELH,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAFK,CAEM;AAFN,GAAP;AAID;;AAED,SAASE,gBAAT,CAA0BE,CAA1B,EAAiDC,CAAjD,EAAsE;AACpE,SAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD;;AAED,SAASD,WAAT,CAAqBC,CAArB,EAA0C;AACxC,SAAOA,CAAC,CAAC,CAAD,CAAR;AACD;;AAED,SAASb,iBAAT,CAA2Bf,SAA3B,EAAoD8B,YAApD,EAA0EC,cAA1E,EAAgG;AACxF,iBAAW,GAAqB/B,SAAS,YAAzC;AAAA,MAAamB,cAAc,GAAKnB,SAAS,eAAzC;AACN,MAAIgC,YAAY,GAAGb,cAAc,CAACW,YAAD,CAAd,CAA6BC,cAA7B,CAAnB;AACA,MAAIE,YAAY,GAAGC,WAAW,CAACJ,YAAD,CAAX,GAA4BE,YAAY,CAACX,SAA5D;AACA,MAAIc,QAAQ,GAAGD,WAAW,CAACrG,MAA3B;AACA,MAAIpJ,KAAK,GAAGqP,YAAZ,CAL8F;;AAQ9F,SAAOrP,KAAK,GAAG0P,QAAR,IAAoBD,WAAW,CAACzP,KAAD,CAAX,GAAqBwP,YAAhD,EAA8DxP,KAAK,IAAI,CAAvE;AAA0E;AAA1E,GAR8F,CAQnB;;;AAE3E,SAAOA,KAAK,GAAG0P,QAAf,EAAyB1P,KAAK,IAAI,CAAlC,EAAqC;AACnC,QAAI2P,OAAO,GAAGjB,cAAc,CAAC1O,KAAD,CAA5B;AACA,QAAIyO,KAAK,SAAT;AACA,QAAImB,WAAW,GAAGC,YAAY,CAACF,OAAD,EAAUJ,YAAY,CAAC3H,IAAb,CAAkB5E,KAA5B,EAAmC8M,eAAnC,CAA9B;AACA,QAAIjB,YAAY,GAAGe,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA/C,CAJmC,CAIe;;AAClD,QAAId,UAAU,GAAGD,YAAjB;;AAEA;AACE,KAACJ,KAAK,GAAGkB,OAAO,CAACb,UAAD,CAAhB,KAA4B;AAC5BL,SAAK,CAAC7G,IAAN,CAAW5E,KAAX,GAAmBuM,YAAY,CAAC3H,IAAb,CAAkB3E,GAFvC,EAGE;AAAE6L,gBAAU,IAAI,CAAd;AAAiB;;AAErB,QAAID,YAAY,GAAGC,UAAnB,EAA+B;AAC7B,aAAO;AAAE9O,aAAK,OAAP;AAAS6O,oBAAY,cAArB;AAAuBC,kBAAU;AAAjC,OAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAASf,UAAT,CAAoBgC,aAApB,EAA8CC,cAA9C,EAAoE;AAClE,MAAMC,WAAW,GAAG9B,SAAS,CAC3B,UAAC+B,IAAD,EAAgBC,UAAhB,EAAoCC,aAApC,EAAyD;AAAK,wBAAa,CAACF,IAAD,CAAb;AAAmB,GADtD,EAE3B,UAACA,IAAD,EAAgBC,UAAhB,EAAoCC,aAApC,EAAyD;AACjD,sBAAc,GAAgBF,IAAI,eAAlC;AAAA,QAAgBtB,SAAS,GAAKsB,IAAI,UAAlC;AACN,QAAIG,YAAY,GAAGzB,SAAS,GAAGwB,aAA/B;AACA,QAAIE,iBAAiB,GAAG1B,SAAS,GAAGyB,YAApC;AACA,QAAIE,QAAJ;AACA,QAAIC,WAAW,GAAc,EAA7B;;AAEA,QAAI,CAAC7B,cAAc,CAACvF,MAApB,EAA4B;AAC1BmH,cAAQ,GAAGP,cAAX;AACD,KAFD,MAEO;AACL,WAAsB,6CAAtB,EAAsBnE,4BAAtB,EAAsBA,IAAtB,EAAsC;AAAjC,YAAI4E,SAAS,uBAAb;;AACH,YAAIF,QAAQ,KAAKvI,SAAjB,EAA4B;AAC1B,cAAI0I,GAAG,GAAGT,WAAW,CAACQ,SAAD,EAAYN,UAAZ,EAAwBE,YAAxB,CAArB;AACAE,kBAAQ,GAAGG,GAAG,CAAC,CAAD,CAAd;AACAF,qBAAW,CAACjM,IAAZ,CAAiBmM,GAAG,CAAC,CAAD,CAApB;AACD,SAJD,MAIO;AACL,cAAIA,GAAG,GAAGT,WAAW,CAACQ,SAAD,EAAYF,QAAZ,EAAsB,CAAtB,CAArB;AACAC,qBAAW,CAACjM,IAAZ,CAAiBmM,GAAG,CAAC,CAAD,CAApB;AACD;AACF;AACF;;AAED,QAAIC,YAAY,GAAG,CAACJ,QAAQ,GAAGJ,UAAZ,IAA0BG,iBAA7C;AACA,WAAO,CAACC,QAAQ,GAAGI,YAAZ,EAAwB9O,sBAC1BqO,IAD0B,GACtB;AACPtB,eAAS,EAAE+B,YADJ;AAEPhC,oBAAc,EAAE6B;AAFT,KADsB,CAAxB,CAAP;AAKD,GA9B0B,CAA7B;AAiCA,SAAOT,aAAa,CAACrO,GAAd,CAAkB,UAACwO,IAAD,EAAc;AAAK,sBAAW,CAACA,IAAD,EAAO,CAAP,EAAU,CAAV,CAAX,CAAwB,CAAxB;AAA0B,GAA/D,CAAP;AACD,C,CAED;;;AACA,SAASjC,UAAT,CAAoB8B,aAApB,EAA4C;AAC1C,MAAIa,KAAK,GAAiB,EAA1B;AAEA,MAAMC,WAAW,GAAG1C,SAAS,CAC3B,UAAC+B,IAAD,EAAgBY,UAAhB,EAAoCC,UAApC,EAAsD;AAAK,wBAAa,CAACb,IAAD,CAAb;AAAmB,GADnD,EAE3B,UAACA,IAAD,EAAgBY,UAAhB,EAAoCC,UAApC,EAAsD;AACpD,QAAIC,IAAI,yBACHd,IADG,GACC;AACPY,gBAAU,YADH;AAEPC,gBAAU,YAFH;AAGPE,kBAAY,EAAE;AAHP,KADD,CAAR;;AAMAL,SAAK,CAACrM,IAAN,CAAWyM,IAAX;AAEA,WACEA,IAAI,CAACC,YAAL,GAAoBC,YAAY,CAAChB,IAAI,CAACvB,cAAN,EAAsBmC,UAAU,GAAGZ,IAAI,CAACtB,SAAxC,EAAmDmC,UAAU,GAAG,CAAhE,CAAZ,GAAiF,CADvG;AAGD,GAd0B,CAA7B;;AAiBA,WAASG,YAAT,CAAsBC,KAAtB,EAAwCL,UAAxC,EAA4DC,UAA5D,EAA8E;AAC5E,QAAIE,YAAY,GAAG,CAAnB;;AACA,SAAiB,2BAAjB,EAAiBpF,mBAAjB,EAAiBA,IAAjB,EAAwB;AAAnB,UAAIqE,IAAI,cAAR;AACHe,kBAAY,GAAGxH,IAAI,CAACC,GAAL,CAASmH,WAAW,CAACX,IAAD,EAAOY,UAAP,EAAmBC,UAAnB,CAApB,EAAoDE,YAApD,CAAf;AACD;;AACD,WAAOA,YAAP;AACD;;AAEDC,cAAY,CAACnB,aAAD,EAAgB,CAAhB,EAAmB,CAAnB,CAAZ;AACA,SAAOa,KAAP,CA7B0C,CA6B9B;AACb,C,CAED;;;AAEA,SAASzC,SAAT,CACEiD,OADF,EAEEC,QAFF,EAEkC;AAEhC,MAAMC,KAAK,GAA2B,EAAtC;AAEA,SAAO;AAAC;;SAAA,yCAAa;AAAbC;;;AACN,QAAI3P,GAAG,GAAGwP,OAAO,MAAP,CAAO,MAAP,EAAWG,IAAX,CAAV;AACA,WAAQ3P,GAAG,IAAI0P,KAAR,GACHA,KAAK,CAAC1P,GAAD,CADF,GAEF0P,KAAK,CAAC1P,GAAD,CAAL,GAAayP,QAAQ,MAAR,CAAQ,MAAR,EAAYE,IAAZ,CAFlB;AAGD,GALD;AAMF;;SC9MgBC,kBACdnG,MACAoG,SACArP,YACAsP,gBAA0B;AAD1B;AAAAtP;AAAsC;;AACtC;AAAAsP;AAA0B;;AAE1B,MAAIC,OAAO,GAAc,EAAzB;;AAEA,MAAIvP,UAAJ,EAAgB;AACd,SAAK,IAAI4H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,IAAI,CAACjC,MAAzB,EAAiCY,CAAC,IAAI,CAAtC,EAAyC;AACvC,UAAI8B,GAAG,GAAGT,IAAI,CAACrB,CAAD,CAAd;AACA,UAAI4H,SAAS,GAAGxP,UAAU,CAACyP,cAAX,CAA0B/F,GAAG,CAAC9I,KAA9B,EAAqCyO,OAArC,CAAhB;AACA,UAAIK,OAAO,GAAGrI,IAAI,CAACC,GAAL,CACZkI,SAAS,IAAIF,cAAc,IAAI,CAAtB,CADG,EACqB;AACjCtP,gBAAU,CAACyP,cAAX,CAA0B/F,GAAG,CAAC7I,GAA9B,EAAmCwO,OAAnC,CAFY,CAAd;AAIAE,aAAO,CAACpN,IAAR,CAAa;AACXvB,aAAK,EAAEyG,IAAI,CAACsI,KAAL,CAAWH,SAAX,CADI;AAEX3O,WAAG,EAAEwG,IAAI,CAACsI,KAAL,CAAWD,OAAX,CAFM,CAEa;;AAFb,OAAb;AAID;AACF;;AAED,SAAOH,OAAP;AACD;;SAEeK,uBACd3G,MACA4G,YAAqB;AACrBC,kBACAC,eAAsB;AAEtB,MAAI/E,SAAS,GAAe,EAA5B;AACA,MAAIgF,QAAQ,GAAkB,EAA9B,CAHsB,CAGU;;AAEhC,OAAK,IAAIpI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,IAAI,CAACjC,MAAzB,EAAiCY,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAI2H,OAAO,GAAGM,UAAU,CAACjI,CAAD,CAAxB;;AACA,QAAI2H,OAAJ,EAAa;AACXvE,eAAS,CAAC7I,IAAV,CAAe;AACb8N,aAAK,EAAErI,CADM;AAEb4E,iBAAS,EAAE,CAFE;AAGbhH,YAAI,EAAE+J;AAHO,OAAf;AAKD,KAND,MAMO;AACLS,cAAQ,CAAC7N,IAAT,CAAc8G,IAAI,CAACrB,CAAD,CAAlB;AACD;AACF;;AAEG,WAA6BmD,gBAAgB,CAACC,SAAD,EAAY8E,gBAAZ,EAA8BC,aAA9B,CAA7C;AAAA,MAAEnE,QAAQ,cAAV;AAAA,MAAYL,YAAY,kBAAxB;;AACJ,MAAI2E,aAAa,GAA4B,EAA7C;;AAEA,OAAoB,iCAApB,EAAoBzG,sBAApB,EAAoBA,IAApB,EAA8B;AAAzB,QAAI0G,OAAO,iBAAX;AACHD,iBAAa,CAAC/N,IAAd,CAAmB;AACjBuH,SAAG,EAAET,IAAI,CAACkH,OAAO,CAACF,KAAT,CADQ;AAEjBrB,UAAI,EAAEuB;AAFW,KAAnB;AAID;;AAED,OAAoB,iCAApB,EAAoBC,sBAApB,EAAoBA,IAApB,EAA8B;AAAzB,QAAIC,OAAO,iBAAX;AACHH,iBAAa,CAAC/N,IAAd,CAAmB;AAAEuH,SAAG,EAAE2G,OAAP;AAAgBzB,UAAI,EAAE;AAAtB,KAAnB;AACD;;AAED,SAAO;AAAEsB,iBAAa,eAAf;AAAiB3E,gBAAY;AAA7B,GAAP;AACF;;AC/EA,IAAM+E,mBAAmB,GAAGjU,eAAe,CAAC;AAC1CC,MAAI,EAAE,SADoC;AAE1CC,QAAM,EAAE,SAFkC;AAG1CE,UAAQ,EAAE;AAHgC,CAAD,CAA3C;;AAUA;AAAA;AAAA;AAAkCb;;AAAlC;;AAmBC;;AAlBC2U;AACE,QAAI3T,UAAU,GAAG,CACf,mBADe,EAEf,YAFe,CAAjB;;AAKA,QAAI,KAAKD,KAAL,CAAW6T,OAAf,EAAwB;AACtB5T,gBAAU,CAACuF,IAAX,CAAgB,yBAAhB;AACD;;AAED,WACErF,cAAC2T,aAAD,EAAchR,aACR,KAAK9C,KADG,EACE;AACd+T,uBAAiB,EAAEJ,mBADL;AAEdK,qBAAe,EAAE/T;AAFH,KADF,CAAd,CADF;AAOD,GAjBD;;AAkBF;AAnBA,EAAkC8C,aAAlC;;ACAA;AAAA;AAAA;AAAiC9D;;AAAjC;;AAaC;;AAZCgV;AACQ,aAAK,GAAK,KAAIjU,KAAd;AAEN,WACEG,cAAC+T,cAAD,EAAe;AAAC/S,UAAI,EAAEnB,KAAK,CAACmB,IAAb;AAAmByC,iBAAW,EAAE5D,KAAK,CAAC4D,WAAtC;AAAmD6J,gBAAU,EAAEzN,KAAK,CAACyN,UAArE;AAAiF0G,oBAAc,EAAEnU,KAAK,CAACmU;AAAvG,KAAf,EACG,UAAC9R,UAAD,EAAaC,YAAb,EAAyB;AAAK,aAC7BA,YAAY,IACVnC;AAAKI,iBAAS,EAAC,sBAAf;AAAsCgC,WAAG,EAAEF;AAA3C,SAAwDC,YAAxD,CAF2B;AAG9B,KAJH,CADF;AAQD,GAXD;;AAYF;AAbA,EAAiCS,aAAjC;;ACuBA;AAAA;AAAA;AAA6B9D;;AAA7B;AAAA;;AACEkE,0BAAgBiR,OAAO,CAACC,aAAD,CAAvB;;AA6PD,GA9PD;;;AAIEC;AAAA;;AACM,aAAqB,IAArB;AAAA,QAAEtU,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AACJ,QAAIiU,cAAc,GAAGjU,OAAO,CAACI,OAAR,CAAgB8T,YAArC;AAEA,QAAIC,UAAU,GACXzU,KAAK,CAAC0U,SAAN,IAAmB1U,KAAK,CAAC0U,SAAN,CAAgBpI,IAApC,IACCtM,KAAK,CAAC2U,WAAN,IAAqB3U,KAAK,CAAC2U,WAAN,CAAkBrI,IADxC,IAECiI,cAAc,IAAIvU,KAAK,CAAC4U,iBAFzB,IAGA,EAJF;AAMA,QAAIC,4BAA4B;AAC7B7U,SAAK,CAAC0U,SAAN,IAAmB1U,KAAK,CAAC0U,SAAN,CAAgB9H,iBAApC,IACC5M,KAAK,CAAC2U,WAAN,IAAqB3U,KAAK,CAAC2U,WAAN,CAAkB/H,iBADxC,IAEA,EAHF;AAKA,QAAIkI,YAAY,GAAG,KAAKT,aAAL,CAAmBrU,KAAK,CAAC+U,WAAzB,EAAsCzU,OAAO,CAACI,OAAR,CAAgBsU,UAAtD,CAAnB;AAEA,WACE7U,cAAC8U,WAAD,EAAY;AACVrP,WAAK,EAAE5F,KAAK,CAAC4F,KADH;AAEVzE,UAAI,EAAEnB,KAAK,CAACmB,IAFF;AAGVyC,iBAAW,EAAE5D,KAAK,CAAC4D,WAHT;AAIV6J,gBAAU,EAAEzN,KAAK,CAACyN,UAJR;AAKV0G,oBAAc,EAAEnU,KAAK,CAACmU;AALZ,KAAZ,EAOG,UAAChS,SAAD,EAAYlC,UAAZ,EAAwBiV,SAAxB,EAAiC;AAAK,aACrC/U;AACEoC,WAAG,EAAEJ,SADP;AAEE8D,YAAI,EAAC,UAFP;AAGE1F,iBAAS,EAAE,CAAC,iBAAD,EAAoBiC,MAApB,CAA2BvC,UAA3B,EAAuCD,KAAK,CAACgU,eAAN,IAAyB,EAAhE,EAAoExT,IAApE,CAAyE,GAAzE;AAHb,SAIM0U,SAJN,EAKMlV,KAAK,CAACmV,cALZ,GAOEhV;AAAKI,iBAAS,EAAC;AAAf,SACEJ;AAAKI,iBAAS,EAAC;AAAf,SACG4C,KAAI,CAACiS,cAAL,CAAoBpV,KAAK,CAACqV,gBAA1B,EAA4C,cAA5C,CADH,EAEGlS,KAAI,CAACiS,cAAL,CAAoBpV,KAAK,CAACsV,WAA1B,EAAuC,UAAvC,CAFH,EAGGnS,KAAI,CAACiS,cAAL,CAAoBpV,KAAK,CAAC4U,iBAA1B,EAA6C,WAA7C,CAHH,CADF,EAMEzU;AAAKI,iBAAS,EAAC;AAAf,SACG4C,KAAI,CAACoS,YAAL,CACCT,YADD,EAECD,4BAFD,EAGC,KAHD,EAIC,KAJD,EAKC,KALD,CADH,CANF,EAeE1U;AAAKI,iBAAS,EAAC;AAAf,SACG4C,KAAI,CAACoS,YAAL,CACCd,UADD,EAEC,EAFD,EAGCnO,OAAO,CAACtG,KAAK,CAAC0U,SAAP,CAHR,EAICpO,OAAO,CAACtG,KAAK,CAAC2U,WAAP,CAJR,EAKCrO,OAAO,CAACiO,cAAD,CALR,CADH,CAfF,EAwBEpU;AAAKI,iBAAS,EAAC;AAAf,SACG4C,KAAI,CAACqS,kBAAL,CAAwBxV,KAAK,CAACyV,gBAA9B,CADH,CAxBF,EA2BEtV,cAAC8T,WAAD,EAAY;AACV9S,YAAI,EAAEnB,KAAK,CAACmB,IADF;AAEVyC,mBAAW,EAAE5D,KAAK,CAAC4D,WAFT;AAGV6J,kBAAU,EAAEzN,KAAK,CAACyN,UAHR;AAIV0G,sBAAc,EAAEnU,KAAK,CAACmU;AAJZ,OAAZ,CA3BF,CAPF,CADqC;AA2CtC,KAlDH,CADF;AAsDD,GAvED;;AAyEAG,6CACEQ,YADF,EAEEY,cAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,eALF,EAK0B;AAElB,aAAK,GAAK,KAAI7V,KAAd;;AACN,QAAIA,KAAK,CAAC2G,QAAV,EAAoB;AAClB,aAAOmP,iBAAiB,CAAChB,YAAD,EAAe9U,KAAf,CAAxB;AACD;;AACD,WAAO,KAAK+V,sBAAL,CAA4BjB,YAA5B,EAA0CY,cAA1C,EAA0DC,UAA1D,EAAsEC,UAAtE,EAAkFC,eAAlF,CAAP;AACD,GAZD;;AAcAvB,uDACEhI,IADF,EACqB;AACnBoJ,gBAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,eALF,EAK0B;AAL1B;;AAOM,aAAwE,KAAKvV,OAAL,CAAaI,OAArF;AAAA,QAAE0S,aAAa,mBAAf;AAAA,QAAiB4C,gBAAgB,sBAAjC;AAAA,QAAmC7C,gBAAgB,sBAAnD;AAAA,QAAqDR,cAAc,oBAAnE;AACA,aAA4D,KAAK3S,KAAjE;AAAA,QAAEmB,IAAI,UAAN;AAAA,QAAQkC,UAAU,gBAAlB;AAAA,QAAoB4S,cAAc,oBAAlC;AAAA,QAAoCxI,UAAU,gBAA9C;AAAA,QAAgDpF,OAAO,aAAvD;AACJ,QAAI6N,QAAQ,GAAGP,UAAU,IAAIC,UAAd,IAA4BC,eAA3C;AACA,QAAI3C,UAAU,GAAGT,iBAAiB,CAACnG,IAAD,EAAOnL,IAAP,EAAakC,UAAb,EAAyBsP,cAAzB,CAAlC;;AACI,aAAkCM,sBAAsB,CAAC3G,IAAD,EAAO4G,UAAP,EAAmBC,gBAAnB,EAAqCC,aAArC,CAAxD;AAAA,QAAEG,aAAa,mBAAf;AAAA,QAAiB3E,YAAY,kBAA7B;;AAEJ,WACEzO,cAACgW,QAAD,EAAS,IAAT,EACG,KAAKC,kBAAL,CAAwBxH,YAAxB,EAAsCtC,IAAtC,CADH,EAEGiH,aAAa,CAAC5Q,GAAd,CAAkB,UAAC0T,YAAD,EAAa;AACxB,aAAG,GAAWA,YAAY,IAA1B;AAAA,UAAKpE,IAAI,GAAKoE,YAAY,KAA1B;AACN,UAAIC,UAAU,GAAGvJ,GAAG,CAACwJ,UAAJ,CAAeC,QAAf,CAAwBF,UAAzC;AACA,UAAIG,SAAS,GAAGP,QAAQ,IAAI5P,OAAO,CAAC,CAACoP,cAAc,CAACY,UAAD,CAAf,IAA+BrE,IAAhC,CAAnC;AACA,UAAIyE,MAAM,GAAGC,gBAAgB,CAAC1E,IAAI,IAAIA,IAAI,CAACpJ,IAAd,CAA7B;AACA,UAAI+N,MAAM,GAAI,CAACV,QAAD,IAAajE,IAAd,GAAsB9O,KAAI,CAAC0T,gBAAL,CAAsB5E,IAAtB,CAAtB,GAAoD;AAAE6E,YAAI,EAAE,CAAR;AAAWC,aAAK,EAAE;AAAlB,OAAjE;AACA,UAAIC,OAAO,GAAG1Q,OAAO,CAAC2L,IAAD,CAAP,IAAiBA,IAAI,CAACC,YAAL,GAAoB,CAAnD;AACA,UAAI2B,OAAO,GAAGvN,OAAO,CAAC2L,IAAD,CAAP,IAAkBA,IAAI,CAACpJ,IAAL,CAAU3E,GAAV,GAAgB+N,IAAI,CAACpJ,IAAL,CAAU5E,KAA3B,GAAoC+R,gBAAnE,CAP8B,CAOqD;;AAEnF,aACE7V;AACEI,iBAAS,EACP,+BACCyW,OAAO,GAAG,kCAAH,GAAwC,EADhD,CAFJ;AAKEnU,WAAG,EAAEyT,UALP;AAME9R,aAAK;AACHyS,oBAAU,EAAER,SAAS,GAAI,EAAJ,GAAiB;AADnC,WAEAC,MAFA,GAGAE,MAHA;AANP,SAYEzW,cAACyT,YAAD,EAAa9Q;AACXiK,WAAG,EAAEA,GADM;AAEX4I,kBAAU,EAAEA,UAFD;AAGXC,kBAAU,EAAEA,UAHD;AAIXC,uBAAe,EAAEA,eAJN;AAKXqB,kBAAU,EAAEZ,UAAU,KAAKL,cALhB;AAMXpC,eAAO,EAAEA;AANE,SAOPsD,UAAU,CAACpK,GAAD,EAAMU,UAAN,EAAkBpF,OAAlB,CAPH,CAAb,CAZF,CADF;AAwBD,KAjCA,CAFH,CADF;AAuCD,GApDD,CA3FF;;;AAkJEiM,mDAAmB1F,YAAnB,EAAkDtC,IAAlD,EAAqE;AAC/D,aAA8F,KAAKtM,KAAnG;AAAA,QAAEwN,aAAa,mBAAf;AAAA,QAAiB5J,WAAW,iBAA5B;AAAA,QAA8B6J,UAAU,gBAAxC;AAAA,QAA0CpF,OAAO,aAAjD;AAAA,QAAmD4N,cAAc,oBAAjE;AAAA,QAAmEvB,SAAS,eAA5E;AAAA,QAA8EC,WAAW,iBAAzF;AACJ,WACExU,cAACgW,QAAD,EAAS,IAAT,EACGvH,YAAY,CAACjM,GAAb,CAAiB,UAACyU,WAAD,EAAY;AAC5B,UAAIC,WAAW,GAAGV,gBAAgB,CAACS,WAAW,CAACvO,IAAb,CAAlC;AACA,UAAIuE,UAAU,GAAGkK,sBAAsB,CAACF,WAAW,CAACxG,OAAb,EAAsBtE,IAAtB,CAAvC;AACA,aACEnM,cAAC6M,eAAD,EAAgB;AACdnK,WAAG,EAAE0U,cAAc,CAACC,uBAAuB,CAACpK,UAAD,CAAxB,CADL;AAEdA,kBAAU,EAAEA,UAFE;AAGd1E,WAAG,EAAE2O,WAAW,CAAC3O,GAHH;AAIduF,cAAM,EAAEoJ,WAAW,CAACpJ,MAJN;AAKdT,qBAAa,EAAEA,aALD;AAMd5J,mBAAW,EAAEA,WANC;AAOd6J,kBAAU,EAAEA,UAPE;AAQdpF,eAAO,EAAEA,OARK;AASd4N,sBAAc,EAAEA,cATF;AAUdvB,iBAAS,EAAEA,SAVG;AAWdC,mBAAW,EAAEA;AAXC,OAAhB,CADF;AAeD,KAlBA,CADH,CADF;AAuBD,GAzBD;;AA2BAL,+CAAehI,IAAf,EAAoCmL,QAApC,EAAoD;AAC9C,aAAqB,IAArB;AAAA,QAAEzX,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AACJ,QAAI4S,UAAU,GAAGT,iBAAiB,CAACnG,IAAD,EAAOtM,KAAK,CAACmB,IAAb,EAAmBnB,KAAK,CAACqD,UAAzB,EAAqC/C,OAAO,CAACI,OAAR,CAAgBiS,cAArD,CAAlC,CAFkD,CAEoD;;AAEtG,QAAI+E,QAAQ,GAAGxE,UAAU,CAACvQ,GAAX,CAAe,UAACiQ,OAAD,EAAU3H,CAAV,EAAW;AACvC,UAAI8B,GAAG,GAAGT,IAAI,CAACrB,CAAD,CAAd;AACA,aACE9K;AACE0C,WAAG,EAAE8U,kBAAkB,CAAC5K,GAAG,CAACwJ,UAAL,CADzB;AAEEhW,iBAAS,EAAC,wBAFZ;AAGEiE,aAAK,EAAEmS,gBAAgB,CAAC/D,OAAD;AAHzB,SAKG6E,QAAQ,KAAK,UAAb,GACCtX,cAACyX,OAAD,EAAQ9U;AAACiK,WAAG,EAAEA;AAAN,SAAeoK,UAAU,CAACpK,GAAD,EAAM/M,KAAK,CAACyN,UAAZ,EAAwBzN,KAAK,CAACqI,OAA9B,CAAzB,CAAR,CADD,GAECwP,UAAU,CAACJ,QAAD,CAPd,CADF;AAWD,KAbc,CAAf;AAeA,WAAOtX,cAACgW,QAAD,EAAS,IAAT,EAAWuB,QAAX,CAAP;AACD,GApBD;;AAsBApD,mDAAmBhI,IAAnB,EAAsC;AAChC,aAAuB,KAAKtM,KAA5B;AAAA,QAAEqD,UAAU,gBAAZ;AAAA,QAAclC,IAAI,UAAlB;;AAEJ,QAAI,CAACkC,UAAL,EAAiB;AAAE,aAAO,IAAP;AAAa;;AAEhC,WAAOiJ,IAAI,CAAC3J,GAAL,CAAS,UAACoK,GAAD,EAAM9B,CAAN,EAAO;AAAK,aAC1B9K,cAACqI,gBAAD,EAAiB;AACfC,cAAM,EAAE,KADO;AAEftH,YAAI,EAAEA,IAFS;;AAIf0B,WAAG,EAAEoI;AAJU,OAAjB,EAMG,UAAC9I,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAgD;AAAK,eACpDnC;AACEoC,aAAG,EAAEJ,SADP;AAEE5B,mBAAS,EAAE,CAAC,gCAAD,EAAmCiC,MAAnC,CAA0CvC,UAA1C,EAAsDO,IAAtD,CAA2D,GAA3D,CAFb;AAGEgE,eAAK,EAAE;AAAEkE,eAAG,EAAErF,UAAU,CAACyP,cAAX,CAA0B/F,GAAG,CAAC9I,KAA9B,EAAqC9C,IAArC;AAAP;AAHT,WAKGmB,YALH,CADoD;AAQrD,OAdH,CAD0B;AAiB3B,KAjBM,CAAP;AAkBD,GAvBD;;AAyBAgS,iDAAiBwD,UAAjB,EAAuC;AACjC,aAAqB,KAAKxX,OAA1B;AAAA,QAAEyX,KAAK,WAAP;AAAA,QAASrX,OAAO,aAAhB;AACJ,QAAIsX,aAAa,GAAGtX,OAAO,CAACuX,gBAA5B;AACA,QAAIC,SAAS,GAAGJ,UAAU,CAAC/F,UAA3B,CAHqC,CAGA;;AACrC,QAAIoG,QAAQ,GAAGL,UAAU,CAAC/F,UAAX,GAAwB+F,UAAU,CAACjI,SAAlD,CAJqC,CAIsB;;AAC3D,QAAIiH,IAAJ,CALqC,CAK7B;;AACR,QAAIC,KAAJ,CANqC,CAM5B;;AAET,QAAIiB,aAAJ,EAAmB;;AAEjBG,cAAQ,GAAGzN,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYsN,SAAS,GAAG,CAACC,QAAQ,GAAGD,SAAZ,IAAyB,CAAjD,CAAX;AACD;;AAED,QAAIH,KAAJ,EAAW;AACTjB,UAAI,GAAG,IAAIqB,QAAX;AACApB,WAAK,GAAGmB,SAAR;AACD,KAHD,MAGO;AACLpB,UAAI,GAAGoB,SAAP;AACAnB,WAAK,GAAG,IAAIoB,QAAZ;AACD;;AAED,QAAInY,KAAK,GAAG;AACVoY,YAAM,EAAEN,UAAU,CAAC9F,UAAX,GAAwB,CADtB;AAEV8E,UAAI,EAAEA,IAAI,GAAG,GAAP,GAAa,GAFT;AAGVC,WAAK,EAAEA,KAAK,GAAG,GAAR,GAAc;AAHX,KAAZ;;AAMA,QAAIiB,aAAa,IAAI,CAACF,UAAU,CAAC5F,YAAjC,EAA+C;;AAE7ClS,WAAK,CAAC+X,KAAK,GAAG,YAAH,GAAkB,aAAxB,CAAL,GAA8C,KAAK,CAAnD,CAF6C,CAEO;AACrD;;AAED,WAAO/X,KAAP;AACD,GAjCD;;AAkCF;AA9PA,EAA6B+C,aAA7B;;SAgQgB+S,kBACdhB,cACAuD,IAMC;MANC5K,UAAU;MAAEpF,OAAO;MAAE4N,cAAc;MAAEvB,SAAS;MAAEC,WAAW;AAQ7D,MAAI2D,eAAe,GACjB,CAAC5D,SAAS,GAAGA,SAAS,CAAC9H,iBAAb,GAAiC,IAA3C,MACC+H,WAAW,GAAGA,WAAW,CAAC/H,iBAAf,GAAmC,IAD/C,KAEA,EAHF;AAIA,SACEzM,cAACgW,QAAD,EAAS,IAAT,EACGrB,YAAY,CAACnS,GAAb,CAAiB,UAACoK,GAAD,EAAI;AACpB,QAAIuJ,UAAU,GAAGvJ,GAAG,CAACwJ,UAAJ,CAAeC,QAAf,CAAwBF,UAAzC;AACA,WACEnW;AACE0C,SAAG,EAAEyT,UADP;AAEE9R,WAAK,EAAE;AAAEyS,kBAAU,EAAEqB,eAAe,CAAChC,UAAD,CAAf,GAA8B,QAA9B,GAA0C;AAAxD;AAFT,OAIEnW,cAACyT,YAAD,EAAa9Q;AACXiK,SAAG,EAAEA,GADM;AAEX4I,gBAAU,EAAE,KAFD;AAGXC,gBAAU,EAAE,KAHD;AAIXC,qBAAe,EAAE,KAJN;AAKXqB,gBAAU,EAAEZ,UAAU,KAAKL,cALhB;AAMXpC,aAAO,EAAE;AANE,OAOPsD,UAAU,CAACpK,GAAD,EAAMU,UAAN,EAAkBpF,OAAlB,CAPH,CAAb,CAJF,CADF;AAgBD,GAlBA,CADH,CADF;AAuBD;;AAED,SAASsO,gBAAT,CAA0BzD,UAA1B,EAAoD;AAClD,MAAI,CAACA,UAAL,EAAiB;AACf,WAAO;AAAExK,SAAG,EAAE,EAAP;AAAWuF,YAAM,EAAE;AAAnB,KAAP;AACD;;AACD,SAAO;AACLvF,OAAG,EAAEwK,UAAU,CAACjP,KADX;AAELgK,UAAM,EAAE,CAACiF,UAAU,CAAChP;AAFf,GAAP;AAID;;AAED,SAASoT,sBAAT,CACEiB,UADF,EAEElL,OAFF,EAEwB;AAEtB,SAAOkL,UAAU,CAAC5V,GAAX,CAAe,UAAC6V,QAAD,EAAS;AAAK,kBAAO,CAACA,QAAQ,CAAClF,KAAV,CAAP;AAAuB,GAApD,CAAP;AACF;;AChTA;AAAA;AAAA;AAAqCrU;;AAArC;AAAA;;AACUkE,6BAAmBiR,OAAO,CAAC/H,cAAD,CAA1B;AACAlJ,6BAAmBiR,OAAO,CAAC/H,cAAD,CAA1B;AACAlJ,kCAAwBiR,OAAO,CAAC/H,cAAD,CAA/B;AACAlJ,kCAAwBiR,OAAO,CAAC/H,cAAD,CAA/B;AACAlJ,mCAAyBiR,OAAO,CAAC/H,cAAD,CAAhC;AACAlJ,2BAAiBiR,OAAO,CAAC3H,qBAAD,CAAxB;AACAtJ,6BAAmBiR,OAAO,CAAC3H,qBAAD,CAA1B;AACAtJ,sBAAYC,SAAS,EAArB;AACAD,uBAAa,IAAIqI,MAAJ,EAAb;;AA2GT;;AAzGCiN;AAAA;;AACM,aAAqB,IAArB;AAAA,QAAEzY,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AACJ,QAAIgI,eAAe,GACjBhI,OAAO,CAACI,OAAR,CAAgBsH,YAAhB,IACAhI,KAAK,CAACqD,UADN,IAEArD,KAAK,CAACqD,UAAN,CAAiBkF,cAAjB,CAAgCvI,KAAK,CAACqI,OAAtC,CAHF,CAFF,CAKkD;;AAEhD,QAAItB,MAAM,GAAG/G,KAAK,CAAC0Y,KAAN,CAAYrO,MAAzB;AACA,QAAIsO,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB5Y,KAAK,CAAC+U,WAA5B,EAAyChO,MAAzC,CAAvB;AACA,QAAI8R,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB9Y,KAAK,CAACsV,WAA5B,EAAyCvO,MAAzC,CAAvB;AACA,QAAIgS,qBAAqB,GAAG,KAAKC,qBAAL,CAA2BhZ,KAAK,CAACqV,gBAAjC,EAAmDtO,MAAnD,CAA5B;AACA,QAAIkS,qBAAqB,GAAG,KAAKC,qBAAL,CAA2BlZ,KAAK,CAACyV,gBAAjC,EAAmD1O,MAAnD,CAA5B;AACA,QAAIoS,sBAAsB,GAAG,KAAKC,sBAAL,CAA4BpZ,KAAK,CAAC4U,iBAAlC,EAAqD7N,MAArD,CAA7B;AACA,QAAIsS,cAAc,GAAG,KAAKC,cAAL,CAAoBtZ,KAAK,CAAC0U,SAA1B,EAAqC3N,MAArC,CAArB;AACA,QAAIwS,gBAAgB,GAAG,KAAKC,gBAAL,CAAsBxZ,KAAK,CAAC2U,WAA5B,EAAyC5N,MAAzC,CAAvB;AAEA,WACE5G;AAAKI,eAAS,EAAC,kBAAf;AAAkCgC,SAAG,EAAE,KAAKJ;AAA5C,OACEhC;AACE8F,UAAI,EAAC,cADP;AAEEzB,WAAK,EAAE;AACLsE,gBAAQ,EAAE9I,KAAK,CAAC0L,aADX;AAEL5E,aAAK,EAAE9G,KAAK,CAAC2L;AAFR;AAFT,OAOG3L,KAAK,CAACkI,iBAPT,EAQE/H;AAAO8F,UAAI,EAAC;AAAZ,OACE9F;AAAI8F,UAAI,EAAC;AAAT,OACGjG,KAAK,CAACmL,IAAN,IACChL;AAAA;AAAgBI,eAAS,EAAC;AAA1B,OACEJ;AAAKI,eAAS,EAAC;AAAf,OACEJ;AAAKI,eAAS,EAAC;AAAf,OACG,OAAO+H,eAAP,KAA2B,QAA3B,IACCnI,cAACqI,gBAAD,EAAiB;AAACC,YAAM,MAAP;AAAQtH,UAAI,EAAEnB,KAAK,CAACqI;AAApB,KAAjB,EACG,UAAClG,SAAD,EAAYlC,UAAZ,EAAwBoC,UAAxB,EAAoCC,YAApC,EAAgD;AAAK,aACpDnC;AACEoC,WAAG,EAAEJ,SADP;AAEE5B,iBAAS,EAAE,CAAC,iCAAD,EAAoCiC,MAApC,CAA2CvC,UAA3C,EAAuDO,IAAvD,CAA4D,GAA5D,CAFb;AAGEgE,aAAK,EAAE;AAAEkE,aAAG,EAAEJ;AAAP;AAHT,SAKGhG,YALH,CADoD;AAQrD,KATH,CAFJ,CADF,CADF,CAFJ,EAsBGtC,KAAK,CAAC0Y,KAAN,CAAY/V,GAAZ,CAAgB,UAAC8W,IAAD,EAAOxO,CAAP,EAAQ;AAAK,aAC5B9K,cAACmU,OAAD,EAAQ;AACNzR,WAAG,EAAE4W,IAAI,CAAC5W,GADJ;AAEN+C,aAAK,EAAEzC,KAAI,CAACuW,UAAL,CAAgBtW,SAAhB,CAA0BqW,IAAI,CAAC5W,GAA/B,CAFD;AAGNe,mBAAW,EAAE5D,KAAK,CAAC4D,WAHb;AAINzC,YAAI,EAAEsY,IAAI,CAACtY,IAJL;AAKNkH,eAAO,EAAErI,KAAK,CAACqI,OALT;AAMNoF,kBAAU,EAAEzN,KAAK,CAACyN,UANZ;AAON0G,sBAAc,EAAEsF,IAAI,CAACtF,cAPf;AAQNgB,sBAAc,EAAEsE,IAAI,CAACtE,cARf;AASNnB,uBAAe,EAAEyF,IAAI,CAACzF,eAThB;AAUNxG,qBAAa,EAAEiM,IAAI,CAACjM,aAVd;AAWNuH,mBAAW,EAAE4D,gBAAgB,CAAC1N,CAAD,CAXvB;AAYNqK,mBAAW,EAAEuD,gBAAgB,CAAC5N,CAAD,CAZvB;AAaNoK,wBAAgB,EAAE0D,qBAAqB,CAAC9N,CAAD,CAbjC;AAcNwK,wBAAgB,EAAEwD,qBAAqB,CAAChO,CAAD,CAdjC;AAeN2J,yBAAiB,EAAEuE,sBAAsB,CAAClO,CAAD,CAfnC;AAgBNyJ,iBAAS,EAAE2E,cAAc,CAACpO,CAAD,CAhBnB;AAiBN0J,mBAAW,EAAE4E,gBAAgB,CAACtO,CAAD,CAjBvB;AAkBN5H,kBAAU,EAAErD,KAAK,CAACqD,UAlBZ;AAmBN4S,sBAAc,EAAEjW,KAAK,CAACiW,cAnBhB;AAoBNtP,gBAAQ,EAAE3G,KAAK,CAAC2G;AApBV,OAAR,CAD4B;AAuB7B,KAvBA,CAtBH,CADF,CARF,CADF,CADF;AA8DD,GA9ED;;AAgFA8R;AACE,SAAKkB,YAAL;AACD,GAFD;;AAIAlB;AACE,SAAKkB,YAAL;AACD,GAFD;;AAIAlB;AACQ,aAAK,GAAK,KAAIzY,KAAd;;AAEN,QACEA,KAAK,CAAC4Z,WAAN,IACA5Z,KAAK,CAAC2L,WAAN,KAAsB,IAFxB,CAE4B;AAF5B,MAGE;AACA3L,WAAK,CAAC4Z,WAAN,CACE,IAAI3N,aAAJ,CACE,KAAK9J,SAAL,CAAesB,OADjB,EAEEoW,cAAc,CAAC,KAAKH,UAAL,CAAgBvN,UAAjB,EAA6BnM,KAAK,CAAC0Y,KAAnC,CAFhB,EAGE,IAHF,EAGM;AACJ,WAJF,CADF;AAQD;AACF,GAhBD;;AAiBF;AApHA,EAAqC3V,aAArC;;AAsHA,SAAS8W,cAAT,CAAwBzN,KAAxB,EAA+DsM,KAA/D,EAAoF;AAClF,SAAOA,KAAK,CAAC/V,GAAN,CAAU,UAAC8W,IAAD,EAAK;AAAK,gBAAK,CAACA,IAAI,CAAC5W,GAAN,CAAL;AAAe,GAAnC,CAAP;AACF;ACzGA;;;;;;;AAG8B5D;;AAA9B;AAAA;;AACUkE,+BAAqBiR,OAAO,CAAC0F,kBAAD,CAA5B;AAIR3W,kBAAQ;AACNE,gBAAU,EAAE;AADN,KAAR;;AAqDAF,yBAAe,UAAC4K,EAAD,EAAuB;AACpC,UAAIA,EAAJ,EAAQ;AACN5K,aAAI,CAAC7C,OAAL,CAAayZ,4BAAb,CAA0C5W,KAA1C,EAAgD;AAC9C4K,YAAE,IAD4C;AAE9CiM,2BAAiB,EAAE7W,KAAI,CAACnD,KAAL,CAAWga;AAFgB,SAAhD;AAID,OALD,MAKO;AACL7W,aAAI,CAAC7C,OAAL,CAAa2Z,8BAAb,CAA4C9W,KAA5C;AACD;AACF,KATD;;AAuBAA,gCAAsB,UAAC+W,OAAD,EAAuB;AACrC,4BAAkB,GAAK/W,KAAI,CAACnD,KAAL,CAAUma,kBAAjC;AACA,oBAAU,GAAKhX,KAAI,CAACiX,KAAL,CAAU/W,UAAzB;;AAEN,UAAI8W,kBAAkB,IAAI9W,UAA1B,EAAsC;AACpC,YAAI6W,OAAO,CAAChZ,IAAZ,EAAkB;AAChB,cAAImZ,KAAG,GAAGhX,UAAU,CAAC0G,cAAX,CAA0BmQ,OAAO,CAAChZ,IAAlC,CAAV;AACAmZ,eAAG,GAAG3P,IAAI,CAAC4P,IAAL,CAAUD,KAAV,CAAN,CAFgB,CAEI;;AACpB,cAAIA,KAAJ,EAAS;AACPA,iBAAG,IAAI,CAAP,CADO,CACC;AACT;;AAEDF,4BAAkB,CAACE,KAAD,CAAlB;AACD;;AAED,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KAnBD;;AAqBAlX,4BAAkB,UAACoX,SAAD,EAAgC;AAChDpX,WAAI,CAACoX,SAAL,GAAiBA,SAAjB;AACD,KAFD;;AAIApX,6BAAmB,UAACE,UAAD,EAAuC;AACxDF,WAAI,CAAC8B,QAAL,CAAc;AAAE5B,kBAAU;AAAZ,OAAd;;AAEA,UAAIF,KAAI,CAACnD,KAAL,CAAWwa,YAAf,EAA6B;AAC3BrX,aAAI,CAACnD,KAAL,CAAWwa,YAAX,CAAwBnX,UAAxB;AACD;AACF,KAND;;;AAuDD;;AAxJCoX;AACM,aAAmB,IAAnB;AAAA,QAAEza,KAAK,WAAP;AAAA,QAASoa,KAAK,WAAd;;AAEJ,WACEja;AACEI,eAAS,EAAC,kBADZ;AAEEgC,SAAG,EAAE,KAAKmY,YAFZ;AAGElW,WAAK,EAAE;;;AAGLsC,aAAK,EAAE9G,KAAK,CAAC2L,WAHR;AAIL7C,gBAAQ,EAAE9I,KAAK,CAAC0L;AAJX;AAHT,OAUEvL,cAACsL,aAAD,EAAc;AACZN,UAAI,EAAEnL,KAAK,CAACmL,IADA;AAEZvH,iBAAW,EAAE5D,KAAK,CAAC4D,WAFP;AAGZlB,eAAS,EAAE1C,KAAK,CAAC0C,SAHL;AAIZiJ,iBAAW,EAAE3L,KAAK,CAAC2L,WAJP;AAKZC,eAAS,EAAE5L,KAAK,CAACqG,UAAN,GAAmBrG,KAAK,CAACiI,YAAzB,GAAwC,EALvC;AAMZyD,mBAAa,EAAE1L,KAAK,CAAC0L,aANT;AAOZxD,uBAAiB,EAAElI,KAAK,CAACmL,IAAN,GAAanL,KAAK,CAACkI,iBAAnB,GAAuC;AAAI;AAPlD;AAQZ4D,cAAQ,EAAE,KAAK6O;AARH,KAAd,CAVF,EAoBExa,cAACsY,eAAD,EAAgB;AACdC,WAAK,EAAE1Y,KAAK,CAAC0Y,KADC;AAEdvN,UAAI,EAAEnL,KAAK,CAACmL,IAFE;AAGdvH,iBAAW,EAAE5D,KAAK,CAAC4D,WAHL;AAIdyR,sBAAgB,EAAErV,KAAK,CAACqV,gBAJV;AAKdC,iBAAW,EAAEtV,KAAK,CAACsV,WALL;AAMdP,iBAAW,EAAE/U,KAAK,CAAC+U,WANL;AAOdH,uBAAiB,EAAE5U,KAAK,CAAC4U,iBAPX;AAQdqB,oBAAc,EAAEjW,KAAK,CAACiW,cARR;AASdvB,eAAS,EAAE1U,KAAK,CAAC0U,SATH;AAUdC,iBAAW,EAAE3U,KAAK,CAAC2U,WAVL;AAWdlH,gBAAU,EAAEzN,KAAK,CAACyN,UAXJ;AAYdpF,aAAO,EAAErI,KAAK,CAACqI,OAZD;AAadoN,sBAAgB,EAAEzV,KAAK,CAACyV,gBAbV;AAcd9J,iBAAW,EAAE3L,KAAK,CAAC2L,WAdL;AAedD,mBAAa,EAAE1L,KAAK,CAAC0L,aAfP;AAgBdxD,uBAAiB,EAAElI,KAAK,CAACkI,iBAhBX;AAiBd7E,gBAAU,EAAE+W,KAAK,CAAC/W,UAjBJ;AAkBduW,iBAAW,EAAE,KAAKgB,eAlBJ;AAmBdjU,cAAQ,EAAE3G,KAAK,CAAC2G;AAnBF,KAAhB,CApBF,CADF;AA4CD,GA/CD;;AA4DA8T;AACE,SAAKI,eAAL,GAAuB,KAAKva,OAAL,CAAawa,qBAAb,CAAmC,KAAKC,mBAAxC,CAAvB;AACD,GAFD;;AAIAN,oDAAmBO,SAAnB,EAA2C;AACzC,SAAKH,eAAL,CAAqBI,MAArB,CAA4BD,SAAS,CAACpX,WAAV,KAA0B,KAAK5D,KAAL,CAAW4D,WAAjE;AACD,GAFD;;AAIA6W;AACE,SAAKI,eAAL,CAAqBK,MAArB;AACD,GAFD;;AAqCAT,0CAASU,YAAT,EAA+BC,WAA/B,EAAkD;AAC5C,aAAuB,KAAK9a,OAA5B;AAAA,QAAEc,OAAO,aAAT;AAAA,QAAWV,OAAO,aAAlB;AACE,iBAAS,GAAK,KAAI6Z,SAAlB;AACA,mBAAW,GAAK,KAAKva,KAAL,CAAU4D,WAA1B;AACA,kBAAU,GAAK,KAAKwW,KAAL,CAAU/W,UAAzB;;AACF,aAAiC,KAAKyW,kBAAL,CAAwB,KAAK9Z,KAAL,CAAWoJ,YAAnC,EAAiD1I,OAAO,CAAC2a,YAAzD,CAAjC;AAAA,QAAEA,YAAY,kBAAd;AAAA,QAAgBC,YAAY,kBAA5B;;AAEJ,QAAIC,QAAQ,GAAGhB,SAAS,CAACiB,WAAV,CAAsBL,YAAtB,CAAf;AACA,QAAI3Q,SAAS,GAAGnH,UAAU,CAAC8F,SAAX,CAAqBsS,UAArB,CAAgCL,WAAhC,CAAhB;;AAEA,QAAIG,QAAQ,IAAI,IAAZ,IAAoB/Q,SAAS,IAAI,IAArC,EAA2C;AACzC,UAAIiP,IAAI,GAAG,KAAKzZ,KAAL,CAAW0Y,KAAX,CAAiB6C,QAAjB,CAAX;AACA,UAAIG,OAAO,GAAGrY,UAAU,CAAC8F,SAAX,CAAqB2B,IAArB,CAA0BN,SAA1B,CAAd;AACA,UAAImR,UAAU,GAAGtY,UAAU,CAAC8F,SAAX,CAAqB4B,SAArB,CAA+BP,SAA/B,CAAjB;AACA,UAAIoR,OAAO,GAAG,CAACR,WAAW,GAAGM,OAAf,IAA0BC,UAAxC,CAJyC,CAIS;;AAClD,UAAIE,cAAc,GAAGnR,IAAI,CAACG,KAAL,CAAW+Q,OAAO,GAAGN,YAArB,CAArB,CALyC,CAKc;;AACvD,UAAIQ,SAAS,GAAGtR,SAAS,GAAG8Q,YAAZ,GAA2BO,cAA3C;AAEA,UAAIE,OAAO,GAAG,KAAK/b,KAAL,CAAW0Y,KAAX,CAAiB6C,QAAjB,EAA2Bpa,IAAzC;AACA,UAAID,IAAI,GAAG8a,YAAY,CACrBpY,WAAW,CAACiG,WADS,EAErBoS,gBAAgB,CAACZ,YAAD,EAAeS,SAAf,CAFK,CAAvB;AAKA,UAAI7X,KAAK,GAAG7C,OAAO,CAAC8a,GAAR,CAAYH,OAAZ,EAAqB7a,IAArB,CAAZ;AACA,UAAIgD,GAAG,GAAG9C,OAAO,CAAC8a,GAAR,CAAYjY,KAAZ,EAAmBoX,YAAnB,CAAV;AAEA,aAAO;AACLzX,mBAAW,aADN;AAELvE,gBAAQ;AACNwE,eAAK,EAAE;AAAEI,iBAAK,OAAP;AAASC,eAAG;AAAZ,WADD;AAEN/E,gBAAM,EAAE;AAFF,WAGHsa,IAAI,CAACjM,aAHF,CAFH;AAOL2O,aAAK,EAAE5B,SAAS,CAACnQ,GAAV,CAAcmR,QAAd,CAPF;AAQLtJ,YAAI,EAAE;AACJ6E,cAAI,EAAEyD,SAAS,CAAC6B,KAAV,CAAgBb,QAAhB,CADF;AAEJxE,eAAK,EAAEwD,SAAS,CAAC8B,MAAV,CAAiBd,QAAjB,CAFH;AAGJ7S,aAAG,EAAEgT,OAHD;AAIJzN,gBAAM,EAAEyN,OAAO,GAAGC;AAJd,SARD;AAcLW,aAAK,EAAE;AAdF,OAAP;AAgBD;;AAED,WAAO,IAAP;AACD,GA9CD;;AA+CF;AAjKA,EAA8BpT;;AAmK9B,SAAS4Q,kBAAT,CAA4B1Q,YAA5B,EAAoDmT,oBAApD,EAAyF;AACvF,MAAIlB,YAAY,GAAGkB,oBAAoB,IAAInT,YAA3C;AACA,MAAIkS,YAAY,GAAGkB,oBAAoB,CAACpT,YAAD,EAAeiS,YAAf,CAAvC;;AAEA,MAAIC,YAAY,KAAK,IAArB,EAA2B;AACzBD,gBAAY,GAAGjS,YAAf;AACAkS,gBAAY,GAAG,CAAf,CAFyB;AAI1B;;AAED,SAAO;AAAED,gBAAY,cAAd;AAAgBC,gBAAY;AAA5B,GAAP;AACF;;;;;ACtOuCrc;;AAAvC;;AAoBC;;AAnBCwd,qDAAW5Y,KAAX,EAA6B6Y,SAA7B,EAAmD;AACjD,QAAIpQ,IAAI,GAAkB,EAA1B;;AAEA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGkQ,SAAS,CAACrS,MAAlC,EAA0CmC,GAAG,IAAI,CAAjD,EAAoD;AAClD,UAAImQ,QAAQ,GAAGC,eAAe,CAAC/Y,KAAD,EAAQ6Y,SAAS,CAAClQ,GAAD,CAAjB,CAA9B;;AAEA,UAAImQ,QAAJ,EAAc;AACZrQ,YAAI,CAAC9G,IAAL,CAAU;AACRvB,eAAK,EAAE0Y,QAAQ,CAAC1Y,KADR;AAERC,aAAG,EAAEyY,QAAQ,CAACzY,GAFN;AAGR2Y,iBAAO,EAAEF,QAAQ,CAAC1Y,KAAT,CAAe0F,OAAf,OAA6B9F,KAAK,CAACI,KAAN,CAAY0F,OAAZ,EAH9B;AAIRmT,eAAK,EAAEH,QAAQ,CAACzY,GAAT,CAAayF,OAAb,OAA2B9F,KAAK,CAACK,GAAN,CAAUyF,OAAV,EAJ1B;AAKR6C,aAAG;AALK,SAAV;AAOD;AACF;;AAED,WAAOF,IAAP;AACD,GAlBD;;AAmBF;AApBA,EAAuCyQ;;;;;AC4CN9d;;AAAjC;AAAA;;AACUkE,2BAAiBiR,OAAO,CAAC4I,cAAD,CAAxB;AACA7Z,mBAAS,IAAIsZ,iBAAJ,EAAT;AACAtZ,wBAAcC,SAAS,EAAvB;;AAsCT;;AApCC6Z;AAAA;;AACM,aAAqB,IAArB;AAAA,QAAEjd,KAAK,WAAP;AAAA,QAASM,OAAO,aAAhB;;AACE,mBAAW,GAAoBN,KAAK,YAApC;AAAA,QAAakd,aAAa,GAAKld,KAAK,cAApC;AAEN,QAAI+H,cAAc,GAAGzH,OAAO,CAACI,OAAR,CAAgBsH,YAArC;AACA,QAAI0U,SAAS,GAAG,KAAKM,cAAL,CAAoBE,aAApB,EAAmCtZ,WAAnC,EAAgDtD,OAAO,CAACc,OAAxD,CAAhB,CALF;;;AASE,WACEjB,cAACgI,QAAD,EAAS;AAACC,UAAI,EAAEL,cAAc,GAAG,QAAH,GAAc;AAAnC,KAAT,EACG,UAACM,OAAD,EAAsBoF,UAAtB,EAA2C;AAAK,aAC/CtN,cAACsa,QAAD,EAAS3X;AACPP,WAAG,EAAEY,KAAI,CAACga;AADH,SAEHha,KAAI,CAACia,MAAL,CAAYC,UAAZ,CAAuBrd,KAAvB,EAA8B4D,WAA9B,EAA2C,IAA3C,EAAiDtD,OAAjD,EAA0Doc,SAA1D,CAFG,EAEiE;AACxE/V,gBAAQ,EAAE3G,KAAK,CAAC2G,QADwD;AAExEwE,YAAI,EAAEnL,KAAK,CAACmL,IAF4D;AAGxEvH,mBAAW,EAAEA,WAH2D;AAIxElB,iBAAS,EAAE1C,KAAK,CAAC0C,SAJuD;AAKxE0G,oBAAY,EAAEpJ,KAAK,CAACoJ,YALoD;AAMxEsP,aAAK,EAAEwE,aAAa,CAACxE,KAAd,CAAoB,CAApB,CANiE;AAOxExQ,yBAAiB,EAAElI,KAAK,CAACkI,iBAP+C;AAQxEwD,qBAAa,EAAE1L,KAAK,CAAC0L,aARmD;AASxEC,mBAAW,EAAE3L,KAAK,CAAC2L,WATqD;AAUxE1D,oBAAY,EAAEjI,KAAK,CAACiI,YAVoD;AAWxE5B,kBAAU,EAAErG,KAAK,CAACqG,UAXsD;AAYxEgC,eAAO,EAAEA,OAZ+D;AAaxEoN,wBAAgB,EAAE1N,cAAc,IAAI5E,KAAI,CAACia,MAAL,CAAYE,YAAZ,CAAyBjV,OAAzB,EAAkC/H,OAAlC,EAA2Coc,SAA3C,CAboC;AAcxEjP,kBAAU,EAAEA,UAd4D;AAexE0M,0BAAkB,EAAEna,KAAK,CAACma,kBAf8C;AAgBxEK,oBAAY,EAAExa,KAAK,CAACwa;AAhBoD,OAFjE,CAAT,CAD+C;AAqBhD,KAtBH,CADF;AA0BD,GAnCD;;AAoCF;AAzCA,EAAiCtR;;SA2CjB8T,eAAeE,eAA8BtZ,aAA0BxC,SAAgB;AACrG,MAAImc,MAAM,GAAgB,EAA1B;;AAEA,OAAiB,8BAAa,CAACC,WAA/B,EAAiB1Q,cAAjB,EAAiBA,IAAjB,EAA4C;AAAvC,QAAI3L,IAAI,SAAR;AACHoc,UAAM,CAAC/X,IAAP,CAAY;AACVvB,WAAK,EAAE7C,OAAO,CAAC8a,GAAR,CAAY/a,IAAZ,EAAkByC,WAAW,CAACiG,WAA9B,CADG;AAEV3F,SAAG,EAAE9C,OAAO,CAAC8a,GAAR,CAAY/a,IAAZ,EAAkByC,WAAW,CAACkG,WAA9B;AAFK,KAAZ;AAID;;AAED,SAAOyT,MAAP;AACF,C,CClFA;AACA;;;AACA,IAAME,mBAAmB,GAAG,CAC1B;AAAEC,OAAK,EAAE;AAAT,CAD0B,EAE1B;AAAEC,SAAO,EAAE;AAAX,CAF0B,EAG1B;AAAEA,SAAO,EAAE;AAAX,CAH0B,EAI1B;AAAEC,SAAO,EAAE;AAAX,CAJ0B,EAK1B;AAAEA,SAAO,EAAE;AAAX,CAL0B,CAA5B;;SAQgBC,eACdhU,aACAC,aACAgU,uBACA1U,cACAhI,SAAgB;AAEhB,MAAI2c,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAf;AACA,MAAIC,QAAQ,GAAGpU,WAAf;AACA,MAAIqU,YAAY,GAAGlU,cAAc,CAAC,CAAD,CAAjC;AACA,MAAImU,aAAa,GAAGL,qBAAqB,IAAIM,oBAAoB,CAAChV,YAAD,CAAjE;AACA,MAAIiV,KAAK,GAAmB,EAA5B;;AAEA,SAAOzU,SAAS,CAACqU,QAAD,CAAT,GAAsBrU,SAAS,CAACE,WAAD,CAAtC,EAAqD;AACnD,QAAI3I,IAAI,GAAGC,OAAO,CAAC8a,GAAR,CAAY6B,QAAZ,EAAsBE,QAAtB,CAAX;AACA,QAAI/d,SAAS,GAAGsc,oBAAoB,CAAC0B,YAAD,EAAeC,aAAf,CAApB,KAAsD,IAAtE;AAEAE,SAAK,CAAC7Y,IAAN,CAAW;AACTrE,UAAI,MADK;AAETD,UAAI,EAAE+c,QAFG;AAGTpb,SAAG,EAAE1B,IAAI,CAACmd,WAAL,EAHI;AAIT7d,gBAAU,EAAE8d,mBAAmB,CAACpd,IAAD,CAJtB;AAKTjB,eAAS;AALA,KAAX;AAQA+d,YAAQ,GAAGjC,YAAY,CAACiC,QAAD,EAAW7U,YAAX,CAAvB;AACA8U,gBAAY,GAAGlC,YAAY,CAACkC,YAAD,EAAe9U,YAAf,CAA3B;AACD;;AAED,SAAOiV,KAAP;AACD,C,CAED;;;AACA,SAASD,oBAAT,CAA8BhV,YAA9B,EAA0C;AACxC,MAAI6B,CAAJ;AACA,MAAIkT,aAAJ;AACA,MAAIK,aAAJ,CAHwC;;AAMxC,OAAKvT,CAAC,GAAGwS,mBAAmB,CAACpT,MAApB,GAA6B,CAAtC,EAAyCY,CAAC,IAAI,CAA9C,EAAiDA,CAAC,IAAI,CAAtD,EAAyD;AACvDkT,iBAAa,GAAGnU,cAAc,CAACyT,mBAAmB,CAACxS,CAAD,CAApB,CAA9B;AACAuT,iBAAa,GAAGhC,oBAAoB,CAAC2B,aAAD,EAAgB/U,YAAhB,CAApC;;AACA,QAAIoV,aAAa,KAAK,IAAlB,IAA0BA,aAAa,GAAG,CAA9C,EAAiD;AAC/C,aAAOL,aAAP;AACD;AACF;;AAED,SAAO/U,YAAP,CAdwC,CAcrB;AACrB;;;;;AC/DqCnK;;AAArC;AAAA;;AACUkE,+BAAqBiR,OAAO,CAACqK,kBAAD,CAA5B;AACAtb,2BAAiBiR,OAAO,CAACyJ,cAAD,CAAxB;;AAkFT;;AAhFCa;AAAA;;AACM,aAA6C,KAAKpe,OAAlD;AAAA,QAAEI,OAAO,aAAT;AAAA,QAAWU,OAAO,aAAlB;AAAA,QAAoBud,oBAAoB,0BAAxC;AACE,aAAK,GAAK,KAAI3e,KAAd;AACA,mBAAW,GAAKA,KAAK,YAArB;AACN,QAAIkd,aAAa,GAAG,KAAKuB,kBAAL,CAAwB7a,WAAxB,EAAqC+a,oBAArC,CAApB;AACA,QAAIC,UAAU,GAAG,KAAKC,cAAL,CAAoBD,UAApB,CAA+B5e,KAA/B,CAAjB;AACA,QAAI0C,SAAS,GAAG,KAAKmb,cAAL,CACdja,WAAW,CAACiG,WADE,EAEdjG,WAAW,CAACkG,WAFE,EAGdpJ,OAAO,CAACoe,iBAHM,EAIdpe,OAAO,CAAC0I,YAJM,EAKdhI,OALc,CAAhB;AAOM,mBAAW,GAAKV,OAAO,YAAvB;AACN,QAAIqe,eAAe,GAAG,CAAC/X,WAAvB;AACA,QAAIgY,eAAe,GAAGhY,WAAtB;AAEA,QAAIiY,aAAa,GAAGve,OAAO,CAACwe,UAAR,IAClB/e,cAACgf,SAAD,EAAU;AACRC,WAAK,EAAElC,aAAa,CAACM,WADb;AAER5Z,iBAAW,EAAEA,WAFL;AAGRyb,0BAAoB,MAHZ;AAIRC,iBAAW,EAAEP,eAAe,GAAG,KAAKrX,cAAR,GAAyB;AAJ7C,KAAV,CADF;;AASA,QAAI7C,aAAa,GAAInE,OAAO,CAAC6e,UAAR,KAAuB,KAAxB,IAAmC,UAAC3X,UAAD,EAAqC;AAAK,aAC/FzH,cAACqf,QAAD,EAAS1c,aACH8b,UAAU,CAACzf,MADR,EACc;AACrByE,mBAAW,EAAEA,WADQ;AAErBsZ,qBAAa,EAAEA,aAFM;AAGrBuC,wBAAgB,EAAE/e,OAAO,CAAC+e,gBAHL;AAIrB/T,qBAAa,EAAE9D,UAAU,CAAC8D,aAJL;AAKrBgU,oBAAY,EAAE9X,UAAU,CAACM,iBALJ;AAMrByX,sBAAc,EAAEZ,eAAe,GAAG5b,KAAI,CAAC0E,kBAAR,GAA6B,IANvC;AAOrB+X,uBAAe,EAAE,KAPI;AAQrBvZ,kBAAU,EAAE,KARS;AASrBwZ,wBAAgB,EAAE1c,KAAI,CAAC0C,WATF;AAUrB8F,mBAAW,EAAE/D,UAAU,CAAC+D,WAVH;AAWrB1D,oBAAY,EAAEL,UAAU,CAACK,YAXJ;AAYrBtB,gBAAQ,EAAE3G,KAAK,CAAC2G;AAZK,OADd,EAcHxD,KAAI,CAAC2c,sBAAL,EAdG,CAAT,CAD+F;AAiBhG,KAjBD;;AAmBA,QAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACnY,UAAD,EAAqC;AAAK,aAC9DzH,cAAC8c,WAAD,EAAYna,aACN8b,UAAU,CAACxf,KADL,EACU;AACpB8d,qBAAa,EAAEA,aADK;AAEpBtZ,mBAAW,EAAEA,WAFO;AAGpBuH,YAAI,EAAE4T,eAHc;AAIpB3V,oBAAY,EAAE1I,OAAO,CAAC0I,YAJF;AAKpB1G,iBAAS,EAAEA,SALS;AAMpBiE,gBAAQ,EAAE3G,KAAK,CAAC2G,QANI;AAOpBuB,yBAAiB,EAAEN,UAAU,CAACM,iBAPV;AAQpBwD,qBAAa,EAAE9D,UAAU,CAAC8D,aARN;AASpBC,mBAAW,EAAE/D,UAAU,CAAC+D,WATJ;AAUpB1D,oBAAY,EAAEL,UAAU,CAACK,YAVL;AAWpBuS,oBAAY,EAAErX,KAAI,CAACwX,gBAXC;AAYpBtU,kBAAU,EAAEuB,UAAU,CAACvB,UAZH;AAapB8T,0BAAkB,EAAEhX,KAAI,CAAC6c;AAbL,OADV,CAAZ,CAD8D;AAiB/D,KAjBD;;AAmBA,WAAOhB,eAAe,GAClB,KAAKiB,mBAAL,CACAhB,aADA,EAEApa,aAFA,EAGAkb,eAHA,EAIA7C,aAAa,CAACnW,MAJd,EAKAC,WALA,EAMAtE,SANA,EAOA,KAAK0X,KAAL,CAAW/W,UAPX,CADkB,GAUlB,KAAK6c,kBAAL,CACAjB,aADA,EAEApa,aAFA,EAGAkb,eAHA,CAVJ;AAeD,GA/ED;;AAgFF;AApFA,EAAqC7a;;SAsFrBuZ,mBAAmB7a,aAA0B+a,sBAA0C;AACrG,MAAIwB,SAAS,GAAG,IAAIC,cAAJ,CAAmBxc,WAAW,CAACE,WAA/B,EAA4C6a,oBAA5C,CAAhB;AAEA,SAAO,IAAI0B,aAAJ,CAAkBF,SAAlB,EAA6B,KAA7B,CAAP;AACF;;ACxGO,IAAMG,eAAe,GAAG;AAC7Bf,YAAU,EAAEjZ;AADiB,CAAxB;ACeP,WAAeia,YAAY,CAAC;AAC1BC,aAAW,EAAE,cADa;AAE1BC,gBAAc,EAAEH,eAFU;AAG1BI,OAAK,EAAE;AAELC,YAAQ,EAAE;AACRC,eAAS,EAAElC,eADH;AAERmC,oBAAc,EAAE,IAFR;AAGRtB,gBAAU,EAAE,IAHJ;AAIRnW,kBAAY,EAAE,UAJN;AAKR6O,sBAAgB,EAAE,IALV,CAKc;;AALd,KAFL;AAUL6I,eAAW,EAAE;AACXrb,UAAI,EAAE,UADK;AAEXyE,cAAQ,EAAE;AAAE6W,YAAI,EAAE;AAAR;AAFC,KAVR;AAeLC,gBAAY,EAAE;AACZvb,UAAI,EAAE,UADM;AAEZyE,cAAQ,EAAE;AAAE+W,aAAK,EAAE;AAAT;AAFE;AAfT;AAHmB,CAAD,CAA3B","names":["__extends","AllDaySplitter","allDay","timed","dateSpan","eventDef","hasBgRendering","Splitter","DEFAULT_SLAT_LABEL_FORMAT","createFormatter","hour","minute","omitZeroMinute","meridiem","TimeColsAxisCell","props","classNames","isLabeled","createElement","ViewContextType","Consumer","context","className","join","isoTimeStr","options","viewApi","labelFormat","slotLabelFormat","Array","isArray","hookProps","level","time","date","dateEnv","toDate","view","text","format","RenderHook","slotLabelClassNames","content","slotLabelContent","defaultContent","renderInnerContent","didMount","slotLabelDidMount","willUnmount","slotLabelWillUnmount","rootElRef","customClassNames","innerElRef","innerContent","ref","concat","TimeBodyAxis","slatMetas","map","slatMeta","key","__assign","BaseComponent","DEFAULT_WEEK_NUM_FORMAT","week","AUTO_ALL_DAY_MAX_EVENT_ROWS","_this","createRef","slatCoords","scrollTop","scrollerEl","scrollerElRef","current","rowKey","frameHeight","dateProfile","range","renderRange","dayCnt","diffDays","start","end","navLinkAttrs","buildNavLinkAttrs","weekNumbers","WeekNumberRoot","defaultFormat","style","height","rowHeight","allDayText","allDayClassNames","allDayContent","renderAllDayInner","allDayDidMount","allDayWillUnmount","setState","TimeColsView","headerRowContent","timeContent","sections","stickyHeaderDates","getStickyHeaderDates","push","type","isSticky","chunk","elRef","headerElRef","tableClassName","rowContent","outerContent","role","theme","getClass","liquid","expandRows","Boolean","ViewRoot","viewSpec","SimpleScrollGrid","isHeightAuto","forPrint","collapsibleWidth","cols","width","colCnt","dayMinWidth","ScrollGrid","pluginHooks","scrollGridImpl","Error","stickyFooterScrollbar","getStickyFooterScrollbar","syncRowHeights","chunks","arg","renderHeadAxis","rowSyncHeights","contentArg","renderTableRowAxis","colSpan","isNowIndicator","nowIndicator","clientHeight","tableColGroupNode","NowTimer","unit","nowDate","nowIndicatorTop","safeComputeTop","NowIndicatorRoot","isAxis","top","renderScrollShim","colGroups","span","minWidth","dayMaxEvents","dayMaxEventRows","undefined","DateComponent","positions","slotDuration","TimeColsSlatsCoords","rangeContainsMarker","currentRange","startOfDayDate","startOfDay","timeMs","valueOf","asRoughMs","slotMinTime","slotMaxTime","computeTimeTop","createDuration","when","duration","len","els","length","slatCoverage","milliseconds","slatIndex","slatRemainder","Math","max","min","floor","tops","getHeight","TimeColsSlatsBody","i","slatElRefs","axis","slotLaneClassNames","slotLaneContent","slotLaneDidMount","slotLaneWillUnmount","RefMap","TimeColsSlats","tableMinWidth","clientWidth","minHeight","updateSizing","onCoords","rootEl","offsetHeight","PositionCache","collectSlatEls","currentMap","elMap","splitSegsByCol","segs","segsByCol","col","splitInteractionByCol","ui","byRow","affectedInstances","isEvent","_i","seg","TimeColMoreLink","MoreLinkRoot","allDayDate","moreCnt","hiddenSegs","allSegs","alignmentElRef","renderMoreLinkInner","extraDateSpan","todayRange","popoverContent","handleClick","title","isExpanded","popoverId","el","setRef","bottom","onClick","shortText","buildPositioning","segInputs","strictOrder","maxStackCnt","hierarchy","SegHierarchy","hiddenEntries","addSegs","hiddenGroups","groupIntersectingEntries","web","buildWeb","stretchWeb","segRects","webToRects","buildNode","cacheable","lateral","siblingRange","findNextLevelSegs","nextLevelRes","buildNodes","entry","entriesByLevel","nextLevelNodes","thickness","lateralStart","lateralEnd","pairs","sort","cmpDescPressures","extractNode","a","b","subjectLevel","subjectLateral","subjectEntry","afterSubject","levelCoords","levelCnt","entries","searchIndex","binarySearch","getEntrySpanEnd","topLevelNodes","totalThickness","stretchNode","node","startCoord","prevThickness","allThickness","thicknessFraction","endCoord","newChildren","childNode","res","newThickness","rects","processNode","levelCoord","stackDepth","rect","stackForward","processNodes","nodes","keyFunc","workFunc","cache","args","computeSegVCoords","colDate","eventMinHeight","vcoords","spanStart","computeDateTop","spanEnd","round","computeFgSegPlacements","segVCoords","eventOrderStrict","eventMaxStack","dumbSegs","index","segPlacements","segRect","_b","dumbSeg","DEFAULT_TIME_FORMAT","TimeColEvent","isShort","StandardEvent","defaultTimeFormat","extraClassNames","TimeColMisc","DayCellContent","extraHookProps","memoize","sortEventSegs","TimeCol","isSelectMirror","selectMirror","mirrorSegs","eventDrag","eventResize","dateSelectionSegs","interactionAffectedInstances","sortedFgSegs","fgEventSegs","eventOrder","DayCellRoot","dataAttrs","extraDataAttrs","renderFillSegs","businessHourSegs","bgEventSegs","renderFgSegs","renderNowIndicator","nowIndicatorSegs","segIsInvisible","isDragging","isResizing","isDateSelecting","renderPlainFgSegs","renderPositionedFgSegs","eventShortHeight","eventSelection","isMirror","Fragment","renderHiddenGroups","segPlacement","instanceId","eventRange","instance","isVisible","vStyle","computeSegVStyle","hStyle","computeSegHStyle","left","right","isInset","visibility","isSelected","getSegMeta","hiddenGroup","positionCss","compileSegsFromEntries","buildIsoString","computeEarliestSegStart","fillType","children","buildEventRangeKey","BgEvent","renderFill","segHCoords","isRtl","shouldOverlap","slotEventOverlap","nearCoord","farCoord","zIndex","_a","hiddenInstances","segEntries","segEntry","TimeColsContent","cells","fgEventSegsByRow","splitFgEventSegs","bgEventSegsByRow","splitBgEventSegs","businessHourSegsByRow","splitBusinessHourSegs","nowIndicatorSegsByRow","splitNowIndicatorSegs","dateSelectionSegsByRow","splitDateSelectionSegs","eventDragByRow","splitEventDrag","eventResizeByRow","splitEventResize","cell","cellElRefs","updateCoords","onColCoords","collectCellEls","processSlotOptions","registerInteractiveComponent","isHitComboAllowed","unregisterInteractiveComponent","request","onScrollTopRequest","state","top_1","ceil","colCoords","onSlatCoords","TimeCols","handleRootEl","handleSlatCoords","handleColCoords","scrollResponder","createScrollResponder","handleScrollRequest","prevProps","update","detach","positionLeft","positionTop","snapDuration","snapsPerSlot","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","dayDate","addDurations","multiplyDuration","add","dayEl","lefts","rights","layer","snapDurationOverride","wholeDivideDurations","DayTimeColsSlicer","dayRanges","segRange","intersectRanges","isStart","isEnd","Slicer","buildDayRanges","DayTimeCols","dayTableModel","timeColsRef","slicer","sliceProps","sliceNowDate","ranges","headerDates","STOCK_SUB_DURATIONS","hours","minutes","seconds","buildSlatMetas","explicitLabelInterval","dayStart","Date","slatTime","slatIterator","labelInterval","computeLabelInterval","metas","toISOString","formatIsoTimeString","slotsPerLabel","buildTimeColsModel","DayTimeColsView","dateProfileGenerator","splitProps","allDaySplitter","slotLabelInterval","hasAttachedAxis","hasDetachedAxis","headerContent","dayHeaders","DayHeader","dates","datesRepDistinctDays","renderIntro","allDaySlot","DayTable","nextDayThreshold","colGroupNode","renderRowIntro","showWeekNumbers","headerAlignElRef","getAllDayMaxEventProps","timeGridContent","handleScrollTopRequest","renderHScrollLayout","renderSimpleLayout","daySeries","DaySeriesModel","DayTableModel","OPTION_REFINERS","createPlugin","initialView","optionRefiners","views","timeGrid","component","usesMinMaxTime","timeGridDay","days","timeGridWeek","weeks"],"sources":["/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/AllDaySplitter.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsAxisCell.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeBodyAxis.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsView.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsSlatsCoords.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsSlatsBody.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsSlats.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsSeg.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColMoreLink.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/seg-web.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/event-placement.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColEvent.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColMisc.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeCol.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeColsContent.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/TimeCols.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/DayTimeColsSlicer.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/DayTimeCols.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/time-slat-meta.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/DayTimeColsView.tsx","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/options.ts","/home/jinsonshaju/GIT/cron-tracker/node_modules/@fullcalendar/timegrid/src/main.ts"],"sourcesContent":["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/common'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n","import {\n  createElement,\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  RenderHook,\n  SlotLabelContentArg,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let hookProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <RenderHook<SlotLabelContentArg> // needed?\n            hookProps={hookProps}\n            classNames={options.slotLabelClassNames}\n            content={options.slotLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(rootElRef, customClassNames, innerElRef, innerContent) => (\n              <td ref={rootElRef} className={classNames.concat(customClassNames).join(' ')} data-time={props.isoTimeStr}>\n                <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                  <div className=\"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </td>\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n","import { createElement, BaseComponent } from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n","import {\n  createElement, createRef,\n  diffDays,\n  SimpleScrollGridSection,\n  VNode,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkAttrs,\n  ViewRoot,\n  WeekNumberRoot,\n  RenderHook,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  AllDayContentArg,\n  CssDimValue,\n  NowTimer,\n  DateMarker,\n  NowIndicatorRoot,\n} from '@fullcalendar/common'\nimport { AllDaySplitter } from './AllDaySplitter'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeBodyAxis } from './TimeBodyAxis'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[{ width: 'shrink' }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderHeadAxis('day', arg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderTableRowAxis(contentArg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table aria-hidden style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorRoot isAxis date={nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={false}\n              colGroups={[\n                { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n                { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n              ]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (rowKey: 'day' | string, frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    let navLinkAttrs = (dayCnt === 1) // only do in day views (to avoid doing in week views that dont need it)\n      ? buildNavLinkAttrs(this.context, range.start, 'week')\n      : {}\n\n    if (options.weekNumbers && rowKey === 'day') {\n      return (\n        <WeekNumberRoot date={range.start} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              aria-hidden\n              className={[\n                'fc-timegrid-axis',\n                'fc-scrollgrid-shrink',\n              ].concat(classNames).join(' ')}\n            >\n              <div\n                className=\"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\"\n                style={{ height: frameHeight }}\n              >\n                <a\n                  ref={innerElRef}\n                  className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                  {...navLinkAttrs}\n                >\n                  {innerContent}\n                </a>\n              </div>\n            </th>\n          )}\n        </WeekNumberRoot>\n      )\n    }\n\n    return (\n      <th aria-hidden className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let hookProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <RenderHook<AllDayContentArg>\n        hookProps={hookProps}\n        classNames={options.allDayClassNames}\n        content={options.allDayContent}\n        defaultContent={renderAllDayInner}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <td\n            ref={rootElRef}\n            aria-hidden\n            className={[\n              'fc-timegrid-axis',\n              'fc-scrollgrid-shrink',\n            ].concat(classNames).join(' ')}\n          >\n            <div\n              className={'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '')}\n              style={{ height: rowHeight }}\n            >\n              <span className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                {innerContent}\n              </span>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  Duration,\n  rangeContainsMarker,\n} from '@fullcalendar/common'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slotDuration: Duration,\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile } = this\n    let len = positions.els.length\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration)\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  RefMap,\n  RenderHook,\n  SlotLaneContentArg,\n} from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let hookProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          let classNames = [\n            'fc-timegrid-slot',\n            'fc-timegrid-slot-lane',\n            slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor',\n          ]\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <RenderHook\n                hookProps={hookProps}\n                classNames={options.slotLaneClassNames}\n                content={options.slotLaneContent}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              >\n                {(rootElRef, customClassNames, innerElRef, innerContent) => (\n                  <td\n                    ref={rootElRef}\n                    className={classNames.concat(customClassNames).join(' ')}\n                    data-time={slatMeta.isoTimeStr}\n                  >\n                    {innerContent}\n                  </td>\n                )}\n              </RenderHook>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n","import {\n  createElement,\n  VNode,\n  BaseComponent,\n  RefMap,\n  CssDimValue,\n  createRef,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div ref={this.rootElRef} className=\"fc-timegrid-slots\">\n        <table\n          aria-hidden\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { context, props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            context.options.slotDuration,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n","import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/common'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement, MoreLinkContentArg, MoreLinkRoot, BaseComponent, createRef, setRef,\n  Dictionary, DateProfile, DateRange, DateMarker, EventSegUiInteractionState, CssDimValue,\n} from '@fullcalendar/common'\nimport { renderPlainFgSegs } from './TimeCol'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColMoreLinkProps {\n  hiddenSegs: TimeColsSeg[]\n  top: CssDimValue\n  bottom: CssDimValue\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  nowDate: DateMarker\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState\n  eventResize: EventSegUiInteractionState\n}\n\nexport class TimeColMoreLink extends BaseComponent<TimeColMoreLinkProps> {\n  rootElRef = createRef<HTMLElement>()\n\n  render() {\n    let { props } = this\n    return (\n      <MoreLinkRoot\n        allDayDate={null}\n        moreCnt={props.hiddenSegs.length}\n        allSegs={props.hiddenSegs}\n        hiddenSegs={props.hiddenSegs}\n        alignmentElRef={this.rootElRef}\n        defaultContent={renderMoreLinkInner}\n        extraDateSpan={props.extraDateSpan}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        popoverContent={() => renderPlainFgSegs(props.hiddenSegs, props)}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={(el: HTMLElement | null) => {\n              setRef(rootElRef, el)\n              setRef(this.rootElRef, el)\n            }}\n            className={['fc-timegrid-more-link'].concat(classNames).join(' ')}\n            style={{ top: props.top, bottom: props.bottom }}\n            onClick={handleClick}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n          >\n            <div ref={innerElRef} className=\"fc-timegrid-more-link-inner fc-sticky\">\n              {innerContent}\n            </div>\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction renderMoreLinkInner(props: MoreLinkContentArg) {\n  return props.shortText\n}\n","import {\n  SegEntry,\n  SegHierarchy,\n  SegRect,\n  buildEntryKey,\n  getEntrySpanEnd,\n  binarySearch,\n  SegEntryGroup,\n  groupIntersectingEntries,\n} from '@fullcalendar/common'\n\ninterface SegNode extends SegEntry {\n  nextLevelNodes: SegNode[] // with highest-pressure first\n}\n\ntype SegNodeAndPressure = [ SegNode, number ]\n\ninterface SegSiblingRange { // will ALWAYS have span of 1 or more items. if not, will be null\n  level: number\n  lateralStart: number\n  lateralEnd: number\n}\n\nexport interface SegWebRect extends SegRect {\n  stackDepth: number\n  stackForward: number\n}\n\n// segInputs assumed sorted\nexport function buildPositioning(\n  segInputs: SegEntry[],\n  strictOrder?: boolean,\n  maxStackCnt?: number,\n): { segRects: SegWebRect[], hiddenGroups: SegEntryGroup[] } {\n  let hierarchy = new SegHierarchy()\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries)\n\n  let web = buildWeb(hierarchy)\n  web = stretchWeb(web, 1) // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web)\n\n  return { segRects, hiddenGroups }\n}\n\nfunction buildWeb(hierarchy: SegHierarchy): SegNode[] {\n  const { entriesByLevel } = hierarchy\n\n  const buildNode = cacheable(\n    (level: number, lateral: number) => level + ':' + lateral,\n    (level: number, lateral: number): SegNodeAndPressure => {\n      let siblingRange = findNextLevelSegs(hierarchy, level, lateral)\n      let nextLevelRes = buildNodes(siblingRange, buildNode)\n      let entry = entriesByLevel[level][lateral]\n\n      return [\n        { ...entry, nextLevelNodes: nextLevelRes[0] },\n        entry.thickness + nextLevelRes[1], // the pressure builds\n      ]\n    },\n  )\n\n  return buildNodes(\n    entriesByLevel.length\n      ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n      : null,\n    buildNode,\n  )[0]\n}\n\nfunction buildNodes(\n  siblingRange: SegSiblingRange | null,\n  buildNode: (level: number, lateral: number) => SegNodeAndPressure,\n): [SegNode[], number] { // number is maxPressure\n  if (!siblingRange) {\n    return [[], 0]\n  }\n\n  let { level, lateralStart, lateralEnd } = siblingRange\n  let lateral = lateralStart\n  let pairs: SegNodeAndPressure[] = []\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral))\n    lateral += 1\n  }\n\n  pairs.sort(cmpDescPressures)\n\n  return [\n    pairs.map(extractNode),\n    pairs[0][1], // first item's pressure\n  ]\n}\n\nfunction cmpDescPressures(a: SegNodeAndPressure, b: SegNodeAndPressure) { // sort pressure high -> low\n  return b[1] - a[1]\n}\n\nfunction extractNode(a: SegNodeAndPressure): SegNode {\n  return a[0]\n}\n\nfunction findNextLevelSegs(hierarchy: SegHierarchy, subjectLevel: number, subjectLateral: number): SegSiblingRange | null {\n  let { levelCoords, entriesByLevel } = hierarchy\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral]\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness\n  let levelCnt = levelCoords.length\n  let level = subjectLevel\n\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) ; // do nothing\n\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level]\n    let entry: SegEntry\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd)\n    let lateralStart = searchIndex[0] + searchIndex[1] // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart\n\n    while ( // loop through entries that horizontally intersect\n      (entry = entries[lateralEnd]) && // but not past the whole seg list\n      entry.span.start < subjectEntry.span.end\n    ) { lateralEnd += 1 }\n\n    if (lateralStart < lateralEnd) {\n      return { level, lateralStart, lateralEnd }\n    }\n  }\n\n  return null\n}\n\nfunction stretchWeb(topLevelNodes: SegNode[], totalThickness: number): SegNode[] {\n  const stretchNode = cacheable(\n    (node: SegNode, startCoord: number, prevThickness: number) => buildEntryKey(node),\n    (node: SegNode, startCoord: number, prevThickness: number): [number, SegNode] => { // [startCoord, node]\n      let { nextLevelNodes, thickness } = node\n      let allThickness = thickness + prevThickness\n      let thicknessFraction = thickness / allThickness\n      let endCoord: number\n      let newChildren: SegNode[] = []\n\n      if (!nextLevelNodes.length) {\n        endCoord = totalThickness\n      } else {\n        for (let childNode of nextLevelNodes) {\n          if (endCoord === undefined) {\n            let res = stretchNode(childNode, startCoord, allThickness)\n            endCoord = res[0]\n            newChildren.push(res[1])\n          } else {\n            let res = stretchNode(childNode, endCoord, 0)\n            newChildren.push(res[1])\n          }\n        }\n      }\n\n      let newThickness = (endCoord - startCoord) * thicknessFraction\n      return [endCoord - newThickness, {\n        ...node,\n        thickness: newThickness,\n        nextLevelNodes: newChildren,\n      }]\n    },\n  )\n\n  return topLevelNodes.map((node: SegNode) => stretchNode(node, 0, 0)[1])\n}\n\n// not sorted in any particular order\nfunction webToRects(topLevelNodes: SegNode[]): SegWebRect[] {\n  let rects: SegWebRect[] = []\n\n  const processNode = cacheable(\n    (node: SegNode, levelCoord: number, stackDepth: number) => buildEntryKey(node),\n    (node: SegNode, levelCoord: number, stackDepth: number) => { // returns forwardPressure\n      let rect: SegWebRect = {\n        ...node,\n        levelCoord,\n        stackDepth,\n        stackForward: 0, // will assign after recursing\n      }\n      rects.push(rect)\n\n      return (\n        rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1\n      )\n    },\n  )\n\n  function processNodes(nodes: SegNode[], levelCoord: number, stackDepth: number) { // returns stackForward\n    let stackForward = 0\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward)\n    }\n    return stackForward\n  }\n\n  processNodes(topLevelNodes, 0, 0)\n  return rects // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n\n// TODO: move to general util\n\nfunction cacheable<Args extends any[], Res>(\n  keyFunc: (...args: Args) => string,\n  workFunc: (...args: Args) => Res,\n): ((...args: Args) => Res) {\n  const cache: { [key: string]: Res } = {}\n\n  return (...args: Args) => {\n    let key = keyFunc(...args)\n    return (key in cache)\n      ? cache[key]\n      : (cache[key] = workFunc(...args))\n  }\n}\n","import {\n  SegSpan,\n  SegEntry,\n  SegEntryGroup,\n  DateMarker,\n} from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect, buildPositioning } from './seg-web'\n\n// public interface\n// ------------------------------------------------------------------------------------------\n\nexport interface TimeColFgSegPlacement {\n  seg: TimeColsSeg\n  rect: SegWebRect | null\n}\n\nexport function computeSegVCoords(\n  segs: TimeColsSeg[],\n  colDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords = null,\n  eventMinHeight: number = 0, // might be null/undefined :(\n): SegSpan[] {\n  let vcoords: SegSpan[] = []\n\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i]\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate)\n      let spanEnd = Math.max(\n        spanStart + (eventMinHeight || 0), // :(\n        slatCoords.computeDateTop(seg.end, colDate),\n      )\n      vcoords.push({\n        start: Math.round(spanStart), // for barely-overlapping collisions\n        end: Math.round(spanEnd), //\n      })\n    }\n  }\n\n  return vcoords\n}\n\nexport function computeFgSegPlacements(\n  segs: TimeColsSeg[],\n  segVCoords: SegSpan[], // might not have for every seg\n  eventOrderStrict?: boolean,\n  eventMaxStack?: number,\n): { segPlacements: TimeColFgSegPlacement[], hiddenGroups: SegEntryGroup[] } {\n  let segInputs: SegEntry[] = []\n  let dumbSegs: TimeColsSeg[] = [] // segs without coords\n\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i]\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords,\n      })\n    } else {\n      dumbSegs.push(segs[i])\n    }\n  }\n\n  let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack)\n  let segPlacements: TimeColFgSegPlacement[] = []\n\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect,\n    })\n  }\n\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({ seg: dumbSeg, rect: null })\n  }\n\n  return { segPlacements, hiddenGroups }\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isShort: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    let classNames = [\n      'fc-timegrid-event',\n      'fc-v-event',\n    ]\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short')\n    }\n\n    return (\n      <StandardEvent\n        {...this.props}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n        extraClassNames={classNames}\n      />\n    )\n  }\n}\n","import {\n  DateMarker, BaseComponent, createElement,\n  DateRange, DayCellContent, DateProfile,\n} from '@fullcalendar/common'\n\nexport interface TimeColMiscProps { // should be given nowDate too??\n  dateProfile: DateProfile\n  date: DateMarker\n  todayRange: DateRange\n  extraHookProps?: any\n}\n\nexport class TimeColMisc extends BaseComponent<TimeColMiscProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <DayCellContent date={props.date} dateProfile={props.dateProfile} todayRange={props.todayRange} extraHookProps={props.extraHookProps}>\n        {(innerElRef, innerContent) => (\n          innerContent &&\n            <div className=\"fc-timegrid-col-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </DayCellContent>\n    )\n  }\n}\n","import {\n  Ref, DateMarker, BaseComponent, createElement, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, Fragment, DayCellRoot, NowIndicatorRoot, BgEvent, renderFill, buildIsoString, computeEarliestSegStart,\n  DateProfile, buildEventRangeKey, sortEventSegs, memoize, SegEntryGroup, SegEntry, Dictionary, SegSpan, CssDimValue,\n} from '@fullcalendar/common'\nimport { TimeColMoreLink } from './TimeColMoreLink'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect } from './seg-web'\nimport { computeFgSegPlacements, computeSegVCoords } from './event-placement'\nimport { TimeColEvent } from './TimeColEvent'\nimport { TimeColMisc } from './TimeColMisc'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraHookProps?: any\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  sortEventSegs = memoize(sortEventSegs)\n  // TODO: memoize event-placement?\n\n  render() {\n    let { props, context } = this\n    let isSelectMirror = context.options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder) as TimeColsSeg[]\n\n    return (\n      <DayCellRoot\n        elRef={props.elRef}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraHookProps={props.extraHookProps}\n      >\n        {(rootElRef, classNames, dataAttrs) => (\n          <td\n            ref={rootElRef}\n            role=\"gridcell\"\n            className={['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')}\n            {...dataAttrs}\n            {...props.extraDataAttrs}\n          >\n            <div className=\"fc-timegrid-col-frame\">\n              <div className=\"fc-timegrid-col-bg\">\n                {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n                {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n                {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  sortedFgSegs,\n                  interactionAffectedInstances,\n                  false,\n                  false,\n                  false,\n                )}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  mirrorSegs as TimeColsSeg[],\n                  {},\n                  Boolean(props.eventDrag),\n                  Boolean(props.eventResize),\n                  Boolean(isSelectMirror),\n                )}\n              </div>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                {this.renderNowIndicator(props.nowIndicatorSegs)}\n              </div>\n              <TimeColMisc\n                date={props.date}\n                dateProfile={props.dateProfile}\n                todayRange={props.todayRange}\n                extraHookProps={props.extraHookProps}\n              />\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  renderFgSegs(\n    sortedFgSegs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { props } = this\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props)\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[], // if not mirror, needs to be sorted\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options\n    let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight)\n    let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack)\n\n    return (\n      <Fragment>\n        {this.renderHiddenGroups(hiddenGroups, segs)}\n        {segPlacements.map((segPlacement) => {\n          let { seg, rect } = segPlacement\n          let instanceId = seg.eventRange.instance.instanceId\n          let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect)\n          let vStyle = computeSegVStyle(rect && rect.span)\n          let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 }\n          let isInset = Boolean(rect) && rect.stackForward > 0\n          let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight // look at other places for this problem\n\n          return (\n            <div\n              className={\n                'fc-timegrid-event-harness' +\n                (isInset ? ' fc-timegrid-event-harness-inset' : '')\n              }\n              key={instanceId}\n              style={{\n                visibility: isVisible ? ('' as any) : 'hidden',\n                ...vStyle,\n                ...hStyle,\n              }}\n            >\n              <TimeColEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                isShort={isShort}\n                {...getSegMeta(seg, todayRange, nowDate)}\n              />\n            </div>\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups: SegEntryGroup[], segs: TimeColsSeg[]) {\n    let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props\n    return (\n      <Fragment>\n        {hiddenGroups.map((hiddenGroup) => {\n          let positionCss = computeSegVStyle(hiddenGroup.span)\n          let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs)\n          return (\n            <TimeColMoreLink\n              key={buildIsoString(computeEarliestSegStart(hiddenSegs))}\n              hiddenSegs={hiddenSegs}\n              top={positionCss.top}\n              bottom={positionCss.bottom}\n              extraDateSpan={extraDateSpan}\n              dateProfile={dateProfile}\n              todayRange={todayRange}\n              nowDate={nowDate}\n              eventSelection={eventSelection}\n              eventDrag={eventDrag}\n              eventResize={eventResize}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { props, context } = this\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight) // don't assume all populated\n\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i]\n      return (\n        <div\n          key={buildEventRangeKey(seg.eventRange)}\n          className=\"fc-timegrid-bg-harness\"\n          style={computeSegVStyle(vcoords)}\n        >\n          {fillType === 'bg-event' ?\n            <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n            renderFill(fillType)}\n        </div>\n      )\n    })\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorRoot\n        isAxis={false}\n        date={date}\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div\n            ref={rootElRef}\n            className={['fc-timegrid-now-indicator-line'].concat(classNames).join(' ')}\n            style={{ top: slatCoords.computeDateTop(seg.start, date) }}\n          >\n            {innerContent}\n          </div>\n        )}\n      </NowIndicatorRoot>\n    ))\n  }\n\n  computeSegHStyle(segHCoords: SegWebRect) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let nearCoord = segHCoords.levelCoord // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord\n      right = nearCoord\n    } else {\n      left = nearCoord\n      right = 1 - farCoord\n    }\n\n    let props = {\n      zIndex: segHCoords.stackDepth + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n}\n\nexport function renderPlainFgSegs(\n  sortedFgSegs: TimeColsSeg[],\n  { todayRange, nowDate, eventSelection, eventDrag, eventResize }: {\n    todayRange: DateRange\n    nowDate: DateMarker\n    eventSelection: string\n    eventDrag: EventSegUiInteractionState | null\n    eventResize: EventSegUiInteractionState | null\n  },\n) {\n  let hiddenInstances =\n    (eventDrag ? eventDrag.affectedInstances : null) ||\n    (eventResize ? eventResize.affectedInstances : null) ||\n    {}\n  return (\n    <Fragment>\n      {sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId\n        return (\n          <div\n            key={instanceId}\n            style={{ visibility: hiddenInstances[instanceId] ? 'hidden' : ('' as any) }}\n          >\n            <TimeColEvent\n              seg={seg}\n              isDragging={false}\n              isResizing={false}\n              isDateSelecting={false}\n              isSelected={instanceId === eventSelection}\n              isShort={false}\n              {...getSegMeta(seg, todayRange, nowDate)}\n            />\n          </div>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nfunction computeSegVStyle(segVCoords: SegSpan | null): { top: CssDimValue, bottom: CssDimValue } {\n  if (!segVCoords) {\n    return { top: '', bottom: '' }\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end,\n  }\n}\n\nfunction compileSegsFromEntries(\n  segEntries: SegEntry[],\n  allSegs: TimeColsSeg[],\n): TimeColsSeg[] {\n  return segEntries.map((segEntry) => allSegs[segEntry.index])\n}\n","import {\n  createElement, VNode,\n  BaseComponent,\n  EventSegUiInteractionState,\n  CssDimValue,\n  DateMarker,\n  RefMap,\n  createRef,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorRoot,\n  DateProfile,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeCol } from './TimeCol'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table\n          role=\"presentation\"\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n          }}\n        >\n          {props.tableColGroupNode}\n          <tbody role=\"presentation\">\n            <tr role=\"row\">\n              {props.axis && (\n                <td aria-hidden className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorRoot isAxis date={props.nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraHookProps={cell.extraHookProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  extraDateSpan={cell.extraDateSpan}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: DayTableCell[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n","import {\n  createElement, VNode,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  EventSegUiInteractionState,\n  memoize,\n  CssDimValue,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  Duration,\n  DateProfile,\n  DayTableCell,\n  Hit,\n  DateComponent,\n} from '@fullcalendar/common'\nimport { TimeColsSlats } from './TimeColsSlats'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsContent } from './TimeColsContent'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColsProps {\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends DateComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, {\n        el,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex]\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        dateProfile,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n          ...cell.extraDateSpan,\n        },\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n","import { intersectRanges, DateRange, Slicer } from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n","import {\n  createElement,\n  createRef,\n  VNode,\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  NowTimer,\n  CssDimValue,\n  Duration,\n} from '@fullcalendar/common'\nimport { TimeCols } from './TimeCols'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n","import {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  Duration,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/common'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n","import {\n  createElement,\n  DateProfileGenerator, DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { DayTable } from '@fullcalendar/daygrid'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeCols } from './DayTimeCols'\nimport { buildSlatMetas } from './time-slat-meta'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n","export const OPTION_REFINERS = {\n  allDaySlot: Boolean,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeColsView, buildTimeColsModel } from './DayTimeColsView'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { DayTimeCols, buildDayRanges } from './DayTimeCols'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { DayTimeCols, DayTimeColsView, TimeColsView, buildTimeColsModel, buildDayRanges, DayTimeColsSlicer, TimeColsSeg }\nexport { TimeCols } from './TimeCols'\nexport { TimeSlatMeta, buildSlatMetas } from './time-slat-meta'\nexport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\nexport default createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true, // indicates that slotMinTime/slotMaxTime affects rendering\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 },\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}