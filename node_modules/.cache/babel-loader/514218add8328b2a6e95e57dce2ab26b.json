{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { ALERT_WARN_CANCEL_ESCAPE_KEY, ALERT_WARN_CANCEL_OUTSIDE_CLICK, ALERT_WARN_CANCEL_PROPS } from \"../../common/errors\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon } from \"../icon/icon\";\n\nvar Alert =\n/** @class */\nfunction (_super) {\n  __extends(Alert, _super);\n\n  function Alert() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleCancel = function (evt) {\n      return _this.internalHandleCallbacks(false, evt);\n    };\n\n    _this.handleConfirm = function (evt) {\n      return _this.internalHandleCallbacks(true, evt);\n    };\n\n    return _this;\n  }\n\n  Alert.prototype.render = function () {\n    var _a = this.props,\n        canEscapeKeyCancel = _a.canEscapeKeyCancel,\n        canOutsideClickCancel = _a.canOutsideClickCancel,\n        children = _a.children,\n        className = _a.className,\n        icon = _a.icon,\n        intent = _a.intent,\n        loading = _a.loading,\n        cancelButtonText = _a.cancelButtonText,\n        confirmButtonText = _a.confirmButtonText,\n        onClose = _a.onClose,\n        overlayProps = __rest(_a, [\"canEscapeKeyCancel\", \"canOutsideClickCancel\", \"children\", \"className\", \"icon\", \"intent\", \"loading\", \"cancelButtonText\", \"confirmButtonText\", \"onClose\"]);\n\n    return React.createElement(Dialog, __assign({}, overlayProps, {\n      className: classNames(Classes.ALERT, className),\n      canEscapeKeyClose: canEscapeKeyCancel,\n      canOutsideClickClose: canOutsideClickCancel,\n      onClose: this.handleCancel,\n      portalContainer: this.props.portalContainer\n    }), React.createElement(\"div\", {\n      className: Classes.ALERT_BODY\n    }, React.createElement(Icon, {\n      icon: icon,\n      size: 40,\n      intent: intent\n    }), React.createElement(\"div\", {\n      className: Classes.ALERT_CONTENTS\n    }, children)), React.createElement(\"div\", {\n      className: Classes.ALERT_FOOTER\n    }, React.createElement(Button, {\n      loading: loading,\n      intent: intent,\n      text: confirmButtonText,\n      onClick: this.handleConfirm\n    }), cancelButtonText && React.createElement(Button, {\n      text: cancelButtonText,\n      disabled: loading,\n      onClick: this.handleCancel\n    })));\n  };\n\n  Alert.prototype.validateProps = function (props) {\n    if (props.onClose == null && props.cancelButtonText == null !== (props.onCancel == null)) {\n      console.warn(ALERT_WARN_CANCEL_PROPS);\n    }\n\n    var hasCancelHandler = props.onCancel != null || props.onClose != null;\n\n    if (props.canEscapeKeyCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n    }\n\n    if (props.canOutsideClickCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n    }\n  };\n\n  Alert.prototype.internalHandleCallbacks = function (confirmed, evt) {\n    var _a;\n\n    var _b = this.props,\n        onCancel = _b.onCancel,\n        onClose = _b.onClose,\n        onConfirm = _b.onConfirm;\n    (_a = confirmed ? onConfirm : onCancel) === null || _a === void 0 ? void 0 : _a(evt);\n    onClose === null || onClose === void 0 ? void 0 : onClose(confirmed, evt);\n  };\n\n  Alert.defaultProps = {\n    canEscapeKeyCancel: false,\n    canOutsideClickCancel: false,\n    confirmButtonText: \"OK\",\n    isOpen: false,\n    loading: false\n  };\n  Alert.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Alert\");\n  return Alert;\n}(AbstractPureComponent2);\n\nexport { Alert };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","ALERT_WARN_CANCEL_ESCAPE_KEY","ALERT_WARN_CANCEL_OUTSIDE_CLICK","ALERT_WARN_CANCEL_PROPS","Button","Dialog","Icon","__extends","_this","evt","internalHandleCallbacks","Alert","_a","props","canEscapeKeyCancel","canOutsideClickCancel","children","className","icon","intent","loading","cancelButtonText","confirmButtonText","onClose","overlayProps","__assign","ALERT","canEscapeKeyClose","canOutsideClickClose","handleCancel","portalContainer","ALERT_BODY","size","ALERT_CONTENTS","ALERT_FOOTER","text","onClick","handleConfirm","disabled","onCancel","console","warn","hasCancelHandler","confirmed","onConfirm","isOpen"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/alert/alert.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, Props, MaybeElement } from \"../../common\";\nimport {\n    ALERT_WARN_CANCEL_ESCAPE_KEY,\n    ALERT_WARN_CANCEL_OUTSIDE_CLICK,\n    ALERT_WARN_CANCEL_PROPS,\n} from \"../../common/errors\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { IOverlayLifecycleProps } from \"../overlay/overlay\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type AlertProps = IAlertProps;\n/** @deprecated use AlertProps */\nexport interface IAlertProps extends IOverlayLifecycleProps, Props {\n    /**\n     * Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canEscapeKeyCancel?: boolean;\n\n    /**\n     * Whether clicking outside the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canOutsideClickCancel?: boolean;\n\n    /**\n     * The text for the cancel button.\n     * If this prop is defined, then either `onCancel` or `onClose` must also be defined.\n     */\n    cancelButtonText?: string;\n\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * The text for the confirm (right-most) button.\n     * This button will always appear, and uses the value of the `intent` prop below.\n     *\n     * @default \"OK\"\n     */\n    confirmButtonText?: string;\n\n    /** Name of a Blueprint UI icon (or an icon element) to display on the left side. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * The intent to be applied to the confirm (right-most) button and the icon (if provided).\n     */\n    intent?: Intent;\n\n    /**\n     * Toggles the visibility of the alert.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * If set to `true`, the confirm button will be set to its loading state. The cancel button, if\n     * visible, will be disabled.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * CSS styles to apply to the alert.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n     * - clicking the cancel button (if `cancelButtonText` is defined)\n     * - pressing the escape key (if `canEscapeKeyCancel` is enabled)\n     * - clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n     *\n     * If any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.\n     */\n    onCancel?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n     * - clicking the confirm button\n     * - focusing on the confirm button and pressing `enter` or `space`\n     */\n    onConfirm?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\n     * First argument is `true` if confirmed, `false` otherwise.\n     * This is an alternative to defining separate `onConfirm` and `onCancel` handlers.\n     */\n    onClose?(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>): void;\n}\n\nexport class Alert extends AbstractPureComponent2<AlertProps> {\n    public static defaultProps: AlertProps = {\n        canEscapeKeyCancel: false,\n        canOutsideClickCancel: false,\n        confirmButtonText: \"OK\",\n        isOpen: false,\n        loading: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Alert`;\n\n    public render() {\n        const {\n            canEscapeKeyCancel,\n            canOutsideClickCancel,\n            children,\n            className,\n            icon,\n            intent,\n            loading,\n            cancelButtonText,\n            confirmButtonText,\n            onClose,\n            ...overlayProps\n        } = this.props;\n        return (\n            <Dialog\n                {...overlayProps}\n                className={classNames(Classes.ALERT, className)}\n                canEscapeKeyClose={canEscapeKeyCancel}\n                canOutsideClickClose={canOutsideClickCancel}\n                onClose={this.handleCancel}\n                portalContainer={this.props.portalContainer}\n            >\n                <div className={Classes.ALERT_BODY}>\n                    <Icon icon={icon} size={40} intent={intent} />\n                    <div className={Classes.ALERT_CONTENTS}>{children}</div>\n                </div>\n                <div className={Classes.ALERT_FOOTER}>\n                    <Button loading={loading} intent={intent} text={confirmButtonText} onClick={this.handleConfirm} />\n                    {cancelButtonText && (\n                        <Button text={cancelButtonText} disabled={loading} onClick={this.handleCancel} />\n                    )}\n                </div>\n            </Dialog>\n        );\n    }\n\n    protected validateProps(props: AlertProps) {\n        if (props.onClose == null && (props.cancelButtonText == null) !== (props.onCancel == null)) {\n            console.warn(ALERT_WARN_CANCEL_PROPS);\n        }\n\n        const hasCancelHandler = props.onCancel != null || props.onClose != null;\n        if (props.canEscapeKeyCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n        }\n        if (props.canOutsideClickCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n        }\n    }\n\n    private handleCancel = (evt?: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(false, evt);\n\n    private handleConfirm = (evt: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(true, evt);\n\n    private internalHandleCallbacks(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>) {\n        const { onCancel, onClose, onConfirm } = this.props;\n        (confirmed ? onConfirm : onCancel)?.(evt);\n        onClose?.(confirmed, evt);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}