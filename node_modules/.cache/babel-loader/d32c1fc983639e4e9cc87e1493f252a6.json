{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as moment from \"moment-timezone\"; // non-empty abbreviations that do not begin with -/+\n\nvar ABBR_REGEX = /^[^-+]/;\nexport function getTimezoneMetadata(timezone, date) {\n  if (date === void 0) {\n    date = new Date();\n  }\n\n  var timestamp = date.getTime();\n  var zone = moment.tz.zone(timezone);\n  var zonedDate = moment.tz(timestamp, timezone);\n  var offset = zonedDate.utcOffset();\n  var offsetAsString = zonedDate.format(\"Z\"); // Only include abbreviations that are not just a repeat of the offset:\n  // moment-timezone's `abbr` falls back to the time offset if a zone doesn't have an abbr.\n\n  var abbr = zone.abbr(timestamp);\n  var abbreviation = ABBR_REGEX.test(abbr) ? abbr : undefined;\n  return {\n    abbreviation: abbreviation,\n    offset: offset,\n    offsetAsString: offsetAsString,\n    population: zone.population,\n    timezone: timezone\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,MAAZ,MAAwB,iBAAxB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,QAAnB;AAUA,OAAM,SAAUC,mBAAV,CAA8BC,QAA9B,EAAgDC,IAAhD,EAAuE;AAAvB;AAAAA,eAAiBC,IAAjB;AAAuB;;AACzE,MAAMC,SAAS,GAAGF,IAAI,CAACG,OAAL,EAAlB;AACA,MAAMC,IAAI,GAAGR,MAAM,CAACS,EAAP,CAAUD,IAAV,CAAeL,QAAf,CAAb;AACA,MAAMO,SAAS,GAAGV,MAAM,CAACS,EAAP,CAAUH,SAAV,EAAqBH,QAArB,CAAlB;AACA,MAAMQ,MAAM,GAAGD,SAAS,CAACE,SAAV,EAAf;AACA,MAAMC,cAAc,GAAGH,SAAS,CAACI,MAAV,CAAiB,GAAjB,CAAvB,CALyE,CAOzE;AACA;;AACA,MAAMC,IAAI,GAAGP,IAAI,CAACO,IAAL,CAAUT,SAAV,CAAb;AACA,MAAMU,YAAY,GAAGf,UAAU,CAACgB,IAAX,CAAgBF,IAAhB,IAAwBA,IAAxB,GAA+BG,SAApD;AAEA,SAAO;AACHF,gBAAY,cADT;AAEHL,UAAM,QAFH;AAGHE,kBAAc,gBAHX;AAIHM,cAAU,EAAEX,IAAI,CAACW,UAJd;AAKHhB,YAAQ;AALL,GAAP;AAOH","names":["moment","ABBR_REGEX","getTimezoneMetadata","timezone","date","Date","timestamp","getTime","zone","tz","zonedDate","offset","utcOffset","offsetAsString","format","abbr","abbreviation","test","undefined","population"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/timezone/src/components/timezone-picker/timezoneMetadata.ts"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as moment from \"moment-timezone\";\n\n// non-empty abbreviations that do not begin with -/+\nconst ABBR_REGEX = /^[^-+]/;\n\nexport interface ITimezoneMetadata {\n    timezone: string;\n    abbreviation: string | undefined;\n    offset: number;\n    offsetAsString: string;\n    population: number | undefined;\n}\n\nexport function getTimezoneMetadata(timezone: string, date: Date = new Date()): ITimezoneMetadata {\n    const timestamp = date.getTime();\n    const zone = moment.tz.zone(timezone);\n    const zonedDate = moment.tz(timestamp, timezone);\n    const offset = zonedDate.utcOffset();\n    const offsetAsString = zonedDate.format(\"Z\");\n\n    // Only include abbreviations that are not just a repeat of the offset:\n    // moment-timezone's `abbr` falls back to the time offset if a zone doesn't have an abbr.\n    const abbr = zone.abbr(timestamp);\n    const abbreviation = ABBR_REGEX.test(abbr) ? abbr : undefined;\n\n    return {\n        abbreviation,\n        offset,\n        offsetAsString,\n        population: zone.population,\n        timezone,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}