{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  var cronDetails = [];\n  var startTimeMap = new Map();\n  const [events, setEvents] = useState([]);\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    startTimeMap.clear();\n    setEvents([]);\n  };\n\n  const populateStartTimeMap = element => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes\n    } = element;\n    triggerTimes.forEach(element => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(getEventKey(element), existingList.concat(newList));\n      } else {\n        const list = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n  };\n\n  const handleEventClick = event => {\n    console.log(startTimeMap);\n    const key = getEventKey(event.start);\n    alert(key);\n    console.log(startTimeMap);\n    console.log(startTimeMap.has(key));\n  };\n\n  const setNewEvents = cronDetails => {\n    var newEvents = [];\n    cronDetails.forEach(element => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      newEvents.push({\n        title: \"Event \" + newEvents.length,\n        start: key,\n        end: getEndTime(key)\n      });\n    });\n    setEvents(newEvents);\n    console.log(events);\n  };\n\n  const handleReloadClick = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        cronDetails = res.data.message;\n        setNewEvents(cronDetails);\n        console.log(startTimeMap);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridDay\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        customButtons: {\n          reload: {\n            text: \"Reload\",\n            click: function () {\n              handleReloadClick();\n            }\n          }\n        },\n        headerToolbar: {\n          left: \"reload,prev,next\",\n          right: \"today,timeGridDay,timeGridWeek\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:05:00\",\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(startTimeMap);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"+9MZXz9f7bEJKfdNKx6PUB85P1Y=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","API","moment","api","Home","props","cronDetails","startTimeMap","Map","events","setEvents","getEventKey","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","clearEvents","clear","populateStartTimeMap","element","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","forEach","has","newList","existingList","get","set","concat","list","handleEventClick","event","console","log","key","start","alert","setNewEvents","newEvents","value","push","title","length","end","handleReloadClick","Promise","resolve","getTriggerTimes","then","res","data","message","catch","err","reload","text","click","left","right"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\n\nlet api = new API();\n\nfunction Home(props) {\n  var cronDetails = [];\n  var startTimeMap = new Map();\n  const [events,setEvents]=useState([]);\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents =()=>{\n    startTimeMap.clear();\n    setEvents([]);\n  }\n\n  const populateStartTimeMap = (element) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes,\n    } = element;\n    triggerTimes.forEach((element) => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(\n          getEventKey(element),\n          existingList.concat(newList)\n        );\n      } else {\n        const list = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n  };\n\n  const handleEventClick=(event)=>{\n    console.log(startTimeMap)\n    const key = getEventKey(event.start);\n    alert(key)\n    console.log(startTimeMap)\n    console.log(startTimeMap.has(key))\n  }\n\n  const setNewEvents=(cronDetails)=>{\n    var newEvents = [];\n    cronDetails.forEach((element) => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      newEvents.push({\n        title: \"Event \" + newEvents.length,\n        start: key,\n        end: getEndTime(key),\n      });\n    });\n    setEvents(newEvents);\n    console.log(events);\n  }\n\n  const handleReloadClick = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          cronDetails = res.data.message;\n          setNewEvents(cronDetails);\n          console.log(startTimeMap);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridDay\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          customButtons={{\n            reload: {\n              text: \"Reload\",\n              click: function () {\n                handleReloadClick();\n              },\n            },\n          }}\n          headerToolbar={{\n            left: \"reload,prev,next\",\n            right: \"today,timeGridDay,timeGridWeek\",\n          }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:05:00\"\n          events={events}\n        />\n      </div>\n      <button onClick={()=>{\n        console.log(startTimeMap);\n\n      }}></button>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}