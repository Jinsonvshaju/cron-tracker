{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [cronDetails, setCronDetails] = useState([]);\n\n  const clearEvents = () => {\n    setCronDetails([]);\n  };\n\n  const getStartTime = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const handleReloadClick = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        var startTimeMap = new Map();\n        res.data.message.forEach(element => {\n          var {\n            name,\n            clientName,\n            timeZone,\n            cron,\n            cronInfo,\n            env,\n            exchange,\n            reportCycle,\n            createdTs,\n            triggerTimes\n          } = element;\n          triggerTimes.forEach(element => {\n            console.log(startTimeMap.has(\"2022-04-18T08:00:00.278+05:30\"));\n\n            if (startTimeMap.has(element)) {\n              console.log(\"success\");\n              const newList = [{\n                name: name,\n                clientName: clientName,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                env: env,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              const existingList = startTimeMap.get(element);\n              startTimeMap.set(element, existingList.concat(newList));\n            } else {\n              console.log(\"fixed\");\n              const list = [{\n                name: name,\n                clientName: clientName,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                env: env,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              startTimeMap.set(element, list);\n            }\n          });\n          console.log(\"hello1\", startTimeMap);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridDay\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        customButtons: {\n          reload: {\n            text: \"Reload\",\n            click: function () {\n              handleReloadClick();\n            }\n          }\n        },\n        headerToolbar: {\n          left: \"reload,prev,next\",\n          right: \"today,timeGridDay,timeGridWeek\"\n        },\n        eventClick: function (arg) {\n          alert(arg.event.title);\n          alert(arg.event.start);\n        },\n        slotDuration: \"00:05:00\" //events={events}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"VoO7RzyQM/lsrQIUTkWXfUbPHA4=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","API","moment","api","Home","props","cronDetails","setCronDetails","clearEvents","getStartTime","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","handleReloadClick","Promise","resolve","getTriggerTimes","then","res","startTimeMap","Map","data","message","forEach","element","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","console","log","has","newList","existingList","get","set","concat","list","catch","err","reload","text","click","left","right","arg","alert","event","title","start"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\n\nlet api = new API();\n\nfunction Home(props) {\n  const [cronDetails, setCronDetails] = useState([]);\n\n  const clearEvents = () => {\n    setCronDetails([]);\n  };\n\n  const getStartTime = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const handleReloadClick = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          var startTimeMap = new Map();\n          res.data.message.forEach((element) => {\n            var {\n              name,\n              clientName,\n              timeZone,\n              cron,\n              cronInfo,\n              env,\n              exchange,\n              reportCycle,\n              createdTs,\n              triggerTimes,\n            } = element;\n            triggerTimes.forEach((element) => {\n              console.log(startTimeMap.has(\"2022-04-18T08:00:00.278+05:30\"));\n              if (startTimeMap.has(element)) {\n                console.log(\"success\")\n                const newList = [\n                  {\n                    name: name,\n                    clientName: clientName,\n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,\n                    env: env,\n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                const existingList = startTimeMap.get(element);\n                startTimeMap.set(element, existingList.concat(newList));\n              } else {\n                console.log(\"fixed\")\n                const list = [\n                  {\n                    name: name,\n                    clientName: clientName,\n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,\n                    env: env,\n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                startTimeMap.set(element, list);\n              }\n            });\n            console.log(\"hello1\", startTimeMap);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridDay\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          customButtons={{\n            reload: {\n              text: \"Reload\",\n              click: function () {\n                handleReloadClick();\n              },\n            },\n          }}\n          headerToolbar={{\n            left: \"reload,prev,next\",\n            right: \"today,timeGridDay,timeGridWeek\",\n          }}\n          eventClick={function (arg) {\n            alert(arg.event.title);\n            alert(arg.event.start);\n          }}\n          slotDuration=\"00:05:00\"\n          //events={events}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}