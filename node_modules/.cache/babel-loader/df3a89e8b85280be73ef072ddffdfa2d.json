{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\n\nvar InputGroup =\n/** @class */\nfunction (_super) {\n  __extends(InputGroup, _super);\n\n  function InputGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n    _this.leftElement = null;\n    _this.rightElement = null;\n    _this.refHandlers = {\n      leftElement: function (ref) {\n        return _this.leftElement = ref;\n      },\n      rightElement: function (ref) {\n        return _this.rightElement = ref;\n      }\n    };\n    return _this;\n  }\n\n  InputGroup.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        _c = _b.asyncControl,\n        asyncControl = _c === void 0 ? false : _c,\n        className = _b.className,\n        disabled = _b.disabled,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        round = _b.round;\n    var inputGroupClasses = classNames(Classes.INPUT_GROUP, Classes.intentClass(intent), (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a[Classes.ROUND] = round, _a), className);\n\n    var style = __assign(__assign({}, this.props.style), {\n      paddingLeft: this.state.leftElementWidth,\n      paddingRight: this.state.rightElementWidth\n    });\n\n    var inputProps = __assign(__assign({\n      type: \"text\"\n    }, removeNonHTMLProps(this.props)), {\n      className: Classes.INPUT,\n      style: style\n    });\n\n    return React.createElement(\"div\", {\n      className: inputGroupClasses\n    }, this.maybeRenderLeftElement(), asyncControl ? React.createElement(AsyncControllableInput, __assign({}, inputProps, {\n      inputRef: inputRef\n    })) : React.createElement(\"input\", __assign({}, inputProps, {\n      ref: inputRef\n    })), this.maybeRenderRightElement());\n  };\n\n  InputGroup.prototype.componentDidMount = function () {\n    this.updateInputWidth();\n  };\n\n  InputGroup.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n        leftElement = _a.leftElement,\n        rightElement = _a.rightElement;\n\n    if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n      this.updateInputWidth();\n    }\n  };\n\n  InputGroup.prototype.validateProps = function (props) {\n    if (props.leftElement != null && props.leftIcon != null) {\n      console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n    }\n  };\n\n  InputGroup.prototype.maybeRenderLeftElement = function () {\n    var _a = this.props,\n        leftElement = _a.leftElement,\n        leftIcon = _a.leftIcon;\n\n    if (leftElement != null) {\n      return React.createElement(\"span\", {\n        className: Classes.INPUT_LEFT_CONTAINER,\n        ref: this.refHandlers.leftElement\n      }, leftElement);\n    } else if (leftIcon != null) {\n      return React.createElement(Icon, {\n        icon: leftIcon,\n        \"aria-hidden\": true,\n        tabIndex: -1\n      });\n    }\n\n    return undefined;\n  };\n\n  InputGroup.prototype.maybeRenderRightElement = function () {\n    var rightElement = this.props.rightElement;\n\n    if (rightElement == null) {\n      return undefined;\n    }\n\n    return React.createElement(\"span\", {\n      className: Classes.INPUT_ACTION,\n      ref: this.refHandlers.rightElement\n    }, rightElement);\n  };\n\n  InputGroup.prototype.updateInputWidth = function () {\n    var _a = this.state,\n        leftElementWidth = _a.leftElementWidth,\n        rightElementWidth = _a.rightElementWidth;\n\n    if (this.leftElement != null) {\n      var clientWidth = this.leftElement.clientWidth; // small threshold to prevent infinite loops\n\n      if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n        this.setState({\n          leftElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        leftElementWidth: undefined\n      });\n    }\n\n    if (this.rightElement != null) {\n      var clientWidth = this.rightElement.clientWidth; // small threshold to prevent infinite loops\n\n      if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n        this.setState({\n          rightElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        rightElementWidth: undefined\n      });\n    }\n  };\n\n  InputGroup.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".InputGroup\");\n  return InputGroup;\n}(AbstractPureComponent2);\n\nexport { InputGroup };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Errors","DISPLAYNAME_PREFIX","removeNonHTMLProps","Icon","AsyncControllableInput","__extends","_this","leftElement","ref","rightElement","InputGroup","props","_c","asyncControl","className","disabled","fill","inputRef","intent","large","small","round","inputGroupClasses","INPUT_GROUP","intentClass","_a","DISABLED","FILL","LARGE","SMALL","ROUND","style","paddingLeft","state","leftElementWidth","paddingRight","rightElementWidth","inputProps","type","INPUT","maybeRenderLeftElement","__assign","maybeRenderRightElement","updateInputWidth","prevProps","leftIcon","console","warn","INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX","INPUT_LEFT_CONTAINER","refHandlers","icon","tabIndex","undefined","INPUT_ACTION","clientWidth","Math","abs","setState"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/forms/inputGroup.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, IRef } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport {\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    IControlledProps,\n    ControlledProps2,\n    IntentProps,\n    Props,\n    MaybeElement,\n    removeNonHTMLProps,\n} from \"../../common/props\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type InputGroupProps = IInputGroupProps;\n\n/**\n * @deprecated use IInputGroupProps2.\n *\n * NOTE: This interface does not extend HTMLInputProps due to incompatiblity with `IControlledProps`.\n * Instead, we union the props in the component definition, which does work and properly disallows `string[]` values.\n */\nexport interface IInputGroupProps\n    // eslint-disable-next-line deprecation/deprecation\n    extends IControlledProps,\n        IntentProps,\n        Props {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the input is non-interactive.\n     * Note that `rightElement` must be disabled separately; this prop will not affect it.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the component should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /** Ref handler or a ref object that receives HTML `<input>` element backing this component. */\n    inputRef?: IRef<HTMLInputElement>;\n\n    /**\n     * Element to render on the left side of input.  This prop is mutually exclusive\n     * with `leftIcon`.\n     */\n    leftElement?: JSX.Element;\n\n    /**\n     * Name of a Blueprint UI icon to render on the left side of the input group,\n     * before the user's cursor.  This prop is mutually exclusive with `leftElement`.\n     * Usage with content is deprecated.  Use `leftElement` for elements.\n     */\n    leftIcon?: IconName | MaybeElement;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a minimal button, tag, or small spinner.\n     */\n    rightElement?: JSX.Element;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type InputGroupProps2 = IInputGroupProps2;\n/** @deprecated use InputGroupProps2 */\nexport interface IInputGroupProps2\n    extends Omit<HTMLInputProps, keyof ControlledProps2>,\n        ControlledProps2,\n        IntentProps,\n        Props {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the input is non-interactive.\n     * Note that `rightElement` must be disabled separately; this prop will not affect it.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the component should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /** Ref handler or a ref object that receives HTML `<input>` element backing this component. */\n    inputRef?: IRef<HTMLInputElement>;\n\n    /**\n     * Element to render on the left side of input.  This prop is mutually exclusive\n     * with `leftIcon`.\n     */\n    leftElement?: JSX.Element;\n\n    /**\n     * Name of a Blueprint UI icon to render on the left side of the input group,\n     * before the user's cursor.  This prop is mutually exclusive with `leftElement`.\n     * Usage with content is deprecated.  Use `leftElement` for elements.\n     */\n    leftIcon?: IconName | MaybeElement;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a minimal button, tag, or small spinner.\n     */\n    rightElement?: JSX.Element;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\nexport interface IInputGroupState {\n    leftElementWidth?: number;\n    rightElementWidth?: number;\n}\n\nexport class InputGroup extends AbstractPureComponent2<InputGroupProps2, IInputGroupState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.InputGroup`;\n\n    public state: IInputGroupState = {};\n\n    private leftElement: HTMLElement | null = null;\n\n    private rightElement: HTMLElement | null = null;\n\n    private refHandlers = {\n        leftElement: (ref: HTMLSpanElement | null) => (this.leftElement = ref),\n        rightElement: (ref: HTMLSpanElement | null) => (this.rightElement = ref),\n    };\n\n    public render() {\n        const { asyncControl = false, className, disabled, fill, inputRef, intent, large, small, round } = this.props;\n        const inputGroupClasses = classNames(\n            Classes.INPUT_GROUP,\n            Classes.intentClass(intent),\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n                [Classes.ROUND]: round,\n            },\n            className,\n        );\n        const style: React.CSSProperties = {\n            ...this.props.style,\n            paddingLeft: this.state.leftElementWidth,\n            paddingRight: this.state.rightElementWidth,\n        };\n        const inputProps = {\n            type: \"text\",\n            ...removeNonHTMLProps(this.props),\n            className: Classes.INPUT,\n            style,\n        };\n\n        return (\n            <div className={inputGroupClasses}>\n                {this.maybeRenderLeftElement()}\n                {asyncControl ? (\n                    <AsyncControllableInput {...inputProps} inputRef={inputRef} />\n                ) : (\n                    <input {...inputProps} ref={inputRef} />\n                )}\n                {this.maybeRenderRightElement()}\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.updateInputWidth();\n    }\n\n    public componentDidUpdate(prevProps: InputGroupProps2) {\n        const { leftElement, rightElement } = this.props;\n        if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n            this.updateInputWidth();\n        }\n    }\n\n    protected validateProps(props: InputGroupProps2) {\n        if (props.leftElement != null && props.leftIcon != null) {\n            console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n        }\n    }\n\n    private maybeRenderLeftElement() {\n        const { leftElement, leftIcon } = this.props;\n\n        if (leftElement != null) {\n            return (\n                <span className={Classes.INPUT_LEFT_CONTAINER} ref={this.refHandlers.leftElement}>\n                    {leftElement}\n                </span>\n            );\n        } else if (leftIcon != null) {\n            return <Icon icon={leftIcon} aria-hidden={true} tabIndex={-1} />;\n        }\n\n        return undefined;\n    }\n\n    private maybeRenderRightElement() {\n        const { rightElement } = this.props;\n        if (rightElement == null) {\n            return undefined;\n        }\n        return (\n            <span className={Classes.INPUT_ACTION} ref={this.refHandlers.rightElement}>\n                {rightElement}\n            </span>\n        );\n    }\n\n    private updateInputWidth() {\n        const { leftElementWidth, rightElementWidth } = this.state;\n\n        if (this.leftElement != null) {\n            const { clientWidth } = this.leftElement;\n            // small threshold to prevent infinite loops\n            if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n                this.setState({ leftElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ leftElementWidth: undefined });\n        }\n\n        if (this.rightElement != null) {\n            const { clientWidth } = this.rightElement;\n            // small threshold to prevent infinite loops\n            if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n                this.setState({ rightElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ rightElementWidth: undefined });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}