{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-enable deprecation/deprecation */\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA, arrB, compare) {\n  if (compare === void 0) {\n    compare = function (a, b) {\n      return a === b;\n    };\n  } // treat `null` and `undefined` as the same\n\n\n  if (arrA == null && arrB == null) {\n    return true;\n  } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n    return false;\n  } else {\n    return arrA.every(function (a, i) {\n      return compare(a, arrB[i]);\n    });\n  }\n}\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\n\nexport function shallowCompareKeys(objA, objB, keys) {\n  // treat `null` and `undefined` as the same\n  if (objA == null && objB == null) {\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return false;\n  } else if (keys != null) {\n    return shallowCompareKeysImpl(objA, objB, keys);\n  } else {\n    // shallowly compare all keys from both objects\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    return shallowCompareKeysImpl(objA, objB, {\n      include: keysA\n    }) && shallowCompareKeysImpl(objA, objB, {\n      include: keysB\n    });\n  }\n}\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\n\nexport function deepCompareKeys(objA, objB, keys) {\n  if (objA === objB) {\n    return true;\n  } else if (objA == null && objB == null) {\n    // treat `null` and `undefined` as the same\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return arraysEqual(objA, objB, deepCompareKeys);\n  } else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n    return objA === objB;\n  } else if (keys != null) {\n    return deepCompareKeysImpl(objA, objB, keys);\n  } else if (objA.constructor !== objB.constructor) {\n    return false;\n  } else {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n\n    if (keysA == null || keysB == null) {\n      return false;\n    }\n\n    if (keysA.length === 0 && keysB.length === 0) {\n      return true;\n    }\n\n    return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n  }\n}\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\n\nexport function getDeepUnequalKeyValues(objA, objB, keys) {\n  if (objA === void 0) {\n    objA = {};\n  }\n\n  if (objB === void 0) {\n    objB = {};\n  }\n\n  var filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n  return getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\n    return deepCompareKeys(a, b, [key]);\n  });\n} // Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\n\nfunction shallowCompareKeysImpl(objA, objB, keys) {\n  return filterKeys(objA, objB, keys).every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n  });\n}\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\n\n\nfunction deepCompareKeysImpl(objA, objB, keys) {\n  return keys.every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n  });\n}\n\nfunction isSimplePrimitiveType(value) {\n  return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction filterKeys(objA, objB, keys) {\n  if (isAllowlist(keys)) {\n    return keys.include;\n  } else if (isDenylist(keys)) {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB); // merge keys from both objects into a big set for quick access\n\n    var keySet_1 = arrayToObject(keysA.concat(keysB)); // delete denied keys from the key set\n\n    keys.exclude.forEach(function (key) {\n      return delete keySet_1[key];\n    }); // return the remaining keys as an array\n\n    return Object.keys(keySet_1);\n  }\n\n  return [];\n}\n\nfunction isAllowlist(keys) {\n  return keys != null && keys.include != null;\n}\n\nfunction isDenylist(keys) {\n  return keys != null && keys.exclude != null;\n}\n\nfunction arrayToObject(arr) {\n  return arr.reduce(function (obj, element) {\n    obj[element] = true;\n    return obj;\n  }, {});\n}\n\nfunction getUnequalKeyValues(objA, objB, keys, compareFn) {\n  var unequalKeys = keys.filter(function (key) {\n    return !compareFn(objA, objB, key);\n  });\n  var unequalKeyValues = unequalKeys.map(function (key) {\n    return {\n      key: key,\n      valueA: objA[key],\n      valueB: objB[key]\n    };\n  });\n  return unequalKeyValues;\n}\n\nfunction unionKeys(objA, objB) {\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  var concatKeys = keysA.concat(keysB);\n  var keySet = arrayToObject(concatKeys);\n  return Object.keys(keySet);\n}","map":{"version":3,"mappings":"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","names":["arraysEqual","arrA","arrB","compare","a","b","length","every","i","shallowCompareKeys","objA","objB","keys","Array","isArray","shallowCompareKeysImpl","keysA","Object","keysB","include","deepCompareKeys","isSimplePrimitiveType","deepCompareKeysImpl","constructor","getDeepUnequalKeyValues","filteredKeys","unionKeys","getUnequalKeyValues","key","filterKeys","hasOwnProperty","value","isAllowlist","isDenylist","keySet_1","arrayToObject","concat","exclude","forEach","arr","reduce","obj","element","compareFn","unequalKeys","filter","unequalKeyValues","map","valueA","valueB","concatKeys","keySet"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/common/utils/compareUtils.ts"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// we use the empty object {} a lot in this public API\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated use KeyAllowlist */\nexport interface IKeyAllowlist<T> {\n    include: Array<keyof T>;\n}\nexport type KeyAllowlist<T> = IKeyAllowlist<T>;\n\n/** @deprecated use KeyDenylist */\nexport interface IKeyDenylist<T> {\n    exclude: Array<keyof T>;\n}\nexport type KeyDenylist<T> = IKeyDenylist<T>;\n\n/* eslint-enable deprecation/deprecation */\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    } else {\n        return arrA.every((a, i) => compare(a, arrB[i]));\n    }\n}\n\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function shallowCompareKeys<T extends {}>(\n    objA: T | null | undefined,\n    objB: T | null | undefined,\n    keys?: KeyDenylist<T> | KeyAllowlist<T>,\n) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    } else if (keys != null) {\n        return shallowCompareKeysImpl(objA, objB, keys);\n    } else {\n        // shallowly compare all keys from both objects\n        const keysA = Object.keys(objA) as Array<keyof T>;\n        const keysB = Object.keys(objB) as Array<keyof T>;\n        return (\n            shallowCompareKeysImpl(objA, objB, { include: keysA }) &&\n            shallowCompareKeysImpl(objA, objB, { include: keysB })\n        );\n    }\n}\n\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function deepCompareKeys(objA: any, objB: any, keys?: Array<string | number | symbol>): boolean {\n    if (objA === objB) {\n        return true;\n    } else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    } else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    } else if (keys != null) {\n        return deepCompareKeysImpl(objA, objB, keys);\n    } else if (objA.constructor !== objB.constructor) {\n        return false;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n    }\n}\n\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues<T extends {}>(\n    objA: T = ({} as any) as T,\n    objB: T = ({} as any) as T,\n    keys?: Array<keyof T>,\n) {\n    const filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n    return getUnequalKeyValues(objA, objB, filteredKeys, (a, b, key) => {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\n\n// Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction shallowCompareKeysImpl<T extends object>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    return filterKeys(objA, objB, keys).every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction deepCompareKeysImpl(objA: any, objB: any, keys: Array<string | number | symbol>): boolean {\n    return keys.every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\n\nfunction isSimplePrimitiveType(value: any) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction filterKeys<T>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    if (isAllowlist(keys)) {\n        return keys.include;\n    } else if (isDenylist(keys)) {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n\n        // merge keys from both objects into a big set for quick access\n        const keySet = arrayToObject(keysA.concat(keysB));\n\n        // delete denied keys from the key set\n        keys.exclude.forEach(key => delete keySet[key]);\n\n        // return the remaining keys as an array\n        return Object.keys(keySet) as Array<keyof T>;\n    }\n\n    return [];\n}\n\nfunction isAllowlist<T>(keys: any): keys is KeyAllowlist<T> {\n    return keys != null && (keys as KeyAllowlist<T>).include != null;\n}\n\nfunction isDenylist<T>(keys: any): keys is KeyDenylist<T> {\n    return keys != null && (keys as KeyDenylist<T>).exclude != null;\n}\n\nfunction arrayToObject(arr: any[]) {\n    return arr.reduce((obj: any, element: any) => {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\n\nfunction getUnequalKeyValues<T extends {}>(\n    objA: T,\n    objB: T,\n    keys: Array<keyof T>,\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\n) {\n    const unequalKeys = keys.filter(key => !compareFn(objA, objB, key));\n    const unequalKeyValues = unequalKeys.map(key => ({\n        key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }));\n    return unequalKeyValues;\n}\n\nfunction unionKeys<T extends {}>(objA: T, objB: T) {\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const concatKeys = keysA.concat(keysB);\n    const keySet = arrayToObject(concatKeys);\n\n    return Object.keys(keySet) as Array<keyof T>;\n}\n"]},"metadata":{},"sourceType":"module"}