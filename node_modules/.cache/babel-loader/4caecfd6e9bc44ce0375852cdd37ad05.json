{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Button, Classes as CoreClasses, DISPLAYNAME_PREFIX, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { formatTimezone, TimezoneDisplayFormat } from \"./timezoneDisplayFormat\";\nimport { getInitialTimezoneItems, getTimezoneItems } from \"./timezoneItems\";\nexport { TimezoneDisplayFormat };\nvar TypedSelect = Select.ofType();\n\nvar TimezonePicker =\n/** @class */\nfunction (_super) {\n  __extends(TimezonePicker, _super);\n\n  function TimezonePicker(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.filterItems = function (query, items) {\n      // using list predicate so only one RegExp instance is needed\n      // escape bad regex characters, let spaces act as any separator\n      var expr = new RegExp(query.replace(/([[()+*?])/g, \"\\\\$1\").replace(\" \", \"[ _/\\\\(\\\\)]+\"), \"i\");\n      return items.filter(function (item) {\n        return expr.test(item.text + item.label);\n      });\n    };\n\n    _this.renderItem = function (item, _a) {\n      var handleClick = _a.handleClick,\n          handleFocus = _a.handleFocus,\n          modifiers = _a.modifiers;\n\n      if (!modifiers.matchesPredicate) {\n        return null;\n      }\n\n      return React.createElement(MenuItem, {\n        key: item.key,\n        selected: modifiers.active,\n        icon: item.iconName,\n        text: item.text,\n        label: item.label,\n        onClick: handleClick,\n        onFocus: handleFocus,\n        shouldDismissPopover: false\n      });\n    };\n\n    _this.handleItemSelect = function (timezone) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, timezone.timezone);\n    };\n\n    _this.handleQueryChange = function (query) {\n      return _this.setState({\n        query: query\n      });\n    };\n\n    var _a = props.date,\n        date = _a === void 0 ? new Date() : _a,\n        showLocalTimezone = props.showLocalTimezone,\n        _b = props.inputProps,\n        inputProps = _b === void 0 ? {} : _b;\n    _this.state = {\n      query: inputProps.value || \"\"\n    };\n    _this.timezoneItems = getTimezoneItems(date);\n    _this.initialTimezoneItems = getInitialTimezoneItems(date, showLocalTimezone);\n    return _this;\n  }\n\n  TimezonePicker.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        disabled = _a.disabled,\n        inputProps = _a.inputProps,\n        popoverProps = _a.popoverProps;\n    var query = this.state.query;\n\n    var finalInputProps = __assign({\n      placeholder: \"Search for timezones...\"\n    }, inputProps);\n\n    var finalPopoverProps = __assign(__assign({}, popoverProps), {\n      popoverClassName: classNames(Classes.TIMEZONE_PICKER_POPOVER, popoverProps.popoverClassName)\n    });\n\n    return React.createElement(TypedSelect, {\n      className: classNames(Classes.TIMEZONE_PICKER, className),\n      items: query ? this.timezoneItems : this.initialTimezoneItems,\n      itemListPredicate: this.filterItems,\n      itemRenderer: this.renderItem,\n      noResults: React.createElement(MenuItem, {\n        disabled: true,\n        text: \"No matching timezones.\"\n      }),\n      onItemSelect: this.handleItemSelect,\n      resetOnSelect: true,\n      resetOnClose: true,\n      popoverProps: finalPopoverProps,\n      inputProps: finalInputProps,\n      disabled: disabled,\n      onQueryChange: this.handleQueryChange\n    }, children != null ? children : this.renderButton());\n  };\n\n  TimezonePicker.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n\n    var _a = this.props,\n        _b = _a.date,\n        nextDate = _b === void 0 ? new Date() : _b,\n        _c = _a.inputProps,\n        nextInputProps = _c === void 0 ? {} : _c;\n\n    if (this.props.showLocalTimezone !== prevProps.showLocalTimezone) {\n      this.initialTimezoneItems = getInitialTimezoneItems(nextDate, this.props.showLocalTimezone);\n    }\n\n    if (nextInputProps.value !== undefined && this.state.query !== nextInputProps.value) {\n      this.setState({\n        query: nextInputProps.value\n      });\n    }\n  };\n\n  TimezonePicker.prototype.validateProps = function (props) {\n    var childrenCount = React.Children.count(props.children);\n\n    if (childrenCount > 1) {\n      console.warn(Errors.TIMEZONE_PICKER_WARN_TOO_MANY_CHILDREN);\n    }\n  };\n\n  TimezonePicker.prototype.renderButton = function () {\n    var _a = this.props,\n        _b = _a.buttonProps,\n        buttonProps = _b === void 0 ? {} : _b,\n        date = _a.date,\n        disabled = _a.disabled,\n        placeholder = _a.placeholder,\n        value = _a.value,\n        valueDisplayFormat = _a.valueDisplayFormat;\n    var buttonContent = value ? formatTimezone(value, date, valueDisplayFormat) : React.createElement(\"span\", {\n      className: CoreClasses.TEXT_MUTED\n    }, placeholder);\n    return React.createElement(Button, __assign({\n      rightIcon: \"caret-down\",\n      disabled: disabled,\n      text: buttonContent\n    }, buttonProps));\n  };\n\n  TimezonePicker.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TimezonePicker\");\n  TimezonePicker.defaultProps = {\n    date: new Date(),\n    disabled: false,\n    inputProps: {},\n    placeholder: \"Select timezone...\",\n    popoverProps: {},\n    showLocalTimezone: true,\n    valueDisplayFormat: TimezoneDisplayFormat.OFFSET\n  };\n  return TimezonePicker;\n}(AbstractPureComponent2);\n\nexport { TimezonePicker };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Button","Classes","CoreClasses","DISPLAYNAME_PREFIX","MenuItem","Select","Errors","formatTimezone","TimezoneDisplayFormat","getInitialTimezoneItems","getTimezoneItems","TypedSelect","ofType","__extends","props","context","_super","_this","query","items","expr","RegExp","replace","filter","test","item","text","label","_a","handleClick","handleFocus","modifiers","matchesPredicate","key","selected","active","icon","iconName","onClick","onFocus","shouldDismissPopover","timezone","onChange","_b","setState","Date","showLocalTimezone","inputProps","state","value","timezoneItems","date","initialTimezoneItems","TimezonePicker","children","className","disabled","popoverProps","finalInputProps","placeholder","finalPopoverProps","popoverClassName","TIMEZONE_PICKER_POPOVER","TIMEZONE_PICKER","itemListPredicate","filterItems","itemRenderer","renderItem","noResults","onItemSelect","handleItemSelect","resetOnSelect","resetOnClose","onQueryChange","handleQueryChange","renderButton","prevProps","prevState","componentDidUpdate","call","nextDate","_c","nextInputProps","undefined","childrenCount","Children","count","console","warn","TIMEZONE_PICKER_WARN_TOO_MANY_CHILDREN","buttonProps","valueDisplayFormat","buttonContent","TEXT_MUTED","__assign","rightIcon","OFFSET"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/timezone/src/components/timezone-picker/timezonePicker.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Button,\n    Classes as CoreClasses,\n    DISPLAYNAME_PREFIX,\n    ButtonProps,\n    InputGroupProps2,\n    IPopoverProps,\n    Props,\n    MenuItem,\n} from \"@blueprintjs/core\";\nimport { ItemListPredicate, ItemRenderer, Select } from \"@blueprintjs/select\";\n\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { formatTimezone, TimezoneDisplayFormat } from \"./timezoneDisplayFormat\";\nimport { getInitialTimezoneItems, getTimezoneItems, TimezoneItem } from \"./timezoneItems\";\n\nexport { TimezoneDisplayFormat };\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TimezonePickerProps = ITimezonePickerProps;\n/** @deprecated use TimezonePickerProps */\nexport interface ITimezonePickerProps extends Props {\n    children?: React.ReactNode;\n\n    /**\n     * The currently selected timezone UTC identifier, e.g. \"Pacific/Honolulu\".\n     * See https://www.iana.org/time-zones for more information.\n     */\n    value: string | undefined;\n\n    /**\n     * Callback invoked when the user selects a timezone.\n     */\n    onChange: (timezone: string) => void;\n\n    /**\n     * The date to use when formatting timezone offsets.\n     * An offset date is necessary to account for DST, but typically the default value of `now` will be sufficient.\n     *\n     * @default now\n     */\n    date?: Date;\n\n    /**\n     * Whether this component is non-interactive.\n     * This prop will be ignored if `children` is provided.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether to show the local timezone at the top of the list of initial timezone suggestions.\n     *\n     * @default true\n     */\n    showLocalTimezone?: boolean;\n\n    /**\n     * Format to use when displaying the selected (or default) timezone within the target element.\n     * This prop will be ignored if `children` is provided.\n     *\n     * @default TimezoneDisplayFormat.OFFSET\n     */\n    valueDisplayFormat?: TimezoneDisplayFormat;\n\n    /**\n     * Text to show when no timezone has been selected (`value === undefined`).\n     * This prop will be ignored if `children` is provided.\n     *\n     * @default \"Select timezone...\"\n     */\n    placeholder?: string;\n\n    /**\n     * Props to spread to the target `Button`.\n     * This prop will be ignored if `children` is provided.\n     */\n    buttonProps?: Partial<ButtonProps>;\n\n    /**\n     * Props to spread to the filter `InputGroup`.\n     * All props are supported except `ref` (use `inputRef` instead).\n     * If you want to control the filter input, you can pass `value` and `onChange` here\n     * to override `Select`'s own behavior.\n     */\n    inputProps?: InputGroupProps2;\n\n    /** Props to spread to `Popover`. Note that `content` cannot be changed. */\n    popoverProps?: Partial<IPopoverProps>;\n}\n\nexport interface ITimezonePickerState {\n    query: string;\n}\n\nconst TypedSelect = Select.ofType<TimezoneItem>();\n\nexport class TimezonePicker extends AbstractPureComponent2<TimezonePickerProps, ITimezonePickerState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TimezonePicker`;\n\n    public static defaultProps: Partial<TimezonePickerProps> = {\n        date: new Date(),\n        disabled: false,\n        inputProps: {},\n        placeholder: \"Select timezone...\",\n        popoverProps: {},\n        showLocalTimezone: true,\n        valueDisplayFormat: TimezoneDisplayFormat.OFFSET,\n    };\n\n    private timezoneItems: TimezoneItem[];\n\n    private initialTimezoneItems: TimezoneItem[];\n\n    constructor(props: TimezonePickerProps, context?: any) {\n        super(props, context);\n\n        const { date = new Date(), showLocalTimezone, inputProps = {} } = props;\n        this.state = { query: inputProps.value || \"\" };\n\n        this.timezoneItems = getTimezoneItems(date);\n        this.initialTimezoneItems = getInitialTimezoneItems(date, showLocalTimezone);\n    }\n\n    public render() {\n        const { children, className, disabled, inputProps, popoverProps } = this.props;\n        const { query } = this.state;\n\n        const finalInputProps: InputGroupProps2 = {\n            placeholder: \"Search for timezones...\",\n            ...inputProps,\n        };\n        const finalPopoverProps: Partial<IPopoverProps> = {\n            ...popoverProps,\n            popoverClassName: classNames(Classes.TIMEZONE_PICKER_POPOVER, popoverProps.popoverClassName),\n        };\n\n        return (\n            <TypedSelect\n                className={classNames(Classes.TIMEZONE_PICKER, className)}\n                items={query ? this.timezoneItems : this.initialTimezoneItems}\n                itemListPredicate={this.filterItems}\n                itemRenderer={this.renderItem}\n                noResults={<MenuItem disabled={true} text=\"No matching timezones.\" />}\n                onItemSelect={this.handleItemSelect}\n                resetOnSelect={true}\n                resetOnClose={true}\n                popoverProps={finalPopoverProps}\n                inputProps={finalInputProps}\n                disabled={disabled}\n                onQueryChange={this.handleQueryChange}\n            >\n                {children != null ? children : this.renderButton()}\n            </TypedSelect>\n        );\n    }\n\n    public componentDidUpdate(prevProps: TimezonePickerProps, prevState: ITimezonePickerState) {\n        super.componentDidUpdate(prevProps, prevState);\n        const { date: nextDate = new Date(), inputProps: nextInputProps = {} } = this.props;\n\n        if (this.props.showLocalTimezone !== prevProps.showLocalTimezone) {\n            this.initialTimezoneItems = getInitialTimezoneItems(nextDate, this.props.showLocalTimezone);\n        }\n        if (nextInputProps.value !== undefined && this.state.query !== nextInputProps.value) {\n            this.setState({ query: nextInputProps.value });\n        }\n    }\n\n    protected validateProps(props: IPopoverProps & { children?: React.ReactNode }) {\n        const childrenCount = React.Children.count(props.children);\n        if (childrenCount > 1) {\n            console.warn(Errors.TIMEZONE_PICKER_WARN_TOO_MANY_CHILDREN);\n        }\n    }\n\n    private renderButton() {\n        const { buttonProps = {}, date, disabled, placeholder, value, valueDisplayFormat } = this.props;\n        const buttonContent = value ? (\n            formatTimezone(value, date, valueDisplayFormat)\n        ) : (\n            <span className={CoreClasses.TEXT_MUTED}>{placeholder}</span>\n        );\n        return <Button rightIcon=\"caret-down\" disabled={disabled} text={buttonContent} {...buttonProps} />;\n    }\n\n    private filterItems: ItemListPredicate<TimezoneItem> = (query, items) => {\n        // using list predicate so only one RegExp instance is needed\n        // escape bad regex characters, let spaces act as any separator\n        const expr = new RegExp(query.replace(/([[()+*?])/g, \"\\\\$1\").replace(\" \", \"[ _/\\\\(\\\\)]+\"), \"i\");\n        return items.filter(item => expr.test(item.text + item.label));\n    };\n\n    private renderItem: ItemRenderer<TimezoneItem> = (item, { handleClick, handleFocus, modifiers }) => {\n        if (!modifiers.matchesPredicate) {\n            return null;\n        }\n        return (\n            <MenuItem\n                key={item.key}\n                selected={modifiers.active}\n                icon={item.iconName}\n                text={item.text}\n                label={item.label}\n                onClick={handleClick}\n                onFocus={handleFocus}\n                shouldDismissPopover={false}\n            />\n        );\n    };\n\n    private handleItemSelect = (timezone: TimezoneItem) => this.props.onChange?.(timezone.timezone);\n\n    private handleQueryChange = (query: string) => this.setState({ query });\n}\n"]},"metadata":{},"sourceType":"module"}