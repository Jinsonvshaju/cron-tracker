{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNode } from \"./treeNode\"; // eslint-disable-next-line @typescript-eslint/ban-types\n\nvar Tree =\n/** @class */\nfunction (_super) {\n  __extends(Tree, _super);\n\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.nodeRefs = {};\n\n    _this.handleNodeCollapse = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeCollapse, node, e);\n    };\n\n    _this.handleNodeClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeClick, node, e);\n    };\n\n    _this.handleContentRef = function (node, element) {\n      if (element != null) {\n        _this.nodeRefs[node.props.id] = element;\n      } else {\n        // don't want our object to get bloated with old keys\n        delete _this.nodeRefs[node.props.id];\n      }\n    };\n\n    _this.handleNodeContextMenu = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeContextMenu, node, e);\n    };\n\n    _this.handleNodeDoubleClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeDoubleClick, node, e);\n    };\n\n    _this.handleNodeExpand = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeExpand, node, e);\n    };\n\n    _this.handleNodeMouseEnter = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseEnter, node, e);\n    };\n\n    _this.handleNodeMouseLeave = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseLeave, node, e);\n    };\n\n    return _this;\n  }\n\n  Tree.ofType = function () {\n    return Tree;\n  };\n\n  Tree.nodeFromPath = function (path, treeNodes) {\n    if (path.length === 1) {\n      return treeNodes[path[0]];\n    } else {\n      return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);\n    }\n  };\n\n  Tree.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: classNames(Classes.TREE, this.props.className)\n    }, this.renderNodes(this.props.contents, [], Classes.TREE_ROOT));\n  };\n  /**\n   * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n   * This element does not contain the children of the node, only its label and controls.\n   * If the node is not currently mounted, `undefined` is returned.\n   */\n\n\n  Tree.prototype.getNodeContentElement = function (nodeId) {\n    return this.nodeRefs[nodeId];\n  };\n\n  Tree.prototype.renderNodes = function (treeNodes, currentPath, className) {\n    var _this = this;\n\n    if (treeNodes == null) {\n      return null;\n    }\n\n    var nodeItems = treeNodes.map(function (node, i) {\n      var elementPath = currentPath.concat(i);\n      var TypedTreeNode = TreeNode.ofType();\n      return React.createElement(TypedTreeNode, __assign({}, node, {\n        key: node.id,\n        contentRef: _this.handleContentRef,\n        depth: elementPath.length - 1,\n        onClick: _this.handleNodeClick,\n        onContextMenu: _this.handleNodeContextMenu,\n        onCollapse: _this.handleNodeCollapse,\n        onDoubleClick: _this.handleNodeDoubleClick,\n        onExpand: _this.handleNodeExpand,\n        onMouseEnter: _this.handleNodeMouseEnter,\n        onMouseLeave: _this.handleNodeMouseLeave,\n        path: elementPath\n      }), _this.renderNodes(node.childNodes, elementPath));\n    });\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.TREE_NODE_LIST, className)\n    }, nodeItems);\n  };\n\n  Tree.prototype.handlerHelper = function (handlerFromProps, node, e) {\n    if (isFunction(handlerFromProps)) {\n      var nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n      handlerFromProps(nodeData, node.props.path, e);\n    }\n  };\n\n  Tree.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Tree\");\n  return Tree;\n}(React.Component);\n\nexport { Tree };","map":{"version":3,"mappings":"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","names":["classNames","React","Classes","DISPLAYNAME_PREFIX","isFunction","TreeNode","__extends","_this","node","e","handlerHelper","props","onNodeCollapse","onNodeClick","element","nodeRefs","id","onNodeContextMenu","onNodeDoubleClick","onNodeExpand","onNodeMouseEnter","onNodeMouseLeave","Tree","path","treeNodes","length","nodeFromPath","slice","childNodes","className","TREE","renderNodes","contents","TREE_ROOT","nodeId","currentPath","nodeItems","map","i","elementPath","concat","TypedTreeNode","ofType","__assign","key","contentRef","handleContentRef","depth","onClick","handleNodeClick","onContextMenu","handleNodeContextMenu","onCollapse","handleNodeCollapse","onDoubleClick","handleNodeDoubleClick","onExpand","handleNodeExpand","onMouseEnter","handleNodeMouseEnter","onMouseLeave","handleNodeMouseLeave","TREE_NODE_LIST","handlerFromProps","nodeData","Component"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/tree/tree.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNodeInfo, TreeNode } from \"./treeNode\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TreeEventHandler<T = {}> = (\n    node: TreeNodeInfo<T>,\n    nodePath: number[],\n    e: React.MouseEvent<HTMLElement>,\n) => void;\n\n// eslint-disable-next-line @typescript-eslint/ban-types, deprecation/deprecation\nexport type TreeProps<T = {}> = ITreeProps<T>;\n/** @deprecated use TreeProps */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeProps<T = {}> extends Props {\n    /**\n     * The data specifying the contents and appearance of the tree.\n     */\n    contents: ReadonlyArray<TreeNodeInfo<T>>;\n\n    /**\n     * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\n     */\n    onNodeClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when caret of an expanded node is clicked.\n     */\n    onNodeCollapse?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is right-clicked or the context menu button is pressed on a focused node.\n     */\n    onNodeContextMenu?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is double-clicked. Be careful when using this in combination with\n     * an `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\n     * See http://stackoverflow.com/q/5497073/3124288\n     */\n    onNodeDoubleClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the caret of a collapsed node is clicked.\n     */\n    onNodeExpand?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved over a node.\n     */\n    onNodeMouseEnter?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved out of a node.\n     */\n    onNodeMouseLeave?: TreeEventHandler<T>;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class Tree<T = {}> extends React.Component<TreeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tree`;\n\n    public static ofType<U>() {\n        return Tree as new (props: TreeProps<U>) => Tree<U>;\n    }\n\n    public static nodeFromPath<U>(\n        path: readonly number[],\n        treeNodes?: ReadonlyArray<TreeNodeInfo<U>>,\n    ): TreeNodeInfo<U> {\n        if (path.length === 1) {\n            return treeNodes![path[0]];\n        } else {\n            return Tree.nodeFromPath(path.slice(1), treeNodes![path[0]].childNodes);\n        }\n    }\n\n    private nodeRefs: { [nodeId: string]: HTMLElement } = {};\n\n    public render() {\n        return (\n            <div className={classNames(Classes.TREE, this.props.className)}>\n                {this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)}\n            </div>\n        );\n    }\n\n    /**\n     * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n     * This element does not contain the children of the node, only its label and controls.\n     * If the node is not currently mounted, `undefined` is returned.\n     */\n    public getNodeContentElement(nodeId: string | number): HTMLElement | undefined {\n        return this.nodeRefs[nodeId];\n    }\n\n    private renderNodes(\n        treeNodes: ReadonlyArray<TreeNodeInfo<T>> | undefined,\n        currentPath?: number[],\n        className?: string,\n    ) {\n        if (treeNodes == null) {\n            return null;\n        }\n\n        const nodeItems = treeNodes.map((node, i) => {\n            const elementPath = currentPath!.concat(i);\n            const TypedTreeNode = TreeNode.ofType<T>();\n            return (\n                <TypedTreeNode\n                    {...node}\n                    key={node.id}\n                    contentRef={this.handleContentRef}\n                    depth={elementPath.length - 1}\n                    onClick={this.handleNodeClick}\n                    onContextMenu={this.handleNodeContextMenu}\n                    onCollapse={this.handleNodeCollapse}\n                    onDoubleClick={this.handleNodeDoubleClick}\n                    onExpand={this.handleNodeExpand}\n                    onMouseEnter={this.handleNodeMouseEnter}\n                    onMouseLeave={this.handleNodeMouseLeave}\n                    path={elementPath}\n                >\n                    {this.renderNodes(node.childNodes, elementPath)}\n                </TypedTreeNode>\n            );\n        });\n\n        return <ul className={classNames(Classes.TREE_NODE_LIST, className)}>{nodeItems}</ul>;\n    }\n\n    private handleNodeCollapse = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeCollapse, node, e);\n    };\n\n    private handleNodeClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeClick, node, e);\n    };\n\n    private handleContentRef = (node: TreeNode<T>, element: HTMLElement | null) => {\n        if (element != null) {\n            this.nodeRefs[node.props.id] = element;\n        } else {\n            // don't want our object to get bloated with old keys\n            delete this.nodeRefs[node.props.id];\n        }\n    };\n\n    private handleNodeContextMenu = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeContextMenu, node, e);\n    };\n\n    private handleNodeDoubleClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeDoubleClick, node, e);\n    };\n\n    private handleNodeExpand = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeExpand, node, e);\n    };\n\n    private handleNodeMouseEnter = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseEnter, node, e);\n    };\n\n    private handleNodeMouseLeave = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseLeave, node, e);\n    };\n\n    private handlerHelper(\n        handlerFromProps: TreeEventHandler<T> | undefined,\n        node: TreeNode<T>,\n        e: React.MouseEvent<HTMLElement>,\n    ) {\n        if (isFunction(handlerFromProps)) {\n            const nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n            handlerFromProps(nodeData, node.props.path, e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}