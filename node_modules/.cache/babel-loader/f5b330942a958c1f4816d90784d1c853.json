{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { config } from \"../../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {\n    popup,\n    setPopup\n  };\n  const [timer, setTimer] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const [movements, setMovements] = useState([]);\n  const [baseEvents, setBaseEvents] = useState([]);\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    populateMovementDetails();\n\n    if (firstRender) {\n      handleReload();\n    }\n\n    countTimer(); //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer() {\n    if (firstRender) {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 10000);\n    }\n  }\n\n  const handleEventClick = _ref => {\n    let {\n      event\n    } = _ref;\n    const key = getEventKey(event.start);\n\n    if (event.title.includes(\"Event\")) {\n      var messages = [];\n      const status = moment(key).isAfter(new Date()) ? \"Pending\" : \"Completed\";\n      Object.values(timeMap.get(key)).forEach(element => {\n        const message = element.name + \" \" + element.exchange + \" \" + element.cron + \" (\" + element.cronInfo + \" \" + element.timeZone + \") \";\n        messages.push(message);\n      });\n      setDisplayMap({\n        key: key,\n        values: messages,\n        status: status\n      });\n    } else if (event.title.includes(\"Movement\")) {\n      getStatus();\n      const element = getMovement(event.title);\n      const messages = [element.id + \" \" + element.status];\n      setDisplayMap({\n        key: `${element.counterParty + \" Movement\"}`,\n        values: messages,\n        status: element.status\n      });\n    }\n\n    setPopup(true);\n  };\n\n  function getStatus(id) {\n    //console.log(Object.values(config.status).filter(element=>element.value===id)[0])\n    console.log(Object.values(config.status));\n  }\n\n  function getMovement(title) {\n    return movements.filter(element => element.title === title)[0];\n  }\n\n  const handleReload = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        var startTimeMap = new Map();\n        var newEvents = [];\n        res.data.message.forEach(element => {\n          var {\n            name,\n            timeZone,\n            cron,\n            cronInfo,\n            exchange,\n            reportCycle,\n            createdTs,\n            triggerTimes\n          } = element;\n          triggerTimes.forEach(element => {\n            if (startTimeMap.has(getEventKey(element))) {\n              const newList = [{\n                name: name,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              const existingList = startTimeMap.get(getEventKey(element));\n              startTimeMap.set(getEventKey(element), existingList.concat(newList));\n            } else {\n              const list = [{\n                name: name,\n                timeZone: timeZone,\n                cron: cron,\n                cronInfo: cronInfo,\n                exchange: exchange,\n                reportCycle: reportCycle,\n                createdTs: createdTs\n              }];\n              startTimeMap.set(getEventKey(element), list);\n            }\n          });\n        });\n        startTimeMap.forEach((value, key) => {\n          if (!isNaN(new Date(key).getTime())) {\n            newEvents.push({\n              title: \"Event \" + newEvents.length,\n              start: key,\n              end: getEndTime(key)\n            });\n          }\n        });\n        setBaseEvents(newEvents);\n        setEvents(newEvents);\n        setTimeMap(startTimeMap);\n        setFirstRender(false);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const populateMovementDetails = () => {\n    return new Promise(resolve => {\n      api.getMovementRecords().then(res => {\n        var movementEvents = [];\n        var alteredMovements = [];\n        res.data.message.forEach(element => {\n          movementEvents.push({\n            title: \"Movement \" + movementEvents.length,\n            start: getEventKey(element.createdTs),\n            end: getEndTime(getEventKey(element.createdTs)),\n            color: \"red\"\n          });\n          alteredMovements.push({ ...element,\n            title: \"Movement \" + alteredMovements.length\n          });\n        });\n\n        if (baseEvents.length > 0) {\n          setEvents(baseEvents.concat(movementEvents));\n          setMovements(alteredMovements);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(POPup, {\n        elementsMap: displayMap,\n        stateValue: stateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridWeek\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        headerToolbar: {\n          left: \"prev,next\",\n          center: \"title\",\n          right: \"today\"\n        },\n        buttonText: {\n          today: \"Current Week\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:10:00\",\n        events: events,\n        slotLabelInterval: \"00:30:00\",\n        nowIndicator: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"puc2Qy4ZRXxno6osMmd8X4shreA=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","useEffect","API","moment","POPup","config","api","Home","props","timeMap","setTimeMap","Map","events","setEvents","displayMap","setDisplayMap","popup","setPopup","stateValue","timer","setTimer","firstRender","setFirstRender","movements","setMovements","baseEvents","setBaseEvents","getEventKey","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","populateMovementDetails","handleReload","countTimer","setTimeout","handleEventClick","event","key","start","title","includes","messages","status","isAfter","Object","values","get","forEach","element","message","name","exchange","cron","cronInfo","timeZone","push","getStatus","getMovement","id","counterParty","console","log","filter","Promise","resolve","getTriggerTimes","then","res","startTimeMap","newEvents","data","reportCycle","createdTs","triggerTimes","has","newList","existingList","set","concat","list","value","isNaN","getTime","length","end","catch","err","getMovementRecords","movementEvents","alteredMovements","color","left","center","right","today"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { config } from \"../../../config\"\n\nlet api = new API();\n\nfunction Home(props) {\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = { popup, setPopup };\n  const [timer, setTimer] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const [movements, setMovements] = useState([]);\n  const [baseEvents, setBaseEvents] = useState([]);\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    populateMovementDetails();\n    if (firstRender) {\n      handleReload();\n    }\n    countTimer();\n    //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer() {\n    if (firstRender) {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        setTimer(!timer);\n      }, 10000);\n    }\n  }\n\n  const handleEventClick = ({ event }) => {\n    const key = getEventKey(event.start);\n    if (event.title.includes(\"Event\")) {\n      var messages = [];\n      const status = moment(key).isAfter(new Date())?\"Pending\":\"Completed\";\n      Object.values(timeMap.get(key)).forEach((element) => {\n        const message =\n          element.name +\n          \" \" +\n          element.exchange +\n          \" \" +\n          element.cron +\n          \" (\" +\n          element.cronInfo +\n          \" \" +\n          element.timeZone +\n          \") \";\n        messages.push(message);\n      });\n      setDisplayMap({ key: key, values: messages, status:status});\n    } else if (event.title.includes(\"Movement\")) {\n      getStatus();\n      const element = getMovement(event.title);\n      const messages = [element.id + \" \" + element.status];\n      setDisplayMap({\n        key: `${element.counterParty + \" Movement\"}`,\n        values: messages,\n        status:element.status,\n      });\n    }\n    setPopup(true);\n  };\n\n  function getStatus(id){\n    //console.log(Object.values(config.status).filter(element=>element.value===id)[0])\n    console.log(Object.values(config.status))\n  }\n\n  function getMovement(title) {\n    return movements.filter((element) => element.title === title)[0];\n  }\n\n  const handleReload = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          var startTimeMap = new Map();\n          var newEvents = [];\n          res.data.message.forEach((element) => {\n            var {\n              name,\n              timeZone,\n              cron,\n              cronInfo,\n              exchange,\n              reportCycle,\n              createdTs,\n              triggerTimes,\n            } = element;\n            triggerTimes.forEach((element) => {\n              if (startTimeMap.has(getEventKey(element))) {\n                const newList = [\n                  {\n                    name: name,\n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,\n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                const existingList = startTimeMap.get(getEventKey(element));\n                startTimeMap.set(\n                  getEventKey(element),\n                  existingList.concat(newList)\n                );\n              } else {\n                const list = [\n                  {\n                    name: name,            \n                    timeZone: timeZone,\n                    cron: cron,\n                    cronInfo: cronInfo,                  \n                    exchange: exchange,\n                    reportCycle: reportCycle,\n                    createdTs: createdTs,\n                  },\n                ];\n                startTimeMap.set(getEventKey(element), list);\n              }\n            });\n          });\n          startTimeMap.forEach((value, key) => {\n            if (!isNaN(new Date(key).getTime())) {\n              newEvents.push({\n                title: \"Event \" + newEvents.length,\n                start: key,\n                end: getEndTime(key),\n              });\n            }\n          });\n          setBaseEvents(newEvents);\n          setEvents(newEvents);\n          setTimeMap(startTimeMap);\n          setFirstRender(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const populateMovementDetails = () => {\n    return new Promise((resolve) => {\n      api\n        .getMovementRecords()\n        .then((res) => {\n          var movementEvents = [];\n          var alteredMovements = [];\n          res.data.message.forEach((element) => {\n            movementEvents.push({\n              title: \"Movement \" + movementEvents.length,\n              start: getEventKey(element.createdTs),\n              end: getEndTime(getEventKey(element.createdTs)),\n              color: \"red\",\n            });\n            alteredMovements.push({\n              ...element,\n              title: \"Movement \" + alteredMovements.length,\n            });\n          });\n          if (baseEvents.length > 0) {\n            setEvents(baseEvents.concat(movementEvents));\n            setMovements(alteredMovements);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <POPup elementsMap={displayMap} stateValue={stateValue}></POPup>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridWeek\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          headerToolbar={{\n            left: \"prev,next\",\n            center: \"title\",\n            right: \"today\",\n          }}\n          buttonText={{ today: \"Current Week\" }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:10:00\"\n          events={events}\n          slotLabelInterval=\"00:30:00\"\n          nowIndicator={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}