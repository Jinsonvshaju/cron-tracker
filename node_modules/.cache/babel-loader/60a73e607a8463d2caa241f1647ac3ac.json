{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon } from \"../icon/icon\"; // eslint-disable-next-line @typescript-eslint/ban-types\n\nvar TreeNode =\n/** @class */\nfunction (_super) {\n  __extends(TreeNode, _super);\n\n  function TreeNode() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleCaretClick = function (e) {\n      var _a;\n\n      e.stopPropagation();\n      var _b = _this.props,\n          isExpanded = _b.isExpanded,\n          onCollapse = _b.onCollapse,\n          onExpand = _b.onExpand;\n      (_a = isExpanded ? onCollapse : onExpand) === null || _a === void 0 ? void 0 : _a(_this, e);\n    };\n\n    _this.handleClick = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, _this, e);\n    };\n\n    _this.handleContentRef = function (element) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).contentRef) === null || _b === void 0 ? void 0 : _b.call(_a, _this, element);\n    };\n\n    _this.handleContextMenu = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onContextMenu) === null || _b === void 0 ? void 0 : _b.call(_a, _this, e);\n    };\n\n    _this.handleDoubleClick = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onDoubleClick) === null || _b === void 0 ? void 0 : _b.call(_a, _this, e);\n    };\n\n    _this.handleMouseEnter = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a, _this, e);\n    };\n\n    _this.handleMouseLeave = function (e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a, _this, e);\n    };\n\n    return _this;\n  }\n\n  TreeNode.ofType = function () {\n    return TreeNode;\n  };\n\n  TreeNode.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        children = _b.children,\n        className = _b.className,\n        disabled = _b.disabled,\n        icon = _b.icon,\n        isExpanded = _b.isExpanded,\n        isSelected = _b.isSelected,\n        label = _b.label;\n    var classes = classNames(Classes.TREE_NODE, (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.TREE_NODE_SELECTED] = isSelected, _a[Classes.TREE_NODE_EXPANDED] = isExpanded, _a), className);\n    var contentClasses = classNames(Classes.TREE_NODE_CONTENT, \"\".concat(Classes.TREE_NODE_CONTENT, \"-\").concat(this.props.depth));\n    var eventHandlers = disabled === true ? {} : {\n      onClick: this.handleClick,\n      onContextMenu: this.handleContextMenu,\n      onDoubleClick: this.handleDoubleClick,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    };\n    return React.createElement(\"li\", {\n      className: classes\n    }, React.createElement(\"div\", __assign({\n      className: contentClasses,\n      ref: this.handleContentRef\n    }, eventHandlers), this.maybeRenderCaret(), React.createElement(Icon, {\n      className: Classes.TREE_NODE_ICON,\n      icon: icon,\n      \"aria-hidden\": true,\n      tabIndex: -1\n    }), React.createElement(\"span\", {\n      className: Classes.TREE_NODE_LABEL\n    }, label), this.maybeRenderSecondaryLabel()), React.createElement(Collapse, {\n      isOpen: isExpanded\n    }, children));\n  };\n\n  TreeNode.prototype.maybeRenderCaret = function () {\n    var _a = this.props,\n        children = _a.children,\n        isExpanded = _a.isExpanded,\n        disabled = _a.disabled,\n        _b = _a.hasCaret,\n        hasCaret = _b === void 0 ? React.Children.count(children) > 0 : _b;\n\n    if (hasCaret) {\n      var caretClasses = classNames(Classes.TREE_NODE_CARET, isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED);\n      var onClick = disabled === true ? undefined : this.handleCaretClick;\n      return React.createElement(Icon, {\n        title: isExpanded ? \"Collapse group\" : \"Expand group\",\n        className: caretClasses,\n        onClick: onClick,\n        icon: \"chevron-right\"\n      });\n    }\n\n    return React.createElement(\"span\", {\n      className: Classes.TREE_NODE_CARET_NONE\n    });\n  };\n\n  TreeNode.prototype.maybeRenderSecondaryLabel = function () {\n    if (this.props.secondaryLabel != null) {\n      return React.createElement(\"span\", {\n        className: Classes.TREE_NODE_SECONDARY_LABEL\n      }, this.props.secondaryLabel);\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeNode.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TreeNode\");\n  return TreeNode;\n}(React.Component);\n\nexport { TreeNode };","map":{"version":3,"mappings":"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","names":["classNames","React","Classes","DISPLAYNAME_PREFIX","Collapse","Icon","__extends","_this","e","stopPropagation","props","isExpanded","onCollapse","onExpand","_a","onClick","_b","element","contentRef","onContextMenu","onDoubleClick","onMouseEnter","onMouseLeave","TreeNode","children","className","disabled","icon","isSelected","label","classes","TREE_NODE","DISABLED","TREE_NODE_SELECTED","TREE_NODE_EXPANDED","contentClasses","TREE_NODE_CONTENT","concat","depth","eventHandlers","handleClick","handleContextMenu","handleDoubleClick","handleMouseEnter","handleMouseLeave","ref","handleContentRef","maybeRenderCaret","TREE_NODE_ICON","tabIndex","TREE_NODE_LABEL","maybeRenderSecondaryLabel","isOpen","hasCaret","Children","count","caretClasses","TREE_NODE_CARET","TREE_NODE_CARET_OPEN","TREE_NODE_CARET_CLOSED","undefined","handleCaretClick","title","TREE_NODE_CARET_NONE","secondaryLabel","TREE_NODE_SECONDARY_LABEL","Component"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/tree/treeNode.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, Props, MaybeElement } from \"../../common/props\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon, IconName } from \"../icon/icon\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types, deprecation/deprecation\nexport type TreeNodeInfo<T = {}> = ITreeNode<T>;\n/** @deprecated use TreeNodeInfo */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeNode<T = {}> extends Props {\n    /**\n     * Child tree nodes of this node.\n     */\n    childNodes?: Array<TreeNodeInfo<T>>;\n\n    /**\n     * Whether this tree node is non-interactive. Enabling this prop will ignore\n     * mouse event handlers (in particular click, down, enter, leave).\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the caret to expand/collapse a node should be shown.\n     * If not specified, this will be true if the node has children and false otherwise.\n     */\n    hasCaret?: boolean;\n\n    /**\n     * The name of a Blueprint icon (or an icon element) to render next to the node's label.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * A unique identifier for the node.\n     */\n    id: string | number;\n\n    /**\n     */\n    isExpanded?: boolean;\n\n    /**\n     * Whether this node is selected.\n     *\n     * @default false\n     */\n    isSelected?: boolean;\n\n    /**\n     * The main label for the node.\n     */\n    label: string | JSX.Element;\n\n    /**\n     * A secondary label/component that is displayed at the right side of the node.\n     */\n    secondaryLabel?: string | MaybeElement;\n\n    /**\n     * An optional custom user object to associate with the node.\n     * This property can then be used in the `onClick`, `onContextMenu` and `onDoubleClick`\n     * event handlers for doing custom logic per node.\n     */\n    nodeData?: T;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TreeNodeProps<T = {}> = ITreeNodeProps<T>;\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeNodeProps<T = {}> extends TreeNodeInfo<T> {\n    children?: React.ReactNode;\n    contentRef?: (node: TreeNode<T>, element: HTMLDivElement | null) => void;\n    depth: number;\n    key?: string | number;\n    onClick?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onCollapse?: (node: TreeNode<T>, e: React.MouseEvent<HTMLSpanElement>) => void;\n    onContextMenu?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onDoubleClick?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onExpand?: (node: TreeNode<T>, e: React.MouseEvent<HTMLSpanElement>) => void;\n    onMouseEnter?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onMouseLeave?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    path: number[];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class TreeNode<T = {}> extends React.Component<ITreeNodeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TreeNode`;\n\n    public static ofType<U>() {\n        return TreeNode as new (props: ITreeNodeProps<U>) => TreeNode<U>;\n    }\n\n    public render() {\n        const { children, className, disabled, icon, isExpanded, isSelected, label } = this.props;\n        const classes = classNames(\n            Classes.TREE_NODE,\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.TREE_NODE_SELECTED]: isSelected,\n                [Classes.TREE_NODE_EXPANDED]: isExpanded,\n            },\n            className,\n        );\n\n        const contentClasses = classNames(\n            Classes.TREE_NODE_CONTENT,\n            `${Classes.TREE_NODE_CONTENT}-${this.props.depth}`,\n        );\n\n        const eventHandlers =\n            disabled === true\n                ? {}\n                : {\n                      onClick: this.handleClick,\n                      onContextMenu: this.handleContextMenu,\n                      onDoubleClick: this.handleDoubleClick,\n                      onMouseEnter: this.handleMouseEnter,\n                      onMouseLeave: this.handleMouseLeave,\n                  };\n\n        return (\n            <li className={classes}>\n                <div className={contentClasses} ref={this.handleContentRef} {...eventHandlers}>\n                    {this.maybeRenderCaret()}\n                    <Icon className={Classes.TREE_NODE_ICON} icon={icon} aria-hidden={true} tabIndex={-1} />\n                    <span className={Classes.TREE_NODE_LABEL}>{label}</span>\n                    {this.maybeRenderSecondaryLabel()}\n                </div>\n                <Collapse isOpen={isExpanded}>{children}</Collapse>\n            </li>\n        );\n    }\n\n    private maybeRenderCaret() {\n        const { children, isExpanded, disabled, hasCaret = React.Children.count(children) > 0 } = this.props;\n        if (hasCaret) {\n            const caretClasses = classNames(\n                Classes.TREE_NODE_CARET,\n                isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED,\n            );\n            const onClick = disabled === true ? undefined : this.handleCaretClick;\n            return (\n                <Icon\n                    title={isExpanded ? \"Collapse group\" : \"Expand group\"}\n                    className={caretClasses}\n                    onClick={onClick}\n                    icon={\"chevron-right\"}\n                />\n            );\n        }\n        return <span className={Classes.TREE_NODE_CARET_NONE} />;\n    }\n\n    private maybeRenderSecondaryLabel() {\n        if (this.props.secondaryLabel != null) {\n            return <span className={Classes.TREE_NODE_SECONDARY_LABEL}>{this.props.secondaryLabel}</span>;\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleCaretClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.stopPropagation();\n        const { isExpanded, onCollapse, onExpand } = this.props;\n        (isExpanded ? onCollapse : onExpand)?.(this, e);\n    };\n\n    private handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onClick?.(this, e);\n    };\n\n    private handleContentRef = (element: HTMLDivElement | null) => {\n        this.props.contentRef?.(this, element);\n    };\n\n    private handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onContextMenu?.(this, e);\n    };\n\n    private handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onDoubleClick?.(this, e);\n    };\n\n    private handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseEnter?.(this, e);\n    };\n\n    private handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseLeave?.(this, e);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}