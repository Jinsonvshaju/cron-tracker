{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/** @deprecated use `PanelStack2<T>` */\n\nvar PanelStack =\n/** @class */\nfunction (_super) {\n  __extends(PanelStack, _super);\n\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : _this.props.initialPanel !== undefined ? [_this.props.initialPanel] : []\n    };\n\n    _this.renderPanel = function (panel, index) {\n      var _a = _this.props,\n          renderActivePanelOnly = _a.renderActivePanelOnly,\n          _b = _a.showPanelHeader,\n          showPanelHeader = _b === void 0 ? true : _b;\n      var stack = _this.state.stack; // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n      // therefore they would not trigger the \"enter\" transition event as they were entered.\n      // To force the enter event, we want to change the key, but stack.length is not enough\n      // and a single panel should not rerender as long as it's hidden.\n      // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n      // second one, active changes only when the panel becomes or stops being active.\n\n      var layer = stack.length - index;\n      var key = renderActivePanelOnly ? stack.length : layer;\n      return React.createElement(CSSTransition, {\n        classNames: Classes.PANEL_STACK,\n        key: key,\n        timeout: 400\n      }, React.createElement(PanelView, {\n        onClose: _this.handlePanelClose,\n        onOpen: _this.handlePanelOpen,\n        panel: panel,\n        previousPanel: stack[index + 1],\n        showHeader: showPanelHeader\n      }));\n    };\n\n    _this.handlePanelClose = function (panel) {\n      var _a, _b;\n\n      var stack = _this.state.stack; // only remove this panel if it is at the top and not the only one.\n\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n\n      (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.slice(1)\n          };\n        });\n      }\n    };\n\n    _this.handlePanelOpen = function (panel) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: __spreadArray([panel], state.stack, true)\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState); // Always update local stack if stack prop changes\n\n\n    if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n      this.setState({\n        stack: this.props.stack.slice().reverse()\n      });\n    } // Only update animation direction if stack length changes\n\n\n    var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n    var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n\n    if (stackLength !== prevStackLength && prevProps.stack != null) {\n      this.setState({\n        direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\"\n      });\n    }\n  };\n\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, \"\".concat(Classes.PANEL_STACK, \"-\").concat(this.state.direction), this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderPanels());\n  };\n\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n\n    if (props.stack != null && props.stack.length === 0) {\n      console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n\n  PanelStack.prototype.renderPanels = function () {\n    var _a = this.props.renderActivePanelOnly,\n        renderActivePanelOnly = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n\n    if (stack.length === 0) {\n      return null;\n    }\n\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panelViews = panelsToRender.map(this.renderPanel).reverse();\n    return panelViews;\n  };\n\n  return PanelStack;\n}(AbstractPureComponent2);\n\nexport { PanelStack };","map":{"version":3,"mappings":"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","names":["classNames","React","CSSTransition","TransitionGroup","AbstractPureComponent2","Classes","Errors","PanelView","__extends","_this","direction","stack","props","slice","reverse","initialPanel","undefined","panel","index","renderActivePanelOnly","_b","showPanelHeader","state","layer","length","key","PANEL_STACK","timeout","onClose","handlePanelClose","onOpen","handlePanelOpen","previousPanel","showHeader","setState","PanelStack","prevProps","prevState","_super","componentDidUpdate","call","stackLength","prevStackLength","classes","concat","className","component","renderPanels","console","error","PANEL_STACK_INITIAL_PANEL_STACK_MUTEX","PANEL_STACK_REQUIRES_PANEL","_a","panelsToRender","panelViews","map","renderPanel"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/panel-stack/panelStack.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { IProps } from \"../../common/props\";\nimport { IPanel } from \"./panelProps\";\nimport { PanelView } from \"./panelView\";\n\n/* eslint-disable deprecation/deprecation */\n\nexport interface IPanelStackProps extends IProps {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: IPanel<any>;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose?: (removedPanel: IPanel) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen?: (addedPanel: IPanel) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: Array<IPanel<any>>;\n}\n\nexport interface IPanelStackState {\n    /** Whether the stack is currently animating the push or pop of a panel. */\n    direction: \"push\" | \"pop\";\n\n    /** The current stack of panels. The first panel in the stack will be displayed. */\n    stack: IPanel[];\n}\n\n/** @deprecated use `PanelStack2<T>` */\n\nexport class PanelStack extends AbstractPureComponent2<IPanelStackProps, IPanelStackState> {\n    public state: IPanelStackState = {\n        direction: \"push\",\n        stack:\n            this.props.stack != null\n                ? this.props.stack.slice().reverse()\n                : this.props.initialPanel !== undefined\n                ? [this.props.initialPanel]\n                : [],\n    };\n\n    public componentDidUpdate(prevProps: IPanelStackProps, prevState: IPanelStackState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        // Always update local stack if stack prop changes\n        if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n            this.setState({ stack: this.props.stack!.slice().reverse() });\n        }\n\n        // Only update animation direction if stack length changes\n        const stackLength = this.props.stack != null ? this.props.stack.length : 0;\n        const prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n        if (stackLength !== prevStackLength && prevProps.stack != null) {\n            this.setState({\n                direction: prevProps.stack.length - this.props.stack!.length < 0 ? \"push\" : \"pop\",\n            });\n        }\n    }\n\n    public render() {\n        const classes = classNames(\n            Classes.PANEL_STACK,\n            `${Classes.PANEL_STACK}-${this.state.direction}`,\n            this.props.className,\n        );\n        return (\n            <TransitionGroup className={classes} component=\"div\">\n                {this.renderPanels()}\n            </TransitionGroup>\n        );\n    }\n\n    protected validateProps(props: IPanelStackProps) {\n        if (\n            (props.initialPanel == null && props.stack == null) ||\n            (props.initialPanel != null && props.stack != null)\n        ) {\n            console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n        }\n        if (props.stack != null && props.stack.length === 0) {\n            console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n        }\n    }\n\n    private renderPanels() {\n        const { renderActivePanelOnly = true } = this.props;\n        const { stack } = this.state;\n        if (stack.length === 0) {\n            return null;\n        }\n        const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n        const panelViews = panelsToRender.map(this.renderPanel).reverse();\n        return panelViews;\n    }\n\n    private renderPanel = (panel: IPanel, index: number) => {\n        const { renderActivePanelOnly, showPanelHeader = true } = this.props;\n        const { stack } = this.state;\n\n        // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n        // therefore they would not trigger the \"enter\" transition event as they were entered.\n        // To force the enter event, we want to change the key, but stack.length is not enough\n        // and a single panel should not rerender as long as it's hidden.\n        // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n        // second one, active changes only when the panel becomes or stops being active.\n        const layer = stack.length - index;\n        const key = renderActivePanelOnly ? stack.length : layer;\n\n        return (\n            <CSSTransition classNames={Classes.PANEL_STACK} key={key} timeout={400}>\n                <PanelView\n                    onClose={this.handlePanelClose}\n                    onOpen={this.handlePanelOpen}\n                    panel={panel}\n                    previousPanel={stack[index + 1]}\n                    showHeader={showPanelHeader}\n                />\n            </CSSTransition>\n        );\n    };\n\n    private handlePanelClose = (panel: IPanel) => {\n        const { stack } = this.state;\n        // only remove this panel if it is at the top and not the only one.\n        if (stack[0] !== panel || stack.length <= 1) {\n            return;\n        }\n        this.props.onClose?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"pop\",\n                stack: state.stack.slice(1),\n            }));\n        }\n    };\n\n    private handlePanelOpen = (panel: IPanel) => {\n        this.props.onOpen?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"push\",\n                stack: [panel, ...state.stack],\n            }));\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}