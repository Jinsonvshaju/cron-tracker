{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport var PanelStack2 = function (props) {\n  var _a = props.renderActivePanelOnly,\n      renderActivePanelOnly = _a === void 0 ? true : _a,\n      _b = props.showPanelHeader,\n      showPanelHeader = _b === void 0 ? true : _b,\n      propsStack = props.stack;\n\n  var _c = React.useState(\"push\"),\n      direction = _c[0],\n      setDirection = _c[1];\n\n  var _d = React.useState(props.initialPanel !== undefined ? [props.initialPanel] : []),\n      localStack = _d[0],\n      setLocalStack = _d[1];\n\n  var stack = React.useMemo(function () {\n    return propsStack != null ? propsStack.slice().reverse() : localStack;\n  }, [localStack, propsStack]);\n  var stackLength = React.useRef(stack.length);\n  React.useEffect(function () {\n    if (stack.length !== stackLength.current) {\n      // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n      setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n    }\n\n    stackLength.current = stack.length;\n  }, [stack]);\n  var handlePanelOpen = React.useCallback(function (panel) {\n    var _a;\n\n    (_a = props.onOpen) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return __spreadArray([panel], prevStack, true);\n      });\n    }\n  }, [props.onOpen]);\n  var handlePanelClose = React.useCallback(function (panel) {\n    var _a; // only remove this panel if it is at the top and not the only one.\n\n\n    if (stack[0] !== panel || stack.length <= 1) {\n      return;\n    }\n\n    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return prevStack.slice(1);\n      });\n    }\n  }, [stack, props.onClose]); // early return, after all hooks are called\n\n  if (stack.length === 0) {\n    return null;\n  }\n\n  var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n  var panels = panelsToRender.map(function (panel, index) {\n    // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n    // therefore they would not trigger the \"enter\" transition event as they were entered.\n    // To force the enter event, we want to change the key, but stack.length is not enough\n    // and a single panel should not rerender as long as it's hidden.\n    // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n    // second one, active changes only when the panel becomes or stops being active.\n    var layer = stack.length - index;\n    var key = renderActivePanelOnly ? stack.length : layer;\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK2,\n      key: key,\n      timeout: 400\n    }, React.createElement(PanelView2, {\n      onClose: handlePanelClose,\n      onOpen: handlePanelOpen,\n      panel: panel,\n      previousPanel: stack[index + 1],\n      showHeader: showPanelHeader\n    }));\n  }).reverse();\n  var classes = classNames(Classes.PANEL_STACK2, \"\".concat(Classes.PANEL_STACK2, \"-\").concat(direction), props.className);\n  return React.createElement(TransitionGroup, {\n    className: classes,\n    component: \"div\"\n  }, panels);\n};\nPanelStack2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelStack2\");","map":{"version":3,"mappings":"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","names":["classNames","React","CSSTransition","TransitionGroup","Classes","DISPLAYNAME_PREFIX","PanelView2","PanelStack2","props","_a","_b","showPanelHeader","propsStack","useState","direction","setDirection","initialPanel","undefined","localStack","setLocalStack","stack","useMemo","slice","reverse","stackLength","useRef","length","useEffect","current","handlePanelOpen","useCallback","panel","onOpen","prevStack","handlePanelClose","onClose","panelsToRender","renderActivePanelOnly","panels","map","index","layer","key","PANEL_STACK2","timeout","previousPanel","showHeader","classes","concat","className","component","displayName"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/panel-stack2/panelStack2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { Classes, DISPLAYNAME_PREFIX, Props } from \"../../common\";\nimport { Panel } from \"./panelTypes\";\nimport { PanelView2 } from \"./panelView2\";\n\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelStack2Props<T extends Panel<object>> extends Props {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: T;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel\n     * closes itself with a `closePanel()` action.\n     */\n    onClose?: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel opens a new panel with an `openPanel(panel)`\n     * action.\n     */\n    onOpen?: (addedPanel: T) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: readonly T[];\n}\n\ninterface PanelStack2Component {\n    /**\n     * @template T type union of all possible panels in this stack\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelStack2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelStack2: PanelStack2Component = <T extends Panel<object>>(props: PanelStack2Props<T>) => {\n    const { renderActivePanelOnly = true, showPanelHeader = true, stack: propsStack } = props;\n    const [direction, setDirection] = React.useState(\"push\");\n\n    const [localStack, setLocalStack] = React.useState<T[]>(\n        props.initialPanel !== undefined ? [props.initialPanel] : [],\n    );\n    const stack = React.useMemo(() => (propsStack != null ? propsStack.slice().reverse() : localStack), [\n        localStack,\n        propsStack,\n    ]);\n    const stackLength = React.useRef<number>(stack.length);\n    React.useEffect(() => {\n        if (stack.length !== stackLength.current) {\n            // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n            setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n        }\n        stackLength.current = stack.length;\n    }, [stack]);\n\n    const handlePanelOpen = React.useCallback(\n        (panel: T) => {\n            props.onOpen?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => [panel, ...prevStack]);\n            }\n        },\n        [props.onOpen],\n    );\n    const handlePanelClose = React.useCallback(\n        (panel: T) => {\n            // only remove this panel if it is at the top and not the only one.\n            if (stack[0] !== panel || stack.length <= 1) {\n                return;\n            }\n            props.onClose?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => prevStack.slice(1));\n            }\n        },\n        [stack, props.onClose],\n    );\n\n    // early return, after all hooks are called\n    if (stack.length === 0) {\n        return null;\n    }\n\n    const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    const panels = panelsToRender\n        .map((panel: T, index: number) => {\n            // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n            // therefore they would not trigger the \"enter\" transition event as they were entered.\n            // To force the enter event, we want to change the key, but stack.length is not enough\n            // and a single panel should not rerender as long as it's hidden.\n            // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n            // second one, active changes only when the panel becomes or stops being active.\n            const layer = stack.length - index;\n            const key = renderActivePanelOnly ? stack.length : layer;\n\n            return (\n                <CSSTransition classNames={Classes.PANEL_STACK2} key={key} timeout={400}>\n                    <PanelView2<T>\n                        onClose={handlePanelClose}\n                        onOpen={handlePanelOpen}\n                        panel={panel}\n                        previousPanel={stack[index + 1]}\n                        showHeader={showPanelHeader}\n                    />\n                </CSSTransition>\n            );\n        })\n        .reverse();\n\n    const classes = classNames(Classes.PANEL_STACK2, `${Classes.PANEL_STACK2}-${direction}`, props.className);\n\n    return (\n        <TransitionGroup className={classes} component=\"div\">\n            {panels}\n        </TransitionGroup>\n    );\n};\nPanelStack2.displayName = `${DISPLAYNAME_PREFIX}.PanelStack2`;\n"]},"metadata":{},"sourceType":"module"}