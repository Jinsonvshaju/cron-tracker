{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  var cronDetails = [];\n  var startTimeMap = new Map();\n  const [events, setEvents] = useState([]);\n\n  const getStartTime = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const convertToString = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    setEvents([]);\n  };\n\n  const populateStartTimeMap = element => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes\n    } = element;\n    triggerTimes.forEach(element => {\n      if (startTimeMap.has(convertToString(element))) {\n        const newList = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        const existingList = startTimeMap.get(convertToString(element));\n        startTimeMap.set(convertToString(element), existingList.concat(newList));\n      } else {\n        const list = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        startTimeMap.set(convertToString(element), list);\n      }\n    });\n  };\n\n  const constructEvents = cronDetails => {\n    cronDetails.forEach(element => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      // Prints \"greeting Hello\" followed by \"name John\"\n      console.log(value, key);\n    });\n  };\n\n  const handleReloadClick = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        cronDetails = res.data.message;\n        constructEvents(cronDetails);\n        console.log(startTimeMap);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridDay\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        customButtons: {\n          reload: {\n            text: \"Reload\",\n            click: function () {\n              handleReloadClick();\n            }\n          }\n        },\n        headerToolbar: {\n          left: \"reload,prev,next\",\n          right: \"today,timeGridDay,timeGridWeek\"\n        },\n        eventClick: function (arg) {\n          alert(arg.event.title);\n          alert(arg.event.start);\n        },\n        slotDuration: \"00:05:00\" //events={events}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"+9MZXz9f7bEJKfdNKx6PUB85P1Y=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","API","moment","api","Home","props","cronDetails","startTimeMap","Map","events","setEvents","getStartTime","time","local","format","convertToString","getEndTime","dateTime","Date","setSeconds","getSeconds","clearEvents","populateStartTimeMap","element","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","forEach","has","newList","existingList","get","set","concat","list","constructEvents","value","key","console","log","handleReloadClick","Promise","resolve","getTriggerTimes","then","res","data","message","catch","err","reload","text","click","left","right","arg","alert","event","title","start"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\n\nlet api = new API();\n\nfunction Home(props) {\n  var cronDetails = [];\n  var startTimeMap = new Map();\n  const [events,setEvents]=useState([]);\n\n  const getStartTime = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const convertToString = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents =()=>{\n    setEvents([]);\n  }\n\n  const populateStartTimeMap = (element) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes,\n    } = element;\n    triggerTimes.forEach((element) => {\n      if (startTimeMap.has(convertToString(element))) {\n        const newList = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        const existingList = startTimeMap.get(convertToString(element));\n        startTimeMap.set(\n          convertToString(element),\n          existingList.concat(newList)\n        );\n      } else {\n        const list = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        startTimeMap.set(convertToString(element), list);\n      }\n    });\n  };\n\n  const constructEvents=(cronDetails)=>{\n    cronDetails.forEach((element) => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      // Prints \"greeting Hello\" followed by \"name John\"\n      console.log(value, key);\n    });\n  }\n\n  const handleReloadClick = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          cronDetails = res.data.message;\n          constructEvents(cronDetails);\n          console.log(startTimeMap);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridDay\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          customButtons={{\n            reload: {\n              text: \"Reload\",\n              click: function () {\n                handleReloadClick();\n              },\n            },\n          }}\n          headerToolbar={{\n            left: \"reload,prev,next\",\n            right: \"today,timeGridDay,timeGridWeek\",\n          }}\n          eventClick={function (arg) {\n            alert(arg.event.title);\n            alert(arg.event.start);\n          }}\n          slotDuration=\"00:05:00\"\n          //events={events}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}