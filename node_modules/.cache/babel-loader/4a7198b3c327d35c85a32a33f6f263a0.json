{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {\n    popup,\n    setPopup\n  };\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    handleReload();\n    console.log(\"Home page Reloaded\"); //eslint-disable-next-line\n  }, []);\n\n  const handleEventClick = _ref => {\n    let {\n      event\n    } = _ref;\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach(element => {\n      const message = element.name + \" \" + element.clientName + \" (\" + element.env + \") \" + element.exchange + \" \" + element.cron + \" (\" + element.cronInfo + \" \" + element.timeZone + \") \";\n      messages.push(message);\n    });\n    setDisplayMap({\n      key: key,\n      values: messages\n    });\n    setPopup(true);\n  };\n\n  const handleReload = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        var startTimeMap = new Map();\n        var newEvents = [];\n        res.data.message.forEach(element => {\n          var {\n            triggerTimes\n          } = element;\n          triggerTimes.forEach(element => {\n            if (startTimeMap.has(getEventKey(element))) {\n              const newList = [{\n                element\n              }];\n              const existingList = startTimeMap.get(getEventKey(element));\n              startTimeMap.set(getEventKey(element), existingList.concat(newList));\n            } else {\n              const list = [{\n                element\n              }];\n              startTimeMap.set(getEventKey(element), list);\n            }\n          });\n        });\n        startTimeMap.forEach((value, key) => {\n          if (!isNaN(new Date(key).getTime())) {\n            newEvents.push({\n              title: \"Event \" + newEvents.length,\n              start: key,\n              end: getEndTime(key)\n            });\n          }\n        });\n        setEvents(newEvents);\n        setTimeMap(startTimeMap);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(POPup, {\n        elementsMap: displayMap,\n        stateValue: stateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridWeek\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        headerToolbar: {\n          left: \"prev,next\",\n          center: \"title\",\n          right: \"today\"\n        },\n        buttonText: {\n          today: \"Current Week\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:10:00\",\n        events: events,\n        slotLabelInterval: \"00:30:00\",\n        nowIndicator: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"6IonWiyGnohCg43ur8w7LR5oHKY=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","useEffect","API","moment","POPup","api","Home","props","timeMap","setTimeMap","Map","events","setEvents","displayMap","setDisplayMap","popup","setPopup","stateValue","getEventKey","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","handleReload","console","log","handleEventClick","event","key","start","messages","Object","values","get","forEach","element","message","name","clientName","env","exchange","cron","cronInfo","timeZone","push","Promise","resolve","getTriggerTimes","then","res","startTimeMap","newEvents","data","triggerTimes","has","newList","existingList","set","concat","list","value","isNaN","getTime","title","length","end","catch","err","left","center","right","today"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\n\nlet api = new API();\n\nfunction Home(props) {\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = { popup, setPopup };\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  useEffect(() => {\n    handleReload();\n    console.log(\"Home page Reloaded\");\n    //eslint-disable-next-line\n  }, []);\n\n  const handleEventClick = ({ event }) => {\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach((element) => {\n      const message =\n        element.name +\n        \" \" +\n        element.clientName +\n        \" (\" +\n        element.env +\n        \") \" +\n        element.exchange +\n        \" \" +\n        element.cron +\n        \" (\" +\n        element.cronInfo +\n        \" \" +\n        element.timeZone +\n        \") \";\n      messages.push(message);\n    });\n    setDisplayMap({ key: key, values: messages });\n    setPopup(true);\n  };\n\n  const handleReload = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          var startTimeMap = new Map();\n          var newEvents = [];\n          res.data.message.forEach((element) => {\n            var { triggerTimes } = element;\n            triggerTimes.forEach((element) => {\n              if (startTimeMap.has(getEventKey(element))) {\n                const newList = [{ element }];\n                const existingList = startTimeMap.get(getEventKey(element));\n                startTimeMap.set(\n                  getEventKey(element),\n                  existingList.concat(newList)\n                );\n              } else {\n                const list = [{ element }];\n                startTimeMap.set(getEventKey(element), list);\n              }\n            });\n          });\n          startTimeMap.forEach((value, key) => {\n            if (!isNaN(new Date(key).getTime())) {\n              newEvents.push({\n                title: \"Event \" + newEvents.length,\n                start: key,\n                end: getEndTime(key),\n              });\n            }\n          });\n\n          setEvents(newEvents);\n          setTimeMap(startTimeMap);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <POPup elementsMap={displayMap} stateValue={stateValue}></POPup>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridWeek\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          headerToolbar={{\n            left: \"prev,next\",\n            center: \"title\",\n            right: \"today\",\n          }}\n          buttonText={{ today: \"Current Week\" }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:10:00\"\n          events={events}\n          slotLabelInterval=\"00:30:00\"\n          nowIndicator={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}