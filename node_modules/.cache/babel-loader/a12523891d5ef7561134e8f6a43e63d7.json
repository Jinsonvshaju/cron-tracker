{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISABLED, FILL, HTML_SELECT, LARGE, MINIMAL } from \"../../common/classes\";\nimport { Icon } from \"../icon/icon\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar HTMLSelect =\n/** @class */\nfunction (_super) {\n  __extends(HTMLSelect, _super);\n\n  function HTMLSelect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  HTMLSelect.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        disabled = _b.disabled,\n        elementRef = _b.elementRef,\n        fill = _b.fill,\n        iconProps = _b.iconProps,\n        large = _b.large,\n        minimal = _b.minimal,\n        _c = _b.options,\n        options = _c === void 0 ? [] : _c,\n        htmlProps = __rest(_b, [\"className\", \"disabled\", \"elementRef\", \"fill\", \"iconProps\", \"large\", \"minimal\", \"options\"]);\n\n    var classes = classNames(HTML_SELECT, (_a = {}, _a[DISABLED] = disabled, _a[FILL] = fill, _a[LARGE] = large, _a[MINIMAL] = minimal, _a), className);\n    var optionChildren = options.map(function (option) {\n      var props = typeof option === \"object\" ? option : {\n        value: option\n      };\n      return React.createElement(\"option\", __assign({}, props, {\n        key: props.value,\n        children: props.label || props.value\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"select\", __assign({\n      disabled: disabled,\n      ref: elementRef\n    }, htmlProps, {\n      multiple: false\n    }), optionChildren, htmlProps.children), React.createElement(Icon, __assign({\n      icon: \"double-caret-vertical\",\n      title: \"Open dropdown\"\n    }, iconProps)));\n  };\n\n  return HTMLSelect;\n}(AbstractPureComponent2);\n\nexport { HTMLSelect };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,WAAzB,EAAsCC,KAAtC,EAA6CC,OAA7C,QAA4D,sBAA5D;AAEA,SAASC,IAAT,QAAgC,cAAhC,C,CA2CA;;AACA;;AACA;AAAA;AAAA;AAAgCC;;AAAhC;;AAuCC;;AAtCUC,gCAAP;;;AACI,QAAMC,KAUF,KAAKC,KAVT;AAAA,QACIC,SAAS,eADb;AAAA,QAEIC,QAAQ,cAFZ;AAAA,QAGIC,UAAU,gBAHd;AAAA,QAIIC,IAAI,UAJR;AAAA,QAKIC,SAAS,eALb;AAAA,QAMIC,KAAK,WANT;AAAA,QAOIC,OAAO,aAPX;AAAA,QAQIC,eARJ;AAAA,QAQIC,OAAO,mBAAG,EAAH,GAAKD,EARhB;AAAA,QASOE,SAAS,cATV,2FASU,CAThB;;AAWA,QAAMC,OAAO,GAAGvB,UAAU,CACtBK,WADsB,GACXmB,SAEPA,GAACrB,QAAD,IAAYW,QAFL,EAGPU,GAACpB,IAAD,IAAQY,IAHD,EAIPQ,GAAClB,KAAD,IAASY,KAJF,EAKPM,GAACjB,OAAD,IAAWY,OALJ,IADW,GAQtBN,SARsB,CAA1B;AAWA,QAAMY,cAAc,GAAGJ,OAAO,CAACK,GAAR,CAAY,kBAAM;AACrC,UAAMd,KAAK,GAAgB,OAAOe,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC;AAAEC,aAAK,EAAED;AAAT,OAAjE;AACA,aAAO1B,2CAAYW,KAAZ,EAAiB;AAAEiB,WAAG,EAAEjB,KAAK,CAACgB,KAAb;AAAoBE,gBAAQ,EAAElB,KAAK,CAACmB,KAAN,IAAenB,KAAK,CAACgB;AAAnD,OAAjB,EAAP;AACH,KAHsB,CAAvB;AAKA,WACI3B;AAAKY,eAAS,EAAEU;AAAhB,OACItB;AAAQa,cAAQ,EAAEA,QAAlB;AAA4BkB,SAAG,EAAEjB;AAAjC,OAAiDO,SAAjD,EAA0D;AAAEW,cAAQ,EAAE;AAAZ,KAA1D,GACKR,cADL,EAEKH,SAAS,CAACQ,QAFf,CADJ,EAKI7B,oBAACO,IAAD,EAAK0B;AAACC,UAAI,EAAC,uBAAN;AAA8BC,WAAK,EAAC;AAApC,OAAwDnB,SAAxD,CAAL,CALJ,CADJ;AASH,GArCM;;AAsCX;AAvCA,EAAgCf,sBAAhC","names":["classNames","React","AbstractPureComponent2","DISABLED","FILL","HTML_SELECT","LARGE","MINIMAL","Icon","__extends","HTMLSelect","_b","props","className","disabled","elementRef","fill","iconProps","large","minimal","_c","options","htmlProps","classes","_a","optionChildren","map","option","value","key","children","label","ref","multiple","__assign","icon","title"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/html-select/htmlSelect.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISABLED, FILL, HTML_SELECT, LARGE, MINIMAL } from \"../../common/classes\";\nimport { IElementRefProps, OptionProps } from \"../../common/props\";\nimport { Icon, IconProps } from \"../icon/icon\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type HTMLSelectProps = IHTMLSelectProps;\n/** @deprecated use HTMLSelectPRops */\nexport interface IHTMLSelectProps\n    // eslint-disable-next-line deprecation/deprecation\n    extends IElementRefProps<HTMLSelectElement>,\n        React.SelectHTMLAttributes<HTMLSelectElement> {\n    children?: React.ReactNode;\n\n    /** Whether this element is non-interactive. */\n    disabled?: boolean;\n\n    /** Whether this element should fill its container. */\n    fill?: boolean;\n\n    /** Props to spread to the `<Icon>` element. */\n    iconProps?: Partial<IconProps>;\n\n    /** Whether to use large styles. */\n    large?: boolean;\n\n    /** Whether to use minimal styles. */\n    minimal?: boolean;\n\n    /** Multiple select is not supported. */\n    multiple?: never;\n\n    /** Change event handler. Use `event.currentTarget.value` to access the new value. */\n    onChange?: React.ChangeEventHandler<HTMLSelectElement>;\n\n    /**\n     * Shorthand for supplying options: an array of basic types or\n     * `{ label?, value }` objects. If no `label` is supplied, `value`\n     * will be used as the label.\n     */\n    options?: ReadonlyArray<string | number | OptionProps>;\n\n    /** Controlled value of this component. */\n    value?: string | number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nexport class HTMLSelect extends AbstractPureComponent2<HTMLSelectProps> {\n    public render() {\n        const {\n            className,\n            disabled,\n            elementRef,\n            fill,\n            iconProps,\n            large,\n            minimal,\n            options = [],\n            ...htmlProps\n        } = this.props;\n        const classes = classNames(\n            HTML_SELECT,\n            {\n                [DISABLED]: disabled,\n                [FILL]: fill,\n                [LARGE]: large,\n                [MINIMAL]: minimal,\n            },\n            className,\n        );\n\n        const optionChildren = options.map(option => {\n            const props: OptionProps = typeof option === \"object\" ? option : { value: option };\n            return <option {...props} key={props.value} children={props.label || props.value} />;\n        });\n\n        return (\n            <div className={classes}>\n                <select disabled={disabled} ref={elementRef} {...htmlProps} multiple={false}>\n                    {optionChildren}\n                    {htmlProps.children}\n                </select>\n                <Icon icon=\"double-caret-vertical\" title=\"Open dropdown\" {...iconProps} />\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}