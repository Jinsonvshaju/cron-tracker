{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { TOASTER_CREATE_NULL, TOASTER_MAX_TOASTS_INVALID, TOASTER_WARN_INLINE } from \"../../common/errors\";\nimport { ESCAPE } from \"../../common/keys\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isNodeEnv } from \"../../common/utils\";\nimport { Overlay } from \"../overlay/overlay\";\nimport { Toast } from \"./toast\";\n\nvar Toaster =\n/** @class */\nfunction (_super) {\n  __extends(Toaster, _super);\n\n  function Toaster() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      toasts: []\n    }; // auto-incrementing identifier for un-keyed toasts\n\n    _this.toastId = 0;\n\n    _this.renderToast = function (toast) {\n      return React.createElement(Toast, __assign({}, toast, {\n        onDismiss: _this.getDismissHandler(toast)\n      }));\n    };\n\n    _this.getDismissHandler = function (toast) {\n      return function (timeoutExpired) {\n        _this.dismiss(toast.key, timeoutExpired);\n      };\n    };\n\n    _this.handleClose = function (e) {\n      // NOTE that `e` isn't always a KeyboardEvent but that's the only type we care about\n      // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n      if (e.which === ESCAPE) {\n        _this.clear();\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * Create a new `Toaster` instance that can be shared around your application.\n   * The `Toaster` will be rendered into a new element appended to the given container.\n   */\n\n\n  Toaster.create = function (props, container) {\n    if (container === void 0) {\n      container = document.body;\n    }\n\n    if (props != null && props.usePortal != null && !isNodeEnv(\"production\")) {\n      console.warn(TOASTER_WARN_INLINE);\n    }\n\n    var containerElement = document.createElement(\"div\");\n    container.appendChild(containerElement);\n    var toaster = ReactDOM.render(React.createElement(Toaster, __assign({}, props, {\n      usePortal: false\n    })), containerElement);\n\n    if (toaster == null) {\n      throw new Error(TOASTER_CREATE_NULL);\n    }\n\n    return toaster;\n  };\n\n  Toaster.prototype.show = function (props, key) {\n    if (this.props.maxToasts) {\n      // check if active number of toasts are at the maxToasts limit\n      this.dismissIfAtLimit();\n    }\n\n    var options = this.createToastOptions(props, key);\n\n    if (key === undefined || this.isNewToastKey(key)) {\n      this.setState(function (prevState) {\n        return {\n          toasts: __spreadArray([options], prevState.toasts, true)\n        };\n      });\n    } else {\n      this.setState(function (prevState) {\n        return {\n          toasts: prevState.toasts.map(function (t) {\n            return t.key === key ? options : t;\n          })\n        };\n      });\n    }\n\n    return options.key;\n  };\n\n  Toaster.prototype.dismiss = function (key, timeoutExpired) {\n    if (timeoutExpired === void 0) {\n      timeoutExpired = false;\n    }\n\n    this.setState(function (_a) {\n      var toasts = _a.toasts;\n      return {\n        toasts: toasts.filter(function (t) {\n          var _a;\n\n          var matchesKey = t.key === key;\n\n          if (matchesKey) {\n            (_a = t.onDismiss) === null || _a === void 0 ? void 0 : _a.call(t, timeoutExpired);\n          }\n\n          return !matchesKey;\n        })\n      };\n    });\n  };\n\n  Toaster.prototype.clear = function () {\n    this.state.toasts.forEach(function (t) {\n      var _a;\n\n      return (_a = t.onDismiss) === null || _a === void 0 ? void 0 : _a.call(t, false);\n    });\n    this.setState({\n      toasts: []\n    });\n  };\n\n  Toaster.prototype.getToasts = function () {\n    return this.state.toasts;\n  };\n\n  Toaster.prototype.render = function () {\n    var classes = classNames(Classes.TOAST_CONTAINER, this.getPositionClasses(), this.props.className);\n    return React.createElement(Overlay, {\n      autoFocus: this.props.autoFocus,\n      canEscapeKeyClose: this.props.canEscapeKeyClear,\n      canOutsideClickClose: false,\n      className: classes,\n      enforceFocus: false,\n      hasBackdrop: false,\n      isOpen: this.state.toasts.length > 0 || this.props.children != null,\n      onClose: this.handleClose,\n      shouldReturnFocusOnClose: false,\n      // $pt-transition-duration * 3 + $pt-transition-duration / 2\n      transitionDuration: 350,\n      transitionName: Classes.TOAST,\n      usePortal: this.props.usePortal\n    }, this.state.toasts.map(this.renderToast, this), this.props.children);\n  };\n\n  Toaster.prototype.validateProps = function (_a) {\n    var maxToasts = _a.maxToasts; // maximum number of toasts should not be a number less than 1\n\n    if (maxToasts !== undefined && maxToasts < 1) {\n      throw new Error(TOASTER_MAX_TOASTS_INVALID);\n    }\n  };\n\n  Toaster.prototype.isNewToastKey = function (key) {\n    return this.state.toasts.every(function (toast) {\n      return toast.key !== key;\n    });\n  };\n\n  Toaster.prototype.dismissIfAtLimit = function () {\n    if (this.state.toasts.length === this.props.maxToasts) {\n      // dismiss the oldest toast to stay within the maxToasts limit\n      this.dismiss(this.state.toasts[this.state.toasts.length - 1].key);\n    }\n  };\n\n  Toaster.prototype.createToastOptions = function (props, key) {\n    if (key === void 0) {\n      key = \"toast-\".concat(this.toastId++);\n    } // clone the object before adding the key prop to avoid leaking the mutation\n\n\n    return __assign(__assign({}, props), {\n      key: key\n    });\n  };\n\n  Toaster.prototype.getPositionClasses = function () {\n    var positions = this.props.position.split(\"-\"); // NOTE that there is no -center class because that's the default style\n\n    return __spreadArray(__spreadArray([], positions.map(function (p) {\n      return \"\".concat(Classes.TOAST_CONTAINER, \"-\").concat(p.toLowerCase());\n    }), true), [\"\".concat(Classes.TOAST_CONTAINER, \"-\").concat(this.props.usePortal ? \"in-portal\" : \"inline\")], false);\n  };\n\n  Toaster.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Toaster\");\n  Toaster.defaultProps = {\n    autoFocus: false,\n    canEscapeKeyClear: true,\n    position: Position.TOP,\n    usePortal: true\n  };\n  return Toaster;\n}(AbstractPureComponent2);\n\nexport { Toaster };\nexport var OverlayToaster = Toaster;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AAEA,SAASC,sBAAT,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,cAA1D;AACA,SAASC,mBAAT,EAA8BC,0BAA9B,EAA0DC,mBAA1D,QAAqF,qBAArF;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,kBAAT,QAA0C,oBAA1C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAAsBC,KAAtB,QAAmC,SAAnC;;AAsFA;AAAA;AAAA;AAA6BC;;AAA7B;AAAA;;AA8BWC,kBAAuB;AAC1BC,YAAM,EAAE;AADkB,KAAvB,CA9BX,CAkCI;;AACQD,oBAAU,CAAV;;AAmFAA,wBAAc,UAACE,KAAD,EAAqB;AACvC,aAAOhB,oBAACY,KAAD,EAAMK,aAAKD,KAAL,EAAU;AAAEE,iBAAS,EAAEJ,KAAI,CAACK,iBAAL,CAAuBH,KAAvB;AAAb,OAAV,CAAN,CAAP;AACH,KAFO;;AAkBAF,8BAAoB,UAACE,KAAD,EAAqB;AAAK,uBAACI,cAAD,EAAwB;AAC1EN,aAAI,CAACO,OAAL,CAAaL,KAAK,CAACM,GAAnB,EAAwBF,cAAxB;AACH,OAFqD;AAErD,KAFO;;AAIAN,wBAAc,UAACS,CAAD,EAAqC;AACvD;AACA;;AACA;AACA,UAAKA,CAAsC,CAACC,KAAvC,KAAiDhB,MAAtD,EAA8D;AAC1DM,aAAI,CAACW,KAAL;AACH;AACJ,KAPO;;;AAQX;AA1IG;;;;;;AAIcC,mBAAd,UAAqBC,KAArB,EAA4CC,SAA5C,EAAqE;AAAzB;AAAAA,kBAAYC,QAAQ,CAACC,IAArB;AAAyB;;AACjE,QAAIH,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACI,SAAN,IAAmB,IAApC,IAA4C,CAACrB,SAAS,CAAC,YAAD,CAA1D,EAA0E;AACtEsB,aAAO,CAACC,IAAR,CAAa1B,mBAAb;AACH;;AACD,QAAM2B,gBAAgB,GAAGL,QAAQ,CAACM,aAAT,CAAuB,KAAvB,CAAzB;AACAP,aAAS,CAACQ,WAAV,CAAsBF,gBAAtB;AACA,QAAMG,OAAO,GAAGpC,QAAQ,CAACqC,MAAT,CACZtC,oBAAC0B,OAAD,EAAQT,aAAKU,KAAL,EAAU;AAAEI,eAAS,EAAE;AAAb,KAAV,CAAR,CADY,EAEZG,gBAFY,CAAhB;;AAIA,QAAIG,OAAO,IAAI,IAAf,EAAqB;AACjB,YAAM,IAAIE,KAAJ,CAAUlC,mBAAV,CAAN;AACH;;AACD,WAAOgC,OAAP;AACH,GAda;;AAuBPX,2BAAP,UAAYC,KAAZ,EAAgCL,GAAhC,EAA4C;AACxC,QAAI,KAAKK,KAAL,CAAWa,SAAf,EAA0B;AACtB;AACA,WAAKC,gBAAL;AACH;;AACD,QAAMC,OAAO,GAAG,KAAKC,kBAAL,CAAwBhB,KAAxB,EAA+BL,GAA/B,CAAhB;;AACA,QAAIA,GAAG,KAAKsB,SAAR,IAAqB,KAAKC,aAAL,CAAmBvB,GAAnB,CAAzB,EAAkD;AAC9C,WAAKwB,QAAL,CAAc,qBAAS;AAAI,eAAC;AACxB/B,gBAAM,iBAAG2B,OAAH,GAAeK,SAAS,CAAChC,MAAzB,EAA+B,IAA/B;AADkB,SAAD;AAEzB,OAFF;AAGH,KAJD,MAIO;AACH,WAAK+B,QAAL,CAAc,qBAAS;AAAI,eAAC;AACxB/B,gBAAM,EAAEgC,SAAS,CAAChC,MAAV,CAAiBiC,GAAjB,CAAqB,aAAC;AAAI,mBAACC,CAAC,CAAC3B,GAAF,KAAUA,GAAV,GAAgBoB,OAAhB,GAA0BO,CAA3B;AAA6B,WAAvD;AADgB,SAAD;AAEzB,OAFF;AAGH;;AACD,WAAOP,OAAO,CAACpB,GAAf;AACH,GAhBM;;AAkBAI,8BAAP,UAAeJ,GAAf,EAA4BF,cAA5B,EAAkD;AAAtB;AAAAA;AAAsB;;AAC9C,SAAK0B,QAAL,CAAc,UAACI,EAAD,EAAW;UAARnC,MAAM;AAAO,aAAC;AAC3BA,cAAM,EAAEA,MAAM,CAACoC,MAAP,CAAc,aAAC;;;AACnB,cAAMC,UAAU,GAAGH,CAAC,CAAC3B,GAAF,KAAUA,GAA7B;;AACA,cAAI8B,UAAJ,EAAgB;AACZ,mBAAC,CAAClC,SAAF,MAAW,IAAX,IAAWgC,aAAX,GAAW,MAAX,GAAWA,WAAG9B,cAAH,CAAX;AACH;;AACD,iBAAO,CAACgC,UAAR;AACH,SANO;AADmB,OAAD;AAQ5B,KARF;AASH,GAVM;;AAYA1B,4BAAP;AACI,SAAK2B,KAAL,CAAWtC,MAAX,CAAkBuC,OAAlB,CAA0B,aAAC;AAAA;;AAAI,oBAAC,CAACpC,SAAF,MAAW,IAAX,IAAWgC,aAAX,GAAW,MAAX,GAAWA,WAAG,KAAH,CAAX;AAAoB,KAAnD;AACA,SAAKJ,QAAL,CAAc;AAAE/B,YAAM,EAAE;AAAV,KAAd;AACH,GAHM;;AAKAW,gCAAP;AACI,WAAO,KAAK2B,KAAL,CAAWtC,MAAlB;AACH,GAFM;;AAIAW,6BAAP;AACI,QAAM6B,OAAO,GAAGxD,UAAU,CAACI,OAAO,CAACqD,eAAT,EAA0B,KAAKC,kBAAL,EAA1B,EAAqD,KAAK9B,KAAL,CAAW+B,SAAhE,CAA1B;AACA,WACI1D,oBAACW,OAAD,EAAQ;AACJgD,eAAS,EAAE,KAAKhC,KAAL,CAAWgC,SADlB;AAEJC,uBAAiB,EAAE,KAAKjC,KAAL,CAAWkC,iBAF1B;AAGJC,0BAAoB,EAAE,KAHlB;AAIJJ,eAAS,EAAEH,OAJP;AAKJQ,kBAAY,EAAE,KALV;AAMJC,iBAAW,EAAE,KANT;AAOJC,YAAM,EAAE,KAAKZ,KAAL,CAAWtC,MAAX,CAAkBmD,MAAlB,GAA2B,CAA3B,IAAgC,KAAKvC,KAAL,CAAWwC,QAAX,IAAuB,IAP3D;AAQJC,aAAO,EAAE,KAAKC,WARV;AASJC,8BAAwB,EAAE,KATtB;AAUJ;AACAC,wBAAkB,EAAE,GAXhB;AAYJC,oBAAc,EAAErE,OAAO,CAACsE,KAZpB;AAaJ1C,eAAS,EAAE,KAAKJ,KAAL,CAAWI;AAblB,KAAR,EAeK,KAAKsB,KAAL,CAAWtC,MAAX,CAAkBiC,GAAlB,CAAsB,KAAK0B,WAA3B,EAAwC,IAAxC,CAfL,EAgBK,KAAK/C,KAAL,CAAWwC,QAhBhB,CADJ;AAoBH,GAtBM;;AAwBGzC,oCAAV,UAAwBwB,EAAxB,EAAoD;QAA1BV,SAAS,gBAAiB,CAChD;;AACA,QAAIA,SAAS,KAAKI,SAAd,IAA2BJ,SAAS,GAAG,CAA3C,EAA8C;AAC1C,YAAM,IAAID,KAAJ,CAAUjC,0BAAV,CAAN;AACH;AACJ,GALS;;AAOFoB,oCAAR,UAAsBJ,GAAtB,EAAiC;AAC7B,WAAO,KAAK+B,KAAL,CAAWtC,MAAX,CAAkB4D,KAAlB,CAAwB,iBAAK;AAAI,kBAAK,CAACrD,GAAN,KAAcA,GAAd;AAAiB,KAAlD,CAAP;AACH,GAFO;;AAIAI,uCAAR;AACI,QAAI,KAAK2B,KAAL,CAAWtC,MAAX,CAAkBmD,MAAlB,KAA6B,KAAKvC,KAAL,CAAWa,SAA5C,EAAuD;AACnD;AACA,WAAKnB,OAAL,CAAa,KAAKgC,KAAL,CAAWtC,MAAX,CAAkB,KAAKsC,KAAL,CAAWtC,MAAX,CAAkBmD,MAAlB,GAA2B,CAA7C,EAAgD5C,GAA7D;AACH;AACJ,GALO;;AAWAI,yCAAR,UAA2BC,KAA3B,EAA+CL,GAA/C,EAA8E;AAA/B;AAAAA,4BAAe,KAAKsD,OAAL,EAAf;AAA+B,MAC1E;;;AACA,iCAAYjD,KAAZ,GAAiB;AAAEL,SAAG;AAAL,KAAjB;AACH,GAHO;;AAKAI,yCAAR;AACI,QAAMmD,SAAS,GAAG,KAAKlD,KAAL,CAAWmD,QAAX,CAAqBC,KAArB,CAA2B,GAA3B,CAAlB,CADJ,CAEI;;AACA,2CACOF,SAAS,CAAC7B,GAAV,CAAc,aAAC;AAAI,uBAAG7C,OAAO,CAACqD,eAAX,EAA0B,GAA1B,EAA0BwB,MAA1B,CAA8BC,CAAC,CAACC,WAAF,EAA9B;AAA+C,KAAlE,CADP,EAC0E,IAD1E,GAC0E,CACtE,UAAG/E,OAAO,CAACqD,eAAX,EAA0B,GAA1B,EAA0BwB,MAA1B,CAA8B,KAAKrD,KAAL,CAAWI,SAAX,GAAuB,WAAvB,GAAqC,QAAnE,CADsE,CAD1E;AAIH,GAPO;;AA9HML,wBAAc,UAAGjB,kBAAH,EAAqB,UAArB,CAAd;AAEAiB,yBAA8B;AACxCiC,aAAS,EAAE,KAD6B;AAExCE,qBAAiB,EAAE,IAFqB;AAGxCiB,YAAQ,EAAE1E,QAAQ,CAAC+E,GAHqB;AAIxCpD,aAAS,EAAE;AAJ6B,GAA9B;AAiJlB;AAAC,CApJD,CAA6B7B,sBAA7B;;SAAawB;AAsJb,OAAO,IAAM0D,cAAc,GAAG1D,OAAvB","names":["classNames","React","ReactDOM","AbstractPureComponent2","Classes","Position","TOASTER_CREATE_NULL","TOASTER_MAX_TOASTS_INVALID","TOASTER_WARN_INLINE","ESCAPE","DISPLAYNAME_PREFIX","isNodeEnv","Overlay","Toast","__extends","_this","toasts","toast","__assign","onDismiss","getDismissHandler","timeoutExpired","dismiss","key","e","which","clear","Toaster","props","container","document","body","usePortal","console","warn","containerElement","createElement","appendChild","toaster","render","Error","maxToasts","dismissIfAtLimit","options","createToastOptions","undefined","isNewToastKey","setState","prevState","map","t","_a","filter","matchesKey","state","forEach","classes","TOAST_CONTAINER","getPositionClasses","className","autoFocus","canEscapeKeyClose","canEscapeKeyClear","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","length","children","onClose","handleClose","shouldReturnFocusOnClose","transitionDuration","transitionName","TOAST","renderToast","every","toastId","positions","position","split","concat","p","toLowerCase","TOP","OverlayToaster"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/toast/toaster.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { TOASTER_CREATE_NULL, TOASTER_MAX_TOASTS_INVALID, TOASTER_WARN_INLINE } from \"../../common/errors\";\nimport { ESCAPE } from \"../../common/keys\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isNodeEnv } from \"../../common/utils\";\nimport { Overlay } from \"../overlay/overlay\";\nimport { IToastProps, Toast } from \"./toast\";\n\nexport type IToastOptions = IToastProps & { key: string };\nexport type ToasterPosition =\n    | typeof Position.TOP\n    | typeof Position.TOP_LEFT\n    | typeof Position.TOP_RIGHT\n    | typeof Position.BOTTOM\n    | typeof Position.BOTTOM_LEFT\n    | typeof Position.BOTTOM_RIGHT;\n\n/** Instance methods available on a `<Toaster>` component instance. */\nexport interface IToaster {\n    /**\n     * Shows a new toast to the user, or updates an existing toast corresponding to the provided key (optional).\n     *\n     * Returns the unique key of the toast.\n     */\n    show(props: IToastProps, key?: string): string;\n\n    /** Dismiss the given toast instantly. */\n    dismiss(key: string): void;\n\n    /** Dismiss all toasts instantly. */\n    clear(): void;\n\n    /** Returns the props for all current toasts. */\n    getToasts(): IToastOptions[];\n}\n\n/**\n * Props supported by the `<Toaster>` component.\n * These props can be passed as an argument to the static `Toaster.create(props?, container?)` method.\n */\nexport interface IToasterProps extends Props {\n    /**\n     * Whether a toast should acquire application focus when it first opens.\n     * This is disabled by default so that toasts do not interrupt the user's flow.\n     * Note that `enforceFocus` is always disabled for `Toaster`s.\n     *\n     * @default false\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should clear all active toasts.\n     *\n     * @default true\n     */\n    canEscapeKeyClear?: boolean;\n\n    /** Optional toast elements. */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the toaster should be rendered into a new element attached to `document.body`.\n     * If `false`, then positioning will be relative to the parent element.\n     *\n     * This prop is ignored by `Toaster.create()` as that method always appends a new element\n     * to the container.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n\n    /**\n     * Position of `Toaster` within its container.\n     *\n     * @default Position.TOP\n     */\n    position?: ToasterPosition;\n\n    /**\n     * The maximum number of active toasts that can be displayed at once.\n     *\n     * When the limit is about to be exceeded, the oldest active toast is removed.\n     *\n     * @default undefined\n     */\n    maxToasts?: number;\n}\n\nexport interface IToasterState {\n    toasts: IToastOptions[];\n}\n\nexport class Toaster extends AbstractPureComponent2<IToasterProps, IToasterState> implements IToaster {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Toaster`;\n\n    public static defaultProps: IToasterProps = {\n        autoFocus: false,\n        canEscapeKeyClear: true,\n        position: Position.TOP,\n        usePortal: true,\n    };\n\n    /**\n     * Create a new `Toaster` instance that can be shared around your application.\n     * The `Toaster` will be rendered into a new element appended to the given container.\n     */\n    public static create(props?: IToasterProps, container = document.body): IToaster {\n        if (props != null && props.usePortal != null && !isNodeEnv(\"production\")) {\n            console.warn(TOASTER_WARN_INLINE);\n        }\n        const containerElement = document.createElement(\"div\");\n        container.appendChild(containerElement);\n        const toaster = ReactDOM.render<IToasterProps>(\n            <Toaster {...props} usePortal={false} />,\n            containerElement,\n        ) as Toaster;\n        if (toaster == null) {\n            throw new Error(TOASTER_CREATE_NULL);\n        }\n        return toaster;\n    }\n\n    public state: IToasterState = {\n        toasts: [],\n    };\n\n    // auto-incrementing identifier for un-keyed toasts\n    private toastId = 0;\n\n    public show(props: IToastProps, key?: string) {\n        if (this.props.maxToasts) {\n            // check if active number of toasts are at the maxToasts limit\n            this.dismissIfAtLimit();\n        }\n        const options = this.createToastOptions(props, key);\n        if (key === undefined || this.isNewToastKey(key)) {\n            this.setState(prevState => ({\n                toasts: [options, ...prevState.toasts],\n            }));\n        } else {\n            this.setState(prevState => ({\n                toasts: prevState.toasts.map(t => (t.key === key ? options : t)),\n            }));\n        }\n        return options.key;\n    }\n\n    public dismiss(key: string, timeoutExpired = false) {\n        this.setState(({ toasts }) => ({\n            toasts: toasts.filter(t => {\n                const matchesKey = t.key === key;\n                if (matchesKey) {\n                    t.onDismiss?.(timeoutExpired);\n                }\n                return !matchesKey;\n            }),\n        }));\n    }\n\n    public clear() {\n        this.state.toasts.forEach(t => t.onDismiss?.(false));\n        this.setState({ toasts: [] });\n    }\n\n    public getToasts() {\n        return this.state.toasts;\n    }\n\n    public render() {\n        const classes = classNames(Classes.TOAST_CONTAINER, this.getPositionClasses(), this.props.className);\n        return (\n            <Overlay\n                autoFocus={this.props.autoFocus}\n                canEscapeKeyClose={this.props.canEscapeKeyClear}\n                canOutsideClickClose={false}\n                className={classes}\n                enforceFocus={false}\n                hasBackdrop={false}\n                isOpen={this.state.toasts.length > 0 || this.props.children != null}\n                onClose={this.handleClose}\n                shouldReturnFocusOnClose={false}\n                // $pt-transition-duration * 3 + $pt-transition-duration / 2\n                transitionDuration={350}\n                transitionName={Classes.TOAST}\n                usePortal={this.props.usePortal}\n            >\n                {this.state.toasts.map(this.renderToast, this)}\n                {this.props.children}\n            </Overlay>\n        );\n    }\n\n    protected validateProps({ maxToasts }: IToasterProps) {\n        // maximum number of toasts should not be a number less than 1\n        if (maxToasts !== undefined && maxToasts < 1) {\n            throw new Error(TOASTER_MAX_TOASTS_INVALID);\n        }\n    }\n\n    private isNewToastKey(key: string) {\n        return this.state.toasts.every(toast => toast.key !== key);\n    }\n\n    private dismissIfAtLimit() {\n        if (this.state.toasts.length === this.props.maxToasts) {\n            // dismiss the oldest toast to stay within the maxToasts limit\n            this.dismiss(this.state.toasts[this.state.toasts.length - 1].key!);\n        }\n    }\n\n    private renderToast = (toast: IToastOptions) => {\n        return <Toast {...toast} onDismiss={this.getDismissHandler(toast)} />;\n    };\n\n    private createToastOptions(props: IToastProps, key = `toast-${this.toastId++}`) {\n        // clone the object before adding the key prop to avoid leaking the mutation\n        return { ...props, key };\n    }\n\n    private getPositionClasses() {\n        const positions = this.props.position!.split(\"-\");\n        // NOTE that there is no -center class because that's the default style\n        return [\n            ...positions.map(p => `${Classes.TOAST_CONTAINER}-${p.toLowerCase()}`),\n            `${Classes.TOAST_CONTAINER}-${this.props.usePortal ? \"in-portal\" : \"inline\"}`,\n        ];\n    }\n\n    private getDismissHandler = (toast: IToastOptions) => (timeoutExpired: boolean) => {\n        this.dismiss(toast.key, timeoutExpired);\n    };\n\n    private handleClose = (e: React.SyntheticEvent<HTMLElement>) => {\n        // NOTE that `e` isn't always a KeyboardEvent but that's the only type we care about\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable-next-line deprecation/deprecation */\n        if ((e as React.KeyboardEvent<HTMLElement>).which === ESCAPE) {\n            this.clear();\n        }\n    };\n}\n\nexport const OverlayToaster = Toaster;\nexport type OverlayToasterProps = IToasterProps;\n"]},"metadata":{},"sourceType":"module"}