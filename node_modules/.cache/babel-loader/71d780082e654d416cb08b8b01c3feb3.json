{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [cronDetails, setCronDetails] = useState([]);\n\n  const clearEvents = () => {\n    setCronDetails([]);\n  };\n\n  const getStartTime = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const handleReloadClick = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        var startTimeMap = [];\n        console.log(res.data.message);\n        res.data.message.forEach(element => {\n          console.log(\"hello\");\n          const {\n            name,\n            clientName,\n            timeZone,\n            cron,\n            cronInfo,\n            env,\n            exchange,\n            reportCycle,\n            createdTs,\n            triggerTimes\n          } = element;\n          triggerTimes.forEach(element => {\n            console.log(startTimeMap[element]);\n\n            if (typeof startTimeMap[element] === \"undefined\") {\n              console.log(\"hai\");\n              startTimeMap.push({\n                [element]: {\n                  name: name,\n                  clientName: clientName,\n                  timeZone: timeZone,\n                  cron: cron,\n                  cronInfo: cronInfo,\n                  env: env,\n                  exchange: exchange,\n                  reportCycle: reportCycle,\n                  createdTs: createdTs\n                }\n              });\n              console.log(startTimeMap[element]);\n            } else {\n              console.log(\"Ind\");\n              startTimeMap.push({\n                [element]: { ...startTimeMap[element],\n                  name: name,\n                  clientName: clientName,\n                  timeZone: timeZone,\n                  cron: cron,\n                  cronInfo: cronInfo,\n                  env: env,\n                  exchange: exchange,\n                  reportCycle: reportCycle,\n                  createdTs: createdTs\n                }\n              });\n            }\n          });\n          console.log(startTimeMap);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridDay\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        customButtons: {\n          reload: {\n            text: \"Reload\",\n            click: function () {\n              handleReloadClick();\n            }\n          }\n        },\n        headerToolbar: {\n          left: \"reload,prev,next\",\n          right: \"today,timeGridDay,timeGridWeek\"\n        },\n        eventClick: function (arg) {\n          alert(arg.event.title);\n          alert(arg.event.start);\n        },\n        slotDuration: \"00:05:00\" //events={events}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"VoO7RzyQM/lsrQIUTkWXfUbPHA4=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","API","moment","api","Home","props","cronDetails","setCronDetails","clearEvents","getStartTime","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","handleReloadClick","Promise","resolve","getTriggerTimes","then","res","startTimeMap","console","log","data","message","forEach","element","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","push","catch","err","reload","text","click","left","right","arg","alert","event","title","start"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from 'moment'\n\nlet api = new API();\n\nfunction Home(props) {\n  const [cronDetails, setCronDetails] = useState([]);\n\n  const clearEvents = () => {\n    setCronDetails([]);\n  };\n\n  const getStartTime =(time)=>{\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  }\n\n  const getEndTime =(time)=>{\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds()+1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\")\n  }\n\n  const handleReloadClick = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          var startTimeMap=[];\n          console.log(res.data.message);\n\n          res.data.message.forEach((element) => {\n            console.log(\"hello\")\n            const {name, clientName, timeZone, cron, cronInfo, env, exchange, reportCycle, createdTs, triggerTimes} =element;\n            triggerTimes.forEach(element=>{\n              console.log(startTimeMap[element] )\n              if(typeof startTimeMap[element] === \"undefined\"){\n                console.log(\"hai\")\n                startTimeMap.push({\n                  [element]:{\n                    name:name,\n                    clientName:clientName,\n                    timeZone:timeZone,\n                    cron:cron,\n                    cronInfo:cronInfo,\n                    env:env,\n                    exchange:exchange,\n                    reportCycle:reportCycle,\n                    createdTs:createdTs,\n                  }\n                })\n                console.log(startTimeMap[element])\n              }else {\n                console.log(\"Ind\");\n                startTimeMap.push({\n                  [element]:{\n                    ...startTimeMap[element],\n                    name:name,\n                    clientName:clientName,\n                    timeZone:timeZone,\n                    cron:cron,\n                    cronInfo:cronInfo,\n                    env:env,\n                    exchange:exchange,\n                    reportCycle:reportCycle,\n                    createdTs:createdTs,\n                    \n                  }\n                })\n              }\n            })\n            console.log(startTimeMap)\n            \n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridDay\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          customButtons={{\n            reload: {\n              text: \"Reload\",\n              click: function () {\n                handleReloadClick();\n              },\n            },\n          }}\n          headerToolbar={{\n            left: \"reload,prev,next\",\n            right: \"today,timeGridDay,timeGridWeek\",\n          }}\n          eventClick={function (arg) {\n            alert(arg.event.title);\n            alert(arg.event.start);\n          }}\n          slotDuration=\"00:05:00\"\n          //events={events}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}