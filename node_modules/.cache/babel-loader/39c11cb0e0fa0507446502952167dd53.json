{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var KeyCodes = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  20: \"capslock\",\n  27: \"esc\",\n  32: \"space\",\n  33: \"pageup\",\n  34: \"pagedown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"left\",\n  38: \"up\",\n  39: \"right\",\n  40: \"down\",\n  45: \"ins\",\n  46: \"del\",\n  // number keys\n  48: \"0\",\n  49: \"1\",\n  50: \"2\",\n  51: \"3\",\n  52: \"4\",\n  53: \"5\",\n  54: \"6\",\n  55: \"7\",\n  56: \"8\",\n  57: \"9\",\n  // alphabet\n  65: \"a\",\n  66: \"b\",\n  67: \"c\",\n  68: \"d\",\n  69: \"e\",\n  70: \"f\",\n  71: \"g\",\n  72: \"h\",\n  73: \"i\",\n  74: \"j\",\n  75: \"k\",\n  76: \"l\",\n  77: \"m\",\n  78: \"n\",\n  79: \"o\",\n  80: \"p\",\n  81: \"q\",\n  82: \"r\",\n  83: \"s\",\n  84: \"t\",\n  85: \"u\",\n  86: \"v\",\n  87: \"w\",\n  88: \"x\",\n  89: \"y\",\n  90: \"z\",\n  // punctuation\n  106: \"*\",\n  107: \"+\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n};\nexport var Modifiers = {\n  16: \"shift\",\n  17: \"ctrl\",\n  18: \"alt\",\n  91: \"meta\",\n  93: \"meta\",\n  224: \"meta\"\n};\nexport var ModifierBitMasks = {\n  alt: 1,\n  ctrl: 2,\n  meta: 4,\n  shift: 8\n};\nexport var Aliases = {\n  cmd: \"meta\",\n  command: \"meta\",\n  escape: \"esc\",\n  minus: \"-\",\n  mod: isMac() ? \"meta\" : \"ctrl\",\n  option: \"alt\",\n  plus: \"+\",\n  return: \"enter\",\n  win: \"meta\"\n}; // alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\n\nexport var ShiftKeys = {\n  \"~\": \"`\",\n  \"!\": \"1\",\n  \"@\": \"2\",\n  \"#\": \"3\",\n  $: \"4\",\n  \"%\": \"5\",\n  \"^\": \"6\",\n  \"&\": \"7\",\n  \"*\": \"8\",\n  \"(\": \"9\",\n  \")\": \"0\",\n  _: \"-\",\n  \"+\": \"=\",\n  \"{\": \"[\",\n  \"}\": \"]\",\n  \"|\": \"\\\\\",\n  \":\": \";\",\n  '\"': \"'\",\n  \"<\": \",\",\n  \">\": \".\",\n  \"?\": \"/\"\n}; // tslint:enable object-literal-sort-keys\n// Function keys\n\nfor (var i = 1; i <= 12; ++i) {\n  KeyCodes[111 + i] = \"f\" + i;\n} // Numpad\n\n\nfor (var i = 0; i <= 9; ++i) {\n  KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport function comboMatches(a, b) {\n  return a.modifiers === b.modifiers && a.key === b.key;\n}\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\n\nexport var parseKeyCombo = function (combo) {\n  var pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n  var modifiers = 0;\n  var key;\n\n  for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {\n    var piece = pieces_1[_i];\n\n    if (piece === \"\") {\n      throw new Error(\"Failed to parse key combo \\\"\".concat(combo, \"\\\".\\n                Valid key combos look like \\\"cmd + plus\\\", \\\"shift+p\\\", or \\\"!\\\"\"));\n    }\n\n    if (Aliases[piece] != null) {\n      piece = Aliases[piece];\n    }\n\n    if (ModifierBitMasks[piece] != null) {\n      modifiers += ModifierBitMasks[piece];\n    } else if (ShiftKeys[piece] != null) {\n      modifiers += ModifierBitMasks.shift;\n      key = ShiftKeys[piece];\n    } else {\n      key = piece.toLowerCase();\n    }\n  }\n\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Converts a keyboard event into a valid combo prop string\n */\n\nexport var getKeyComboString = function (e) {\n  var keys = []; // modifiers first\n\n  if (e.ctrlKey) {\n    keys.push(\"ctrl\");\n  }\n\n  if (e.altKey) {\n    keys.push(\"alt\");\n  }\n\n  if (e.shiftKey) {\n    keys.push(\"shift\");\n  }\n\n  if (e.metaKey) {\n    keys.push(\"meta\");\n  } // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n  // eslint-disable-next-line deprecation/deprecation\n\n\n  var which = e.which;\n\n  if (Modifiers[which] != null) {// no action key\n  } else if (KeyCodes[which] != null) {\n    keys.push(KeyCodes[which]);\n  } else {\n    // eslint-disable-next-line id-blacklist\n    keys.push(String.fromCharCode(which).toLowerCase());\n  } // join keys with plusses\n\n\n  return keys.join(\" + \");\n};\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\n\nexport var getKeyCombo = function (e) {\n  var key; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n  // eslint-disable-next-line deprecation/deprecation\n\n  var which = e.which;\n\n  if (Modifiers[which] != null) {// keep key null\n  } else if (KeyCodes[which] != null) {\n    key = KeyCodes[which];\n  } else {\n    // eslint-disable-next-line id-blacklist\n    key = String.fromCharCode(which).toLowerCase();\n  }\n\n  var modifiers = 0;\n\n  if (e.altKey) {\n    modifiers += ModifierBitMasks.alt;\n  }\n\n  if (e.ctrlKey) {\n    modifiers += ModifierBitMasks.ctrl;\n  }\n\n  if (e.metaKey) {\n    modifiers += ModifierBitMasks.meta;\n  }\n\n  if (e.shiftKey) {\n    modifiers += ModifierBitMasks.shift;\n  }\n\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\n\nexport var normalizeKeyCombo = function (combo, platformOverride) {\n  var keys = combo.replace(/\\s/g, \"\").split(\"+\");\n  return keys.map(function (key) {\n    var keyName = Aliases[key] != null ? Aliases[key] : key;\n    return keyName === \"meta\" ? isMac(platformOverride) ? \"cmd\" : \"ctrl\" : keyName;\n  });\n};\n\nfunction isMac(platformOverride) {\n  // HACKHACK: see https://github.com/palantir/blueprint/issues/5174\n  // eslint-disable-next-line deprecation/deprecation\n  var platform = platformOverride !== null && platformOverride !== void 0 ? platformOverride : typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n  return platform === undefined ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}","map":{"version":3,"mappings":"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","names":["KeyCodes","Modifiers","ModifierBitMasks","alt","ctrl","meta","shift","Aliases","cmd","command","escape","minus","mod","isMac","option","plus","return","win","ShiftKeys","$","_","i","toString","comboMatches","a","b","modifiers","key","parseKeyCombo","combo","pieces","replace","toLowerCase","split","_i","piece","Error","getKeyComboString","e","keys","ctrlKey","push","altKey","shiftKey","metaKey","which","String","fromCharCode","join","getKeyCombo","normalizeKeyCombo","platformOverride","map","keyName","platform","navigator","undefined","test"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/hotkeys/hotkeyParser.ts"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface IKeyCodeTable {\n    [code: number]: string;\n}\n\nexport interface IKeyCodeReverseTable {\n    [key: string]: number;\n}\n\nexport interface IKeyMap {\n    [key: string]: string;\n}\n\nexport const KeyCodes: IKeyCodeTable = {\n    8: \"backspace\",\n    9: \"tab\",\n    13: \"enter\",\n    20: \"capslock\",\n    27: \"esc\",\n    32: \"space\",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    45: \"ins\",\n    46: \"del\",\n    // number keys\n    48: \"0\",\n    49: \"1\",\n    50: \"2\",\n    51: \"3\",\n    52: \"4\",\n    53: \"5\",\n    54: \"6\",\n    55: \"7\",\n    56: \"8\",\n    57: \"9\",\n    // alphabet\n    65: \"a\",\n    66: \"b\",\n    67: \"c\",\n    68: \"d\",\n    69: \"e\",\n    70: \"f\",\n    71: \"g\",\n    72: \"h\",\n    73: \"i\",\n    74: \"j\",\n    75: \"k\",\n    76: \"l\",\n    77: \"m\",\n    78: \"n\",\n    79: \"o\",\n    80: \"p\",\n    81: \"q\",\n    82: \"r\",\n    83: \"s\",\n    84: \"t\",\n    85: \"u\",\n    86: \"v\",\n    87: \"w\",\n    88: \"x\",\n    89: \"y\",\n    90: \"z\",\n    // punctuation\n    106: \"*\",\n    107: \"+\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n};\n\nexport const Modifiers: IKeyCodeTable = {\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    91: \"meta\",\n    93: \"meta\",\n    224: \"meta\",\n};\n\nexport const ModifierBitMasks: IKeyCodeReverseTable = {\n    alt: 1,\n    ctrl: 2,\n    meta: 4,\n    shift: 8,\n};\n\nexport const Aliases: IKeyMap = {\n    cmd: \"meta\",\n    command: \"meta\",\n    escape: \"esc\",\n    minus: \"-\",\n    mod: isMac() ? \"meta\" : \"ctrl\",\n    option: \"alt\",\n    plus: \"+\",\n    return: \"enter\",\n    win: \"meta\",\n};\n\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexport const ShiftKeys: IKeyMap = {\n    \"~\": \"`\",\n    \"!\": \"1\",\n    \"@\": \"2\",\n    \"#\": \"3\",\n    $: \"4\",\n    \"%\": \"5\",\n    \"^\": \"6\",\n    \"&\": \"7\",\n    \"*\": \"8\",\n    \"(\": \"9\",\n    \")\": \"0\",\n    _: \"-\",\n    \"+\": \"=\",\n    \"{\": \"[\",\n    \"}\": \"]\",\n    \"|\": \"\\\\\",\n    \":\": \";\",\n    '\"': \"'\",\n    \"<\": \",\",\n    \">\": \".\",\n    \"?\": \"/\",\n};\n// tslint:enable object-literal-sort-keys\n\n// Function keys\nfor (let i = 1; i <= 12; ++i) {\n    KeyCodes[111 + i] = \"f\" + i;\n}\n\n// Numpad\nfor (let i = 0; i <= 9; ++i) {\n    KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport interface IKeyCombo {\n    key?: string;\n    modifiers: number;\n}\n\nexport function comboMatches(a: IKeyCombo, b: IKeyCombo) {\n    return a.modifiers === b.modifiers && a.key === b.key;\n}\n\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nexport const parseKeyCombo = (combo: string): IKeyCombo => {\n    const pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n    let modifiers = 0;\n    let key: string | undefined;\n    for (let piece of pieces) {\n        if (piece === \"\") {\n            throw new Error(`Failed to parse key combo \"${combo}\".\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"`);\n        }\n\n        if (Aliases[piece] != null) {\n            piece = Aliases[piece];\n        }\n\n        if (ModifierBitMasks[piece] != null) {\n            modifiers += ModifierBitMasks[piece];\n        } else if (ShiftKeys[piece] != null) {\n            modifiers += ModifierBitMasks.shift;\n            key = ShiftKeys[piece];\n        } else {\n            key = piece.toLowerCase();\n        }\n    }\n    return { modifiers, key };\n};\n\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nexport const getKeyComboString = (e: KeyboardEvent): string => {\n    const keys = [] as string[];\n\n    // modifiers first\n    if (e.ctrlKey) {\n        keys.push(\"ctrl\");\n    }\n    if (e.altKey) {\n        keys.push(\"alt\");\n    }\n    if (e.shiftKey) {\n        keys.push(\"shift\");\n    }\n    if (e.metaKey) {\n        keys.push(\"meta\");\n    }\n\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // no action key\n    } else if (KeyCodes[which] != null) {\n        keys.push(KeyCodes[which]);\n    } else {\n        // eslint-disable-next-line id-blacklist\n        keys.push(String.fromCharCode(which).toLowerCase());\n    }\n\n    // join keys with plusses\n    return keys.join(\" + \");\n};\n\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nexport const getKeyCombo = (e: KeyboardEvent): IKeyCombo => {\n    let key: string | undefined;\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // keep key null\n    } else if (KeyCodes[which] != null) {\n        key = KeyCodes[which];\n    } else {\n        // eslint-disable-next-line id-blacklist\n        key = String.fromCharCode(which).toLowerCase();\n    }\n\n    let modifiers = 0;\n    if (e.altKey) {\n        modifiers += ModifierBitMasks.alt;\n    }\n    if (e.ctrlKey) {\n        modifiers += ModifierBitMasks.ctrl;\n    }\n    if (e.metaKey) {\n        modifiers += ModifierBitMasks.meta;\n    }\n    if (e.shiftKey) {\n        modifiers += ModifierBitMasks.shift;\n    }\n\n    return { modifiers, key };\n};\n\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nexport const normalizeKeyCombo = (combo: string, platformOverride?: string): string[] => {\n    const keys = combo.replace(/\\s/g, \"\").split(\"+\");\n    return keys.map(key => {\n        const keyName = Aliases[key] != null ? Aliases[key] : key;\n        return keyName === \"meta\" ? (isMac(platformOverride) ? \"cmd\" : \"ctrl\") : keyName;\n    });\n};\n\nfunction isMac(platformOverride?: string) {\n    // HACKHACK: see https://github.com/palantir/blueprint/issues/5174\n    // eslint-disable-next-line deprecation/deprecation\n    const platform = platformOverride ?? (typeof navigator !== \"undefined\" ? navigator.platform : undefined);\n    return platform === undefined ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n"]},"metadata":{},"sourceType":"module"}