{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { IconSvgPaths16, IconSvgPaths20, iconNameToPathsRecordKey } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nexport var IconSize;\n\n(function (IconSize) {\n  IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n  IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  __extends(Icon, _super);\n\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Icon.prototype.render = function () {\n    var icon = this.props.icon;\n\n    if (icon == null || typeof icon === \"boolean\") {\n      return null;\n    } else if (typeof icon !== \"string\") {\n      return icon;\n    }\n\n    var _a = this.props,\n        className = _a.className,\n        color = _a.color,\n        htmlTitle = _a.htmlTitle,\n        // eslint-disable-next-line deprecation/deprecation\n    iconSize = _a.iconSize,\n        intent = _a.intent,\n        _b = _a.size,\n        size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b,\n        title = _a.title,\n        _c = _a.tagName,\n        tagName = _c === void 0 ? \"span\" : _c,\n        htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]); // choose which pixel grid is most appropriate for given icon size\n\n\n    var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD; // render path elements, or nothing if icon name is unknown.\n\n    var paths = this.renderSvgPaths(pixelGridSize, icon);\n    var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n    var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n    return React.createElement(tagName, __assign(__assign({}, htmlprops), {\n      \"aria-hidden\": title ? undefined : true,\n      className: classes,\n      title: htmlTitle\n    }), React.createElement(\"svg\", {\n      fill: color,\n      \"data-icon\": icon,\n      width: size,\n      height: size,\n      viewBox: viewBox\n    }, title && React.createElement(\"desc\", null, title), paths));\n  };\n  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n\n\n  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n    var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n    var paths = svgPathsRecord[iconNameToPathsRecordKey(iconName)];\n\n    if (paths == null) {\n      return null;\n    }\n\n    return paths.map(function (path, i) {\n      return React.createElement(\"path\", {\n        key: i,\n        d: path,\n        fillRule: \"evenodd\"\n      });\n    });\n  };\n\n  Icon.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Icon\");\n  return Icon;\n}(AbstractPureComponent2);\n\nexport { Icon };","map":{"version":3,"mappings":"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","names":["classNames","React","IconSvgPaths16","IconSvgPaths20","iconNameToPathsRecordKey","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","IconSize","__extends","Icon","props","icon","_a","className","color","htmlTitle","iconSize","intent","_b","size","STANDARD","title","_c","tagName","htmlprops","pixelGridSize","LARGE","paths","renderSvgPaths","classes","ICON","iconClass","intentClass","viewBox","concat","createElement","__assign","undefined","fill","width","height","pathsSize","iconName","svgPathsRecord","map","path","i","key","d","fillRule"],"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/node_modules/@blueprintjs/core/src/components/icon/icon.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { IconName, IconSvgPaths16, IconSvgPaths20, iconNameToPathsRecordKey } from \"@blueprintjs/icons\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, IntentProps, Props, MaybeElement } from \"../../common\";\n\nexport type { IconName };\n\nexport enum IconSize {\n    STANDARD = 16,\n    LARGE = 20,\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type IconProps = IIconProps;\n/** @deprecated use IconProps */\nexport interface IIconProps extends IntentProps, Props {\n    /** This component does not support custom children. Use the `icon` prop. */\n    children?: never;\n\n    /**\n     * Color of icon. This is used as the `fill` attribute on the `<svg>` image\n     * so it will override any CSS `color` property, including that set by\n     * `intent`. If this prop is omitted, icon color is inherited from\n     * surrounding text.\n     */\n    color?: string;\n\n    /**\n     * String for the `title` attribute on the rendered element, which will appear\n     * on hover as a native browser tooltip.\n     */\n    htmlTitle?: string;\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render. This prop is\n     * required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names), that\n     *   icon will be rendered as an `<svg>` with `<path>` tags. Unknown strings\n     *   will render a blank icon to occupy space.\n     * - If given a `JSX.Element`, that element will be rendered and _all other\n     *   props on this component are ignored._ This type is supported to\n     *   simplify icon support in other Blueprint components. As a consumer, you\n     *   should avoid using `<Icon icon={<Element />}` directly; simply render\n     *   `<Element />` instead.\n     */\n    icon: IconName | MaybeElement;\n\n    /**\n     * @deprecated use size prop instead\n     */\n    iconSize?: number;\n\n    /**\n     * Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon\n     * images, and chooses the appropriate resolution based on this prop.\n     *\n     * @default IconSize.STANDARD = 16\n     */\n    size?: number;\n\n    /** CSS style properties. */\n    style?: React.CSSProperties;\n\n    /**\n     * HTML tag to use for the rendered element.\n     *\n     * @default \"span\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * Description string. This string does not appear in normal browsers, but\n     * it increases accessibility. For instance, screen readers will use it for\n     * aural feedback.\n     *\n     * If this value is nullish, `false`, or an empty string, the component will assume\n     * that the icon is decorative and `aria-hidden=\"true\"` will be applied.\n     *\n     * @see https://www.w3.org/WAI/tutorials/images/decorative/\n     */\n    title?: string | false | null;\n}\n\nexport class Icon extends AbstractPureComponent2<IconProps & Omit<React.HTMLAttributes<HTMLElement>, \"title\">> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Icon`;\n\n    public render(): JSX.Element | null {\n        const { icon } = this.props;\n        if (icon == null || typeof icon === \"boolean\") {\n            return null;\n        } else if (typeof icon !== \"string\") {\n            return icon;\n        }\n\n        const {\n            className,\n            color,\n            htmlTitle,\n            // eslint-disable-next-line deprecation/deprecation\n            iconSize,\n            intent,\n            size = iconSize ?? IconSize.STANDARD,\n            title,\n            tagName = \"span\",\n            ...htmlprops\n        } = this.props;\n\n        // choose which pixel grid is most appropriate for given icon size\n        const pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD;\n        // render path elements, or nothing if icon name is unknown.\n        const paths = this.renderSvgPaths(pixelGridSize, icon);\n\n        const classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n        const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`;\n\n        return React.createElement(\n            tagName,\n            {\n                ...htmlprops,\n                \"aria-hidden\": title ? undefined : true,\n                className: classes,\n                title: htmlTitle,\n            },\n            <svg fill={color} data-icon={icon} width={size} height={size} viewBox={viewBox}>\n                {title && <desc>{title}</desc>}\n                {paths}\n            </svg>,\n        );\n    }\n\n    /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n    private renderSvgPaths(pathsSize: number, iconName: IconName): JSX.Element[] | null {\n        const svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n        const paths = svgPathsRecord[iconNameToPathsRecordKey(iconName)];\n        if (paths == null) {\n            return null;\n        }\n        return paths.map((path, i) => <path key={i} d={path} fillRule=\"evenodd\" />);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}