{"ast":null,"code":"var _jsxFileName = \"/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new API();\n\nfunction Home(props) {\n  _s();\n\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = {\n    popup,\n    setPopup\n  };\n  const [timer, setTimer] = useState(false);\n\n  const getEventKey = time => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = time => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    setTimeMap(timeMap.clear());\n    setEvents([]);\n  };\n\n  useEffect(() => {\n    handleReload();\n    getMovementDetails();\n    countTimer(); //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer() {\n    setTimeout(() => {\n      setTimer(!timer);\n    }, 1000);\n  }\n\n  const populateStartTimeMap = (element, startTimeMap) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes\n    } = element;\n    triggerTimes.forEach(element => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(getEventKey(element), existingList.concat(newList));\n      } else {\n        const list = [{\n          name: name,\n          clientName: clientName,\n          timeZone: timeZone,\n          cron: cron,\n          cronInfo: cronInfo,\n          env: env,\n          exchange: exchange,\n          reportCycle: reportCycle,\n          createdTs: createdTs\n        }];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n    return startTimeMap;\n  };\n\n  const handleEventClick = _ref => {\n    let {\n      event\n    } = _ref;\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach(element => {\n      const message = element.name + \" \" + element.clientName + \" (\" + element.env + \") \" + element.exchange + \" \" + element.cron + \" (\" + element.cronInfo + \" \" + element.timeZone + \") \";\n      messages.push(message);\n    });\n    setDisplayMap({\n      key: key,\n      values: messages\n    });\n    setPopup(true);\n  };\n\n  const setNewEvents = cronDetails => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach(element => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      if (!isNaN(new Date(key).getTime())) {\n        newEvents.push({\n          title: \"Event \" + newEvents.length,\n          start: key,\n          end: getEndTime(key)\n        });\n      }\n    });\n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReload = () => {\n    return new Promise(resolve => {\n      api.getTriggerTimes().then(res => {\n        clearEvents();\n        setCronDetails(res.data.message);\n        setNewEvents(res.data.message);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const getMovementDetails = () => {\n    return new Promise(resolve => {\n      api.getMovementRecords().then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(POPup, {\n        elementsMap: displayMap,\n        stateValue: stateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [timeGridPlugin],\n        timeZone: \"local\",\n        initialView: \"timeGridWeek\",\n        allDaySlot: false,\n        eventMinHeight: 20,\n        headerToolbar: {\n          left: \"prev,next\",\n          center: \"title\",\n          right: \"today\"\n        },\n        buttonText: {\n          today: \"Current Week\"\n        },\n        eventClick: handleEventClick,\n        slotDuration: \"00:10:00\",\n        events: events,\n        slotLabelInterval: \"00:30:00\",\n        nowIndicator: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"X2UrOsPFHPk0eSYjvFXiY2JW9I4=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/components/routes/home/Home.jsx"],"names":["FullCalendar","timeGridPlugin","useState","useEffect","API","moment","POPup","api","Home","props","cronDetails","setCronDetails","timeMap","setTimeMap","Map","events","setEvents","displayMap","setDisplayMap","popup","setPopup","stateValue","timer","setTimer","getEventKey","time","local","format","getEndTime","dateTime","Date","setSeconds","getSeconds","clearEvents","clear","handleReload","getMovementDetails","countTimer","setTimeout","populateStartTimeMap","element","startTimeMap","name","clientName","timeZone","cron","cronInfo","env","exchange","reportCycle","createdTs","triggerTimes","forEach","has","newList","existingList","get","set","concat","list","handleEventClick","event","key","start","messages","Object","values","message","push","setNewEvents","newEvents","value","isNaN","getTime","title","length","end","Promise","resolve","getTriggerTimes","then","res","data","catch","err","console","log","getMovementRecords","left","center","right","today"],"mappings":"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","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../util/api/Api.js\";\nimport \"./home.css\";\nimport moment from \"moment\";\nimport POPup from \"../../popup/popup.jsx\";\n\nlet api = new API();\n\nfunction Home(props) {\n  const [cronDetails, setCronDetails] = useState([]);\n  const [timeMap, setTimeMap] = useState(new Map());\n  const [events, setEvents] = useState([]);\n  const [displayMap, setDisplayMap] = useState({});\n  const [popup, setPopup] = useState(false);\n  const stateValue = { popup, setPopup };\n  const [timer,setTimer]=useState(false);\n\n  const getEventKey = (time) => {\n    return moment(time).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const getEndTime = (time) => {\n    const dateTime = new Date(time);\n    dateTime.setSeconds(dateTime.getSeconds() + 1);\n    return moment(dateTime).local().format(\"YYYY-MM-DDTkk:mm:ss\");\n  };\n\n  const clearEvents = () => {\n    setTimeMap(timeMap.clear());\n    setEvents([]);\n  };\n\n  useEffect(() => {\n    handleReload();\n    getMovementDetails();\n    countTimer();\n    //eslint-disable-next-line\n  }, [timer]);\n\n  function countTimer(){\n    setTimeout(() => {\n      setTimer(!timer);\n    }, 1000);\n\n  }\n\n  const populateStartTimeMap = (element, startTimeMap) => {\n    var {\n      name,\n      clientName,\n      timeZone,\n      cron,\n      cronInfo,\n      env,\n      exchange,\n      reportCycle,\n      createdTs,\n      triggerTimes,\n    } = element;\n    triggerTimes.forEach((element) => {\n      if (startTimeMap.has(getEventKey(element))) {\n        const newList = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        const existingList = startTimeMap.get(getEventKey(element));\n        startTimeMap.set(getEventKey(element), existingList.concat(newList));\n      } else {\n        const list = [\n          {\n            name: name,\n            clientName: clientName,\n            timeZone: timeZone,\n            cron: cron,\n            cronInfo: cronInfo,\n            env: env,\n            exchange: exchange,\n            reportCycle: reportCycle,\n            createdTs: createdTs,\n          },\n        ];\n        startTimeMap.set(getEventKey(element), list);\n      }\n    });\n    return startTimeMap;\n  };\n\n  const handleEventClick = ({ event }) => {\n    const key = getEventKey(event.start);\n    var messages = [];\n    Object.values(timeMap.get(key)).forEach((element) => {\n      const message =\n        element.name +\n        \" \" +\n        element.clientName +\n        \" (\" +\n        element.env +\n        \") \" +\n        element.exchange +\n        \" \" +\n        element.cron +\n        \" (\" +\n        element.cronInfo +\n        \" \" +\n        element.timeZone +\n        \") \";\n      messages.push(message);\n    });\n    setDisplayMap({ key: key, values: messages });\n    setPopup(true);\n  };\n\n  const setNewEvents = (cronDetails) => {\n    var startTimeMap = new Map();\n    var newEvents = [];\n    cronDetails.forEach((element) => {\n      populateStartTimeMap(element, startTimeMap);\n    });\n    startTimeMap.forEach((value, key) => {\n      if (!isNaN(new Date(key).getTime())) {\n        newEvents.push({\n          title: \"Event \" + newEvents.length,\n          start: key,\n          end: getEndTime(key),\n        });\n      }\n    });\n\n    setEvents(newEvents);\n    setTimeMap(startTimeMap);\n  };\n\n  const handleReload = () => {\n    return new Promise((resolve) => {\n      api\n        .getTriggerTimes()\n        .then((res) => {\n          clearEvents();\n          setCronDetails(res.data.message);\n          setNewEvents(res.data.message);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const getMovementDetails = () => {\n    return new Promise((resolve) => {\n      api\n        .getMovementRecords()\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <POPup elementsMap={displayMap} stateValue={stateValue}></POPup>\n        <FullCalendar\n          plugins={[timeGridPlugin]}\n          timeZone=\"local\"\n          initialView=\"timeGridWeek\"\n          allDaySlot={false}\n          eventMinHeight={20}\n          headerToolbar={{\n            left: \"prev,next\",\n            center: \"title\",\n            right: \"today\",\n          }}\n          buttonText={{ today: \"Current Week\" }}\n          eventClick={handleEventClick}\n          slotDuration=\"00:10:00\"\n          events={events}\n          slotLabelInterval=\"00:30:00\"\n          nowIndicator={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}