{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCfb5xN45OixlxMYEW7fnWs7YMWdVICVtw\",\n  authDomain: \"email-tracker-54b1d.firebaseapp.com\",\n  projectId: \"email-tracker-54b1d\",\n  storageBucket: \"email-tracker-54b1d.appspot.com\",\n  messagingSenderId: \"467080504489\",\n  appId: \"1:467080504489:web:51b5e7aa2819b5e70fb5b8\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", console.error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"sources":["/home/jinsonshaju/collateral/collateral-email-tracker/src/util/firebase/Firebase.jsx"],"names":["initializeApp","getFirestore","doc","getDoc","setDoc","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","console","log","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,QAMO,eANP;AAQA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,SAAS,EAAE,qBAHU;AAIrBC,EAAAA,aAAa,EAAE,iCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB;AASA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAIV,kBAAJ,EAAjB;AACAU,QAAQ,CAACC,mBAAT,CAA6B;AAC3BC,EAAAA,MAAM,EAAE;AADmB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGhB,OAAO,EAApB;AACP,OAAO,MAAMiB,qBAAqB,GAAG,MAAMf,eAAe,CAACc,IAAD,EAAOH,QAAP,CAAnD;AACP,OAAO,MAAMK,EAAE,GAAGtB,YAAY,EAAvB;AACP,OAAO,MAAMuB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;AAE5D,MAAG,CAACA,QAAJ,EAAc;AACd,QAAMC,UAAU,GAAGxB,GAAG,CAACqB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;AACA,QAAMC,YAAY,GAAG,MAAMzB,MAAM,CAACuB,UAAD,CAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;;AACA,MAAI,CAACA,YAAY,CAACG,MAAb,EAAL,EAA4B;AAC1B,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBR,QAA/B;AACA,UAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAM/B,MAAM,CAACsB,UAAD,EAAa;AACvBM,QAAAA,WADuB;AAEvBC,QAAAA,KAFuB;AAGvBC,QAAAA;AAHuB,OAAb,CAAZ;AAKD,KAND,CAME,OAAOE,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCD,OAAO,CAACO,KAAR,CAAcC,OAArD;AACD;AACF;;AACD,SAAOX,UAAP;AACD,CArBM;AAuBP,OAAO,MAAMY,kCAAkC,GAAG,OAAOL,KAAP,EAAaM,QAAb,KAAyB;AAEzE,MAAG,CAACN,KAAD,IAAU,CAACM,QAAd,EAAwB;AACxB,SAAO,MAAM9B,8BAA8B,CAACY,IAAD,EAAMY,KAAN,EAAYM,QAAZ,CAA3C;AACD,CAJM","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword\n} from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCfb5xN45OixlxMYEW7fnWs7YMWdVICVtw\",\n  authDomain: \"email-tracker-54b1d.firebaseapp.com\",\n  projectId: \"email-tracker-54b1d\",\n  storageBucket: \"email-tracker-54b1d.appspot.com\",\n  messagingSenderId: \"467080504489\",\n  appId: \"1:467080504489:web:51b5e7aa2819b5e70fb5b8\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async (userAuth) => {\n\n  if(!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", console.error.message);\n    }\n  }\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email,password) =>{\n\n  if(!email || !password) return;\n  return await createUserWithEmailAndPassword(auth,email,password);\n}\n"]},"metadata":{},"sourceType":"module"}